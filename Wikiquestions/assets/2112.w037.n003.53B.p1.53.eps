%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/3/2021
%%BoundingBox: 0 0 735 400
%%HiResBoundingBox: 0 0 734.8400 400
%%CropBox: 0 0 734.8400 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 72 8%%BeginData: 20019 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFFD04CACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACAFF51527DFFCAFF7CA1CACFCACFCACACACFCA
%CACACFCACAC9CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAC3F820277DCAA0F852
%CAFFCAFFCACFCAFFCACFCAFFCAC8C9C9C8CACAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACAA8
%519999204BA12020277DCFCACFCACACACFCACACACFC2C19FC8C8CACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAC3C2C2A1FFA0C2752052FFCAFFCAFFCFFFCAFFCAC9
%C1C8C2C9CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFFD04CAC1C8C1C9CAC99FC299A1CACFCACA
%77A2CACACAFFCAC276A2CACACACFCAFFCAFFCAFFCAFFCACFCACFCACACACF
%CACFCACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFC9FD04C8CFC8C8
%C1C8CAFFCAFF774C2277CAFFCAFFCACACAFFCACFCAFFFFFFCBFFFFFFCBFF
%FFCFCAFFCAFFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFFD04CACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCAC8
%C1C8C1C8C9C8C1C8C2CFCACFA14C4B7077CFCACACACFCACACACFCACACAFF
%A2CBA2CBA2A9A8FFCACACAFF7DFD0427CACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCACFC2FD04C8C9C7C8C1C9CBFFCACF9AC275FFCAFFCAFFCAFFCA
%FFCAFFCAFFFFCBA8CBA9CBA8FFFFFFCAFFCF76FD04F87DFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFFD04CACFCACACACFCACACAFFCAFFCACFCACACACFCACA
%CACFCACACACFCACACAFFC9C8C1C8C1C8C2C9C8C8C9CFCACAA8C299A0CAFF
%CACACACFCACACACFCACACFFFA8CBA8CBA8CBA8FFCACACAFF76764B27F827
%A8FFCACACACFCACACACFCACACACFCACACAFFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCAFFCAC9C9
%CACAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAC9C1C8C1C8C9C9FD04C8C2A7
%59595276598483FFCACFCAFFCACFCAFFCAFD0BFFCACFCACA9AA0F8F8F87C
%CFFFCACFCAFFCACFCAFFCACFCAFFCACFCAC9CAFFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCACACFCACACACFCACACACFCAC8C1C19F
%C9CACFCACACACFCACACACFCACACACFCACAC2C8C1C8C1C8C1C8C1C87C5935
%5959593559355959A8CACACACFFD05CAFFCAFFCAFFCAFFCACACACFCACAA7
%A17605F8F876FFCACFCACACACFCACACACFCACACAC9C2C89FFD04CACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACAFFCAFFCAFFCAFFCAFFCA
%C99FC8C2C2C8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC9C7C8C2C8C8C8C2
%C8C8A15960595959845F59596059CACAFFCAFFCAFFCAFFCAFFCACFCAFFCF
%FFCAFFCAFF7D5F5960355F2EA8CAFFCAFFCAFFCAFFCAFFCAFFCACFC8C8C1
%C8CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACF
%CACACACFCACACAFFC9C7755199C9CACFCACACAFFCACFCAFFCACFCAFFCAFF
%C9C8C1C8C1C8C1C8C1C8BCA0595335592E52282E52A0C3FFCAFFCACFCAFF
%CACFCAFFCACACACFCACACAFFA8FD0835CACACFCACACACFCACACACFCACAC9
%C99FC1C2FFCACACACFCACACAFFCACACACFCACACACFCACACACFCACACACFCA
%CACFCAFFCACFCAFFCACFCACFC8C175C8C9FFCAFFCACACACFCACACACFCACA
%CACFCACAC9C8C8C8C1C8C8C8C2C2BCC2767D7CFD04F876BBC9CACACACFCA
%CACACFCACACAFFCAC2C2C3C2C2CA84595F3559FD043559FFCAFFCACFCAFF
%CACFCAFFCAFFA8A29BCACAFFCACFCAFFCAFFC9C9C8CACAFFCACFCAFFCACF
%CAFFCACFCAFFFD04CACFCACACACFFD04CAC8C8C9CFCACACAA1FD0E4C4B70
%4C764B764C7699C2BCC2997520F8F84B6F9A70FD0B4C77CABCC299C2BBC3
%595F595935605959343583CACACFCACACACFCACACACFFD07CACFCACACAFF
%C9C19FC8C1CACACFCACACACFCACACACFCACACACFFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFF4C4C224C4C4C224C4C4C224C4C4C224C4C4C224C22
%4C22769AC2BCC29A27F8F8209A764C4C4C224C4C4C224C4C4C224CCAC9FD
%05C2AE58C3C35F3560595F3584CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAC99FA0C2C1C9FFCAFFCAFFCAFFCAFFCAFFCAFFFD04CACFCA
%CACACFCACACACFCACACACFCACFA8774C4C4C774D774C774D774C774D774C
%774D774C774D774C77769B9A9B4C774C7776774C774D774C774D774C774C
%4C22CACA756F75757576526FA1FD0735CACACFCACACACFCACACACFCACACA
%CFCACACACFCACACAFFC99F269FC1C9CACFCACACACFCACACACFCACACACFFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACA4C4C4DA277A277A277A277A2
%77A277A277A277A277A277A277A2777877A277A277A277A277A277A277A2
%77A277774C4CA8FF7D5227FD044C52533B355935353584CAFFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACFC8C29FC8CAFFCAFFCACFCAFFCA
%CFCAFFCACFCACACFCACACACFCACACACFCACACACFCACACACFA87121FD2B77
%4C4C22CACAFF777777A277787777535934353535A7CFCACACACFCACACACF
%CACACACFCACACACFCACACACFFD04CAC9C9CAFFCACACACFCACACACFCACACA
%CFCACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACA4C4C4DA277A277A2
%77A277A277A277A277A277A277A277A277A277A277A277A277A277A277A2
%77A277A277A277774C4CA8FFCA774DA277A277A2779C777E597D7DFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCACACFCACACACFCACACACFCACACACFCACACAFFA8
%7722FD04779CFD22A2FD04774C4C22CACACF7777779CFD07779C77A2CACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFCACACACFCACACACFCACACFCAFFCACFA8CFA8A8A8CFA8A8A8FFCACFCA
%CA4D4C4CA2779C77FD04A2C5A2A2A2C5A2A2A2C5A2A2A2C5A2A2A2C5A2A2
%A2C5A2A2A2A3A2A2A2C5A2A277A27777464CA8FFCAA24D7777A277774CA2
%77787778A2FFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFFD04CACFA884598483845984
%5F84CACFCACAA8772271FD05779C7777779C7777779C7777779C7777779C
%7777779C7777779C7778A1CAA1CAA1CAA1CAA1CAA1A1A1CAC9CA77774CFD
%0577A1C4A1A1A1CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CACACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFFFCAFFCAAE84FFA8
%AFA8FFA8AF84FFCAFFCACF4D4C4CA277A277A277A277A277A277A277A277
%A277A277A277A277A277A277A277A2A1CFC9CACACFCACFCACFCACFCACFCA
%CAC9C44D7777A277A277A2CACAC9CFCACAC9CACACAC9CACACAC9CACACAC9
%FD04CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFFD04
%CACFA884A8AFA8A8A8AF8484CACFCACFA877227777787777FD1BA2CAC9CA
%C9CAC3CAC9CAC3CAC9CAC3CAC9CAA17771FD04779B77CAC9CAC3CAC9CAC3
%CAC9CAC3CAC9CAC3CAC9CAC3CAC9CACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFFFCACFCACF84AE84AFA8AE84AE84CFCAFFCACA
%4C4C4DA277A277A2A2A3A2A2A2A3A2A2A2A3A2A2A2A3A2A2A2A3A2A2A2A3
%A2A2A2A3C4CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF77532E779BA27759
%A8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACACACFCAFFCACFCAFF
%CACFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACFCACACFCACAA8848484598484
%8483A8CACACACFA87121FD08777877777778777777787777777877777778
%77777778777777C4C9CACAFFCAFFCAFFCAFFCAFFCAFFCAFFA82E050C2EA8
%2E2F0C59CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFC3FD04CACFCA
%CACACFCACACACFFD09A8CACACFCACAFFCAFFCAFFCAFFCAFF84CFCAFFCACA
%CAFFCACF4C4C4CA277A277A278A2A2A277A2A2A277A2A2A277A2A2A277A2
%A2A277A2A2A277A2A2CACAFFFFFFCFFFFFFFCFFFFFFFCAFFFFC97B2E0C2E
%7C592E2F0CA8FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCACACAFFCAFF
%CAFFCAFFCAFFCAFFA8FD0984CAFFCAFFCACACFCACACACFCACACACFA8CA27
%F827CFCAFFCA4C28FD04779CFD1BA2CAC9CFCAFFCAFFCAFFCAFFCAFFCAFF
%CA7D052E0559587C2E2F0C7DCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFC9FD04CACFCACACACFFD04CA84AFA8AFA8AFA8AF84CACACFCACACFCA
%FFCACFCAFFCACFCAFF7DF82051CAFFCACA77FFFFFF539C77FD1CA2CACAFF
%CAFFFFFFCAFFCFFFA8FFFF84052E2E847D350C2F0C84CFFFA8FFA8FFA8FF
%A8FFA8FFA8FFCAFFFFFFCAFFCFCAC9FFCACFCAFFCACFCAFFCAFFA884A8AF
%A8AFA8AFA884CAFFCAFFFD04CACFCACACACFCACACAA826996FA1CACACAC2
%A8FFA859FD1D77A2C9CFCAFFCAFFCAFFCAA883847DA8592E59A8842F0C35
%2E84A8A884847D8484847D8484847D84A8FFCAFFCAFFCAFFC9CACACFCACA
%CACFCACACACFCAA883AE84A884AE84A883FD04CACFFFCAFFCAFFCAFFCAFF
%CAFFCAC999C2CAFFCACF9AA0777E77A277A277A277A277A277A277A277A2
%77A277A277A277A277A277A27778A1CFCAFFCFFFFFFFCFFF84A884A884A8
%84AF84A884A884A8FFFF84A884A884A884A884A884A884AECFFFFFFFCFFF
%FFCACAFFCAFFCAFFCAFFCAFFCAFFCAA8FD0784AECAFFCAFFFD04CACFCACA
%CACFCACACACFC99999C9C9FFC3C29971779CFD137778777776A177777778
%77A2C9FFCAFFCAFFCAFFCAA8848484A8848484A8848484A884FFA8A88484
%84A8848484A8FD0584FFCAFFCAFFCAFFC9CACACFCACACACFCACACAFFCACF
%CAA884A8A8CFA8CAA8CFCACACACFFFCACFCAFFCACFCAFFCAC9C7C29AC2C1
%C8C9C3BCC271A277A277774C7777774C7777774C7777774C77779C77A1C2
%C8C1A1779C779CA1CACAFFFFFFCAFFFFFF84A884A884A884A884A884A884
%A8CFFF84A884A884A884A884A884A884AEFD06FFCACACACFCAFFCACFCAFF
%CAFFA1A1A1FFA8FFCAFFCAFFCAFFCAFFCACFCACACFCACACACFCACACAC8C1
%C299C299C8C1C899C299FD05774C774C774C774C774C774C774C774C7777
%77A0C19F9F9FA1777777A2C9CFCAFFCAFFCAFFCAA87D8484848384848483
%84848483FFA884838484848384848483FD0484A87D7DA8FFCAFFC3FD04CA
%CFCACACACFCA4C214CA1CFCACFCACACACFCACACACFCACAFFCAFFCAFFCAFF
%CACFC7C8BCC2C2C8C2C8C8C2C29A4DA277A2777771777777717777777177
%7777717777A277C89FA09FC8A17877A2A1CACAFFFFFFCFFFFFFF84A884A8
%84A884A884A884A884A8CFFF84A884A884A884A884A884A884AF27F8F87D
%FFFFCACACAFFCAFFCAFFCAFFCFCA4B9A4BA2CFFFCAFFCAFFCAFFCAFFCAFF
%CACACFCACACACFCACAC2C8BCC29AC8C1C8C1C8BCC24BFD05774D774C774D
%774C774D774C774D774C777777A0C89F9FC1A1777777C4C9CFCAFFCAFFCA
%FFCAA884A884A884A884A884A8848484FFCAA884A884A884A884A884A884
%84A8A84B27F8FFCFFFC9FD04CACFFD04CA4C7599704CCACACFCACACACFCA
%CACACFCACACFCAFFCACFCAFFCAC9BCC2BCC2C1C8C8C8C9CA4C4C4CA2779C
%FD04774D7777774D7777774DFD0477A277A1A0C8C2A177A27778A1CACAFF
%CFFFFFFFCAFFFFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFFFFFCAFFCFFFCAFF
%CFFFCAFFCFFFCAA19A7CFFFFCFCAC9FFCACFCAFFCAFF774D769A4C4C77FF
%CAFFCACFCAFFCACFCAFFFD04CACFCACACAFFC3BC99C2C1C8C1C8C1CAA84C
%21FD0977717777777177777771FD0877A1FD0577A1C9CFCFFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFFF
%CA76C3CAFFCAFFC9CACACFCACACACFCAA1FD04774D7DCACACACFCACACACF
%CACACACFFFCAFFCAFFCAFFCACAC2C3C2C8C2C8C8C8CAFF4C4C4DA277A277
%A277A277A277A277A277A277A277A277A277A277A277A277A27778A1CFFF
%A1F852CAFFCFFFA8A884AEA8A884AEA8A884AE84AFCFFFA8A884AEA8A884
%AF84847DAFA8CAC3C3C3CACAFFFFCACAFFCAFFCAFFCAA277A277A277A277
%CACAFFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACAC8C1C8C1C87CA8CA
%4C227177A2777777A2777777A2777777A2777777A2777777A2777777A277
%77779C77A2C9FF2720F852FFFFCAA884848384848483848484838484FFA8
%84848483FD0484A7F80583C2BBBCC2C2BBC2CAFFC9CACAFFCA7776774C4D
%77A2FD0577CACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCAFF598359
%8335355FCF4C4C4C774C7771774C7771774C7771774C7771774C7771774C
%7771774C7771774C77A1CFA175996F27FFFFFF84A884A884A884A884A884
%A884A8CFFF84A884A884A884A8A14BF8C3BBC2BCC2BBC2BBC2C9CFCACFCA
%CA4C4C224C22777EFD04779C77CFCAFFCACFCAFFCACFCACACFCACACACFCA
%CACACFA859343535353459A84C214C224C214C224C214C224C214C224C21
%4C224C214C4C4D214C224C214C224C21A1CA7D4B996F52A8FFCAA87D8484
%84838484848384848483FFA88483848484838484A14B009AC299C2BBBC99
%C2BBBCC3CACACA6F764C7E224C709BFD05775359CFCACFCACACACFCACAFF
%CAFFCAFFCAFFCAFFCACF355F355959833584FD174C9C774DFD084CA1CFA1
%78779C77FFFFFF84A884A884A884A884A884A884A8FFFF84A884A884AE84
%AEA7A04BC2C2C3C2C2C2C9C9C2BBC3CAFFCAA16F4C4C7075C2BCA277A277
%A25359CAFFCAFFCAFFCAFFCACACFCACACACFCACACAFFA8FD043559353535
%4C214C224C224C224C224C224C224C224C224C224C224C4C71224C224C22
%4C224C21A1C8C19AA19AC2C1CFCBA883A8848484A8848484A8848484FFA8
%8484A87D77777D7DA1BBC2C2C2A0C3BBC2BCC3BCC299CACACFA8774C4C4C
%769A9B7778777777530CCACACFCACACACFCACACFCAFFCACFCAFFCACFCAA8
%3535355F5935355F774C4C4D4C4C4C4D4C4C4C4D4C4C4C4D4C4C4C4DFD07
%4C4D4C4C4C4D4C4DA0C8C1C8C1C8C1C7C1CFA88484A8848484A8848484A8
%84A8CAFF8484847771774C7777A1BCC9BBA0C2C2BCC2BBC2BCC2C3FFCACF
%C9C9C8C8A0C3A1A177A1772F0C35CAFFCAFFCACFCAFFFD04CACFCACACACF
%CACA7D3535353459353512A8CACAA2CAA8CAA2CAA8CAA2CAA8CAA2CAA8CA
%A2CA7746224C2177A8CAA8CAA8CA7D9F7599759F9FC29FC1C1FFA8CFA8AE
%A8A8A8AEA8A8A8AEA8FFCAFFA8A84C774CFD0677C2BBC29AC2BBC299C2BB
%C9CAC9C1C8C1C8C1C8C1C8C1C8C1580C2E2EFD04CACFCACACACFFFCAFFCA
%FFCAFFCAFFCAA83559355F5935353559FFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCFA1224C4C4C77FFCAFFCAFFFF28FD05F8A09AA0C1C8CAFFCA
%FD0BFFCFFD04FFA2717777A277A277A277A19AC9C2C2BBC2BBC2CAFFC8C8
%C2FD07C8C7C8522F0CA8CAFFCAFFCAFFCAFFFD04CACFCACACACFCACF7DFD
%04355935353559CACACAFFCACFCACFCACACACFCACACACFCACACAFF774622
%4C2277CACFFD04CA4BF8F852F82075C8C1C77B592E2E59FFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFF7DFD04779C77777778777777A1C2C3C3C9C9CAC9C8C1
%C89FA0C1C8C1C8C1A07C2F0C59CAFFCACACACFCACACACFFFCACFCAFFCACF
%CAFFCA843559355959FD04357D77A277A2CAFFCAFFCACFCAFFCACFCAFFCA
%FFCFA1224C4C4C77FFCAFFCAFF76752027274B99C2C1C8582F0C2F2E2FA8
%FFFFFFCAFFFFFFCAFFFFFFCAFFFFA877A2779C77A2779C77A2777877A1FF
%FFCACACAC9C1C8C8C876C2C2A02E2F0C0D0C59CAFFCAFFCACFCAFFCACFCA
%CACFCACACACFCACACACF59353435358434353535284C4C462177A8CFCACF
%CACACACFCACFCAFFCAFF774C224C2177CACFCAFFCACA4BF8F8F82099C1C1
%520D2E2E0C2F0CA8FD0ECAFD06774C78FD0777CFCACAC3CAC2C8C1C8C1A0
%9FC89F59597D7D7DA1FFCACACACFCACACACFCACAFFCAFFCAFFCAFFCAFFCA
%84355F355FA85F355935534C4D224C2277CAFFCAFFCAFFCAA877A177A177
%77FD054CA177A1777D7D5928522E52527C2E2F2E592E352E35C9CACACAC9
%CACACAC9CACACAC9CA9B7877A277A2777777A277A2779C77CACACAC9CFC9
%C8C2C8C8C8A0C8C8C8A1CACAA2A1FFCAFFCAFFCAFFCAFFCAFFCACACFCACA
%CACFCACACACF5935353559CAFD04352E714C4C4C4D4CA2CACFCACACACF4C
%22214C224C214C464C224C214621282E2E0C2F0C2F0C2F0C2F0C582E2F0C
%2F52C9C3C9C3C9C3C9C3C9C3C9C3C9A1787777777877774CA1A1A1779C77
%A1C3C9C3C9C3C9C1C8C1C89FC2C1C8C1C277A877CACACFCACACACFCACACA
%CFCACACFCAFFCACFCAFFCAFFCA8435353560CA59355935594C4D4C4D4C4C
%77CFFD04CAC977FD0C4C282F0C7D7C592E592E2F0C2F0C592E2F2E2F0CA1
%C2C3C2C3C2C3C2C3C2A176C3A17D77A2779C777753779AC9C2C3C2C3C2C3
%C2C3C2C3C2C8C8C8C1C9C8C8C1C8C8A877CACACFCAFFCACFCAFFCACFCAFF
%FD04CACFCACACACFCACAFD043559CF593534352E4C214C21462177FD06CA
%4C46214C21FD084C2F0C2E0C2F2E2E2E597CA076522E2E0C2F0C2E9AC2C2
%C29AC39AC39AC3842F06595953FD04770C0C2EC2BCC2C2C2BCC2C2C2BCC2
%C2C8C1C8C1C8C9C9C1C2BB7D7D77A8CFCACACACFCACACACFCACACACFFFCA
%FFCAFFCAFFCAFFCA6035593584CA84355F3559FD0677A1FFCAFFCAFFCAA2
%FD0B777D2E2F2E352E2F2E352FC3C1C2A0350C2F2E2F7DCAC3C9C3C9C3C9
%C3C9C3FFAF842E2F2E7D77772E2F2E2FA1CAC3C9C3CAC3C9C3CAC3C9FD05
%C8FFCAC9BCA15959A1A2CAFFCAFFCAFFCAFFCAFFCAFFFD04CACFCACACACF
%CACA83A1767DA7FFA87D767D7DFFCAFFCACFCAFFCACACACFCACACAFFCACF
%CAFFCACFCAFFCAFFCA590C2E0C2F2E2F0C2FA0C2BBC32F352F3553CACAFF
%CACFCAFFCACFCAFFCACFFFA92F0C0CA27E8484A9A8CACAFFCACFCAFFCACF
%CAFFCACAA0C2C1C9CACFA07C355935A87DFD04CACFCACACACFCACACACFFF
%CACFCAFFCACFCAFFCACA9BC39BCBCAFF9B9B77A2C9FFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCAFFCA842F2F0C2F0C2F0CA1BCC2C3CA
%C2C3A0CFCACFCAFFCACFCAFFCACFCAFFCACFCAFF597EA8FFCFFFCAFFCACF
%CAFFCACFCAFFCAFFCACAA0C29AA1A8FF7D5959597DCACACA77FFCACFCAFF
%CACFCAFFCACFCACACFCACACACFCACACACFA19B779BA2CFCAA2777777A1A1
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFFD04CAA17DFD04
%597DA0BBC9C3C2BBBC9ACFCACACACFCACACACFCACACACFCACAA8FFA8FD06
%CACFCACACACFCACACACFA883347D58593484CA59345959CACACFCAA27DCF
%CACACACFCACACACFCACAFFCAFFCAFFCAFFCAFFA85353532FA8CAFF535353
%77535328A8CFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFC3C2C3CABCC2BCC2C3FFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA83355F35597D5F7DA835847D
%CACAFFCAFFCAA2CAFFCAFFCAFFCAFFCAFFCACACFCACACACFFD04CA595953
%59A8CFCAA87DA87DA87D84A7FFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFFD04CABBC3CACAC2C2BBC2C3CACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFFD04CA7D847D847DCA7D
%A8A8A8FD05CACFFD07CACFCACACACFCACACFCAFFCACFCAFFCACFCAFFCAFF
%CAFFCACFCAFFCAFFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCAFFCAC9C9FFCAFFC9C3BCC9CAFFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFFD04CACFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACAFFCACA
%CACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACF
%CACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACA
%CACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFFD04CACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCA
%CACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACACFCACACA
%CFCACACACFCACACACFCACACACFCACACACFFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF
%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF
%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-03T18:33:01+03:00"
   xmp:ModifyDate="2021-12-03T18:33:01+03:00"
   xmp:MetadataDate="2021-12-03T18:33:01+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:e63baa1b-7486-7744-bd13-9facfde5f77f"
   xmpMM:InstanceID="xmp.iid:e63baa1b-7486-7744-bd13-9facfde5f77f"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="140"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9E5iu0dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirxS58/wD5xeXPN2q6bc6UnmXR7VhLHO6Lp0zJMSyx20oLRTrEuxJQGuxNcrOWMa4tj82y&#xA;OnyTJ8P1AfD4IvzH+ed1/hKbX9A02W1utHu7ePWdK1i2mjdkuAypFDJDzXlI4+BxUdOQowyYINVu&#xA;C1SBAN+mQ6EHdlfkT82fLXmyT6hSTSfMUa8rnQr4elcrtUtHWglT3Xt1Aw8xY3CLINEVLuLNcWTs&#xA;VQmoX/1MxOwrExYOd67CoAp45hazV+Dwkj0m7bsOHjsdVOw1dLuTiE4VrxFamo33FB28K5VpO0Rm&#xA;lVV+Px3ss2mMAj82TjuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2Kse8w+lcXCwyKHWIVof5m3/AFUznO1dTLxOEH6XZ6IGMbHVRskt7fSbuAIpilZQIzuOTDc7+y5D&#xA;T6yUcMyTfID482eUGWSJ7khH5feWdY1fT7i/tBcTafMlzbSsaMjxMHWjLRuPJRVa0PfJ9narJLKI&#xA;jl1TrZCcPUBY5Mr85+Y28ueW7zWFtmu3twojgTaryOI0r348mFab502OAlKiadSBZphP5Zef/Peu&#xA;ao9lrOlRta/G8l/ERH6AHJVVo6tyDPEyjv8AOmW5BhIuEuTPJiMeb0fUbMXlnJByCOw/duRXi/Y0&#xA;2rmDn08MseGXJGLIYGwhNE0MaYsjSXD3VxLTnIwVVFOyKPsj6cMMGLH9ERH7/mnJmlPmU7tokcSM&#xA;4YiNS3FKVNOwrmRjjZcbLMxqlH65Z/8ALJd/dH/zVmR+WHew45d4VrY2tyzokE8RVS3KQIF2+ROR&#xA;ngAHNBySHcoZjOS838wf85DflToWqXml3mrM99Ys0VxFBBNKBKpo0YdV4FlPX4qDp1yQgWo5ohmP&#xA;lTzZoPmvRINa0O5F1YT1CvQqyspoyOrUKsD2P6siRTOMgRYTfFk7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqpXVzHbQtLJ9le3ico1GeOKHFJnjgZGgl1p5js7i7FsaLIyq4AYMeLkhWI22JHXMDB2qJyAl&#xA;Hhva2+eloWDabZtnFdirsVdirFbty91K57uf15xWpnxZJHzLucYqIDYaBYVBq7mpZa0Vewrtv9+A&#xA;GIiOpWpE9wUptft9KX12jRSwKhRyJboaAFsz+zfFlk/dRjfXnQHzcLX58eKF5JHy7yxvzH53vdWs&#xA;JbJLSBIZOJHqj1TyRgysK/CpBFQeJoc638rcakd3mcfbZjlBEfQD8f1ITyf5pk0ASLc20Ur30vqX&#xA;MkRZWZwDTjyLdEHT8cGLRCA2LbqO3jknfD6Pt/S9Q0rWdO1W39azlDgfbQ7Op8GXISgY83OwaiGU&#xA;XEo3It6vbPEFljlNFlQoTQMN9twQQfuyeOVFpyxJqkN+htJ/37H/ANIlv/1SzK/M/iyxufd9v7UV&#xA;aafY2Ia5jdG5qYxwhijNTv1jRT275GeawwPFI0fvQzMqqWYhVUVZjsAB3OYjlE0+X/zh/LvSLmw1&#xA;jVdO046jfJOWsry3kYBluJGdk/ZSUxtJUBOZ4rRuOOKOTjro06jUabwuPiHdzRP/ADiRqnm2z1XW&#xA;fKl9Zyw6PHAdRBmiZDFcs8cQUMQNpUBNP8io75dljTTpMol9JsPpjKXNdirsVQc+r2UExikYgg0L&#xA;DcA/RmDl7RxQlwyLfDTTkLCrY3RubZZivEksKA1GxI65bpc/iwEqrn97DLj4JUr5ktbsVdirsVdi&#xA;rsVdirsVQup2jXVqY1+0DyUHoabU/HMLX6Y5sdDmN27BkEJWWI+XvJeq2OsS3VxqE81kFEVpYssM&#xA;UFvEpBCIsSrypQKrHoM1eLRZJyAlHho2T1LkSyxiCRK+4dzK9b1nT9E0q51XUZPSs7Vecr0qdyFA&#xA;AHUsxAGdHCBkaDgvOf8AoY3yR/yxan/yKg/6r5l/kJ94Twtf9DG+SP8Alh1P/kVb/wDVfH8hPvH4&#xA;+C8Lv+hjfJH/ACw6n/yKt/8Aqvj+Qn3j8fBeFK7j88PJU1wzxW9/GrVYiSKLqfDjK2aHV+zeWUzK&#xA;Bjv+O5z8WpoVJtfzj8lkAl7hSexiNR9xOYR9nNV3R+bb+Zgvj85aF5lLRafKziAVkikXg3xdwD1y&#xA;cOz82kPFLYnqHIxRxZ4yhIcQ7iluoRx6cst7K8s0BooiRQVjAB+M9PhHViT7DNtj7TJFEbug1Psx&#xA;CJBjL0fb8+74fe8G/wCVnefZNbj0try2E63X1ZZvSX0w5Yxcq0rx38Mz/GPDfk6kaCHHwVzNde99&#xA;A+WPzF0fyvYW9/q0dxI91H6LLBHHzkkXiWmUO6j0jT4Ty7jbMLTDLnynfYD4f2vQ/kcODBEQHqvc&#xA;9T+zuTr/AKGN8kf8sOp/8irf/qvmw/IT7x+Pg4/C7/oY3yR/yw6n/wAirf8A6r4/kJ94/HwXhTny&#xA;r+cnlTzNqg0qxS5tr6VWNst2iKsjKpYqGjeTegrvTKsulnCN7J4e9GP511KNmja3jVlNHX4uoPzz&#xA;RHXzG1B3I7KxncEoHzJ5imv9BhjZfSSS8jhv+FaCEjkPE/FxP3e+bTs7MMlk84vMe0uCWGMYRsxm&#xA;fwHnzafdllYosaSgvE7OiRsvWqOxCsN9qHNtHLGXI28Xm0eXHRnExvle33o/Tb/VvLWow3CEUcBn&#xA;iWRXjljqRQlCy/LwxnATFMtPqMmnmJD+0PabK7hvLSG7gPKGdFkQ+zCuauQo091iyCcRIcirYGx2&#xA;KpFrmh6jdSrLYTxpQHlBOHKlieoYE8f+BzCy9m4cpJlxA+R/QXJxaow2Taxtzb2cUJpyRQGp05dW&#xA;p9OX4MIxwEByDTknxSJV8uYJNfeY44L0WqLVuLvyYNxpGVD/ABAcRQuOp37dDml1PapjIiAsA05m&#xA;PSgjc80w06/gv7RLmEhkcAgqQwIIqCCOoIOxzY6XUDLDiqjyI83Hy4+A0icyWt2KuxV2KuxV2Kux&#xA;Vh/5toj+QdQRwGRpbIMp6EG9hBGZGk/vB+OiY83z75O0bTbuwmuLqETSCUxryrQAKp2H+yzdEtoZ&#xA;B/hzQ/8Aljj+4/1yNrTv8OaH/wAscf3H+uNrTv8ADmh/8scf3H+uNrTv8OaH/wAscf3H+uNrS+HQ&#xA;9KglWWC3WKVd1kQsrD5EGuCURIUdwkEg2E0F5dCMx+q3FgVO+9Dt9rrmH/J2C74d/i5B1WQirY8v&#xA;kjyepDDR7QEbg+kv9MyvDj3Bw/Dj3BH3OjaZdS+rcW6yyUA5PUmg6Ab9B4Y44RgKiKDbKRkbKl/h&#xA;zQ/+WOP7j/XJ2xpo+W9DIp9Tj/H+uNrSW/lpbx235tabBFX04rmZUB3NBFJTKtV/dljJ6L+bun65&#xA;pl6mpabrb2yahIaWf1aB0j9NF5EOyljyY13zS4ez8WWRMg249XmAoSoDyDDCvnCeykt5vMBeG5RR&#xA;NGbO1I2YOCKrsysoIYbjM3H2Xih9KMuTJkrildb8gjkk1RrOCC/uzfSW4KpMyLG3EnoQm23jl+LS&#xA;xx3w9Xnu3NHnz8Mo+oRHLqtVGZgoBJJoB75ZTyw0uW+HhlfuL3Xy3p02naFZWUxrNDHSSm9GYliP&#xA;orTNTklxSJe40WE48MYnmAmWQcp2KuxV2KuxVh3mHyGdT1i31KK7urd4OQMdvN6ccqOwYxzxMGSR&#xA;ajwrvmjzaHKJS4BGUZG9+YcyOaJAskEfayfTbL6pbCOoLE1anQbUoM2Gh0vgwo7k7loz5eOVorMx&#xA;qdirsVdiqWS6reevLHb2bzLE3EuoY7j5A5dHEKsl1uTXSEiIxulv6T1X/q2y/wDAv/zTh8Ed7D89&#xA;k/mH7f1IrT76S59RZYjDLEQGQ+/zAyvJDhcrS6g5LsUQxz82P+UEvv8AjNZf9RsOW6T+8H46OZHm&#xA;8J8h/wDHIm/5iG/4gmbktoZnpN7BavIZYjJyA4lQCRT5+OBKZ/pyy/3xL/wC/wBcVd+nLL/fEv8A&#xA;wC/1xV36csv98S/8Av8AXFXfpyy/3xL/AMAv9cVd+nLL/fEv/AL/AFxV36csv98S/wDAL/XFU00W&#xA;A6sHeCExxRmjSSgAFutBQk5j59VHHz5pAtNT5UumU7RsCOhBofwzH/lGPcVod6RH8tdYJJ9aIe1H&#xA;/wCacf5Rj3Fdu9LPLH5Q69pPnq38wzXMElrDNJK0KCT1CHRlAFVA/a8chm18ZQMaLEx808/OUCbR&#xA;rGYKQYbgoajoHQn/AI0yOgyXIjyQIUwGyk9S2jbuBQ/MbZtUphoeiajqdzcQxTRFl/eQo5KNx6Mo&#xA;oCDxP68pzZhjFlIFsgsPIer/AFyJrkxxwK6tIwbk3EGpoB3zFn2hCtrtPCXp/wBej/lP4Zq/EDDw&#xA;S769H/Kfwx8QL4Jd9ej/AJT+GPiBfBLvr0f8p/DHxAvglWilWReS/SMkDbXKJC7JIdirsVdirsVd&#xA;irsVSSayv0up3jtY50kfkrMxGx7bOmZMckaG7pculy8ciIggnv8A2hRRrx5nhWwi9VBVlLSDbx3k&#xA;3yZIq7aIwyGRiICx7/1pjpFrcQ+u80axGVgRGpqBT6W8fHKMsgap2WhwyhZkKtj/AObjpH5A1CRz&#xA;xRJbNmY9gL2Ek5PSf3g/HR2EebwvyH/xyJv+Yhv+IJm5LaGaaPetbPJSFpuYH2eop/t4Epp+mX/5&#xA;Y5vu/sxV36Zf/ljm+7+zFXfpl/8Aljm+7+zFXfpl/wDljm+7+zFXfpl/+WOb7v7MVd+mX/5Y5vu/&#xA;sxVmXk6Q3tiKo0PKZlo436DfNLrxeUDySZVElln6Itv5n+8f0yjwQ4v5mXk79EW38z/eP6Y+CF/M&#xA;y8nfoi2/mf7x/THwQv5mXkxP8z9PtovKV16du97dfC9vbcwpJRgWbYA0Vew69O+GOSGGQJlw3sie&#xA;oymJMY8RDwvyfqa32rmxuiLaKVJJEMSNIQ0UbScVUtUlwvEb9aZuZ5eCNk/PZ1Wk7WnOdSHPlSZa&#xA;R53ttP1+0uRauLOKQC4LN+9KH4WKhaKCAa8TXBkxSnAgnn3MJ9unjHDGo+fN9F2+n2FxBHPDKzwz&#xA;KskbgijKwqCNu4zTnAA7kaskWKX/AKItv5n+8f0weCF/My8nfoi2/mf7x/THwQv5mXk79EW38z/e&#xA;P6Y+CF/My8mm0iDieLty7VIp+rE4QkamSEsej/RleNvzdEVlrS7FULe6lbWZUS1q+4CiuwycMZly&#xA;cbPqoYq4uqG/xDYeEn/Aj+uS8CTj/wAp4vNVttZs7iZYU5B2+zyFAafTgliIFtuLXY5y4Rdo7K3M&#xA;dirsVQmq211Pp12llKLfUHgljtLojl6cjoQjU7hWoaY2xMb36vnj8o/Jvm7RfPOnalq9xeX+tEyD&#xA;Vo5pzJS3uEdQWEtCHjkoznkelFrWuVfmeKXCBs5A0PBj4yfU9s/Mqxtr7yXqFtdMVt2MDy06lIp4&#xA;5WUUI+0EplvjnF6hz/ARgxccuG65/cxDzFpf5TWHl65i8qhoNXSSErbqbtvid4zIHE5ZR+5NeubX&#xA;BlnOjdxdbk8eMgKldjp5/qSDTdSayZz6YkElKitDtXvQ+OZbtEf/AIl/5dv+H/5txtXf4l/5dv8A&#xA;h/8Am3G1d/iX/l2/4f8A5txtXf4l/wCXb/h/+bcbV3+Jf+Xb/h/+bcbV3+Jf+Xb/AIf/AJtxtWee&#xA;Qr365aJLw4fv2XjWvQD2GabW/wB8Pcif0FnORdeoX119VtJJ+PL0xUL0qSaYQLLDJPhiSkP+K7j/&#xA;AHwn3nLPDcL86e55L5h8n+afNvmW7v8AW70W+niVks4EPMi3Vj6YVB8K1Xckmte2ZMZRiNhu67Lx&#xA;5JEyOyE1DydrGnXq2/lWwNvDEgD6o8sZuJmYfEebFeAH2aRqPfBKOPJGsnqHd0QJTxn936fPr+Pc&#xA;nnk/8r5Lcv5i8zcb11krb2ZcuJJK7yTsR8Qr+z374yygDghsPxybcWmNeLk9Rv8AFvSf8V3H++E+&#xA;85j+G5v509zv8V3H++E+84+Gv509zv8AFdx/vhPvOPhr+dPcn9pcC5to5wOIkWvE9srIpzoS4gCr&#xA;YGSS2PR/ozFxuwzdEVlrS7FUo1eVYL+2lkqECsKhEff5PVcyMHIun7SNTifJS/TFl/NJ/wBI1r/z&#xA;Tl9OB4o/AC2G6iudTtTFybhy5Viijpt/xUBX6chk+kt2llxZo1936k+zDehdirsVSDW9ea25rG3B&#xA;E+EkfaZvAZodXrskshx49gOrsdLpBKiWIaVBfPrratyZzMZfWneQ8lJVFVUUDoFQCv6ycxtRnMY1&#xA;xHj2/FuwyY4xHCmfmTUbqazgt5H5IHLE9yQKCp+nJYNXkyR4ZG6RpMEYyMg8zSZZdT1Zl6C6CfSk&#xA;ESn8Rnb9mxrBH8dS67Vm8skNqsssYiCOVryrQ06UzOcZL/rNz/v1/wDgjirvrNz/AL9f/gjirvrN&#xA;z/v1/wDgjiqc2Ts9rGzGrEbk/PFLMhpul2dsYXtPXuj6aI8ziFJppAT6cTseoG/wj7znBajtnUTy&#xA;Exlwx7h0Hn+1zRjiBVbpFrmnpYajJBGax0DJXqA3Y51nZWsOowCcvq5FxssOGVM//LL/AI5qf8xD&#xA;/wDEVzH1v98Pc1T+gvQ8i69A65/xyrj5D/iQyUObTqPoLC8vdQ7FXYqnbf8AKLJ/xk/42OV/xOYf&#xA;7n4pJljhuxV2KpN5s/5yF8j+Q7mDQ9Vt7+fUEhimdbaFSnpynqHkeMNQeG1dq1ymQ3drhmBAPUNJ&#xA;1Sx1bS7TVLCUTWN9ClxbSjo0cqhlP3HIOQgLHo/0Zi43YZuiKy1pY/588yXHlzyzc6nawi4vFKRW&#xA;sLAsrSSOF+IKVJCirGh7YQQN5cmUImRpiH5YfmPr/mfU9Q0XX7WG0vIIfWhMatG4FQpVo3Zt6OGB&#xA;8MyMsICIlA2EZsRAo7PSbeztoIxHGgAHU9SfcnMeUiWjHghAUAqhVHQAfLA2gBvFLsVdirznWbLU&#xA;21OaF43ZUciNuJ48Cdmr03zQTwjDfd3vSafLDgBtMrWBYIEiH7I3Pie+aXJPikS1TlZtLPzJQWn5&#xA;cahq1sTHqFt6SxTA/Z9S5jjbY7bo1M6jsPSYpiJkLu7+FuBl1OSEiAaDyPyPI8ml3EkjF5HuXZ3Y&#xA;1JJRCSSc7GgNg4t2nN7Zm4CUbiUr196f0xVCfoiT/fg+44q79ESf78H3HFXfoiT/AH4PuOKpjBF6&#xA;UKx1rxHXFKfJ5lL2cVveWq3RgaOSGQsVIeJgyMaA7gjOc1Hs7CeQzhIwB5ir59zeM+1EWld7eT3l&#xA;y9xMau/YdABsAM3el00MGMQhyDVKRkbL0f8ALL/jmp/zEP8A8RXNdrf74e5hP6CjbH85/wAtr7zc&#xA;3lK21hG1sSPAsTRypG80ZKtGkzKI2aqkCjbnpXBTruIMxumt1tpDcU9AD95XpTEInVG+SR+t5V/k&#xA;/CTLKk4fFg/Fu9byr/J+EmNSXiwfi3et5V/k/CTGpLxYPxaZPJpP6LDMF+o0AAofHw61rkN7828m&#xA;HB/RS31vKv8AJ+EmTqTRxYPxbjP5UAqU2+UmNSXiwfi0JYa7+X+oLK9hdQXiwELM0EhlCMRUBihP&#xA;E033weplWK6r72OfmFpGh+ZrmzgSNL+yWCW3uo0UNHGkg+F2clOPA7ihJ2O1aZrsuYE+k8noNNpj&#xA;GNTjV/j3sv8AIHl/RfLvlDTNE0aRJbGxi9MSxkkPISXlfdnILSMWoTtXMuMxIWDbrsmIwNEUrWPR&#xA;/ozHxubm6Il3VFLuQqKCWYmgAHUk5a0vEvzEu7LzJ5hWeC4la0soTaxwni0LO/IySem6stWV1G/g&#xA;M2cNLeMxlzLdjPCbSOztbu38zafr6XsiXlrPG0tSSjQ1CyLx7ckrWm3sO08WljDFwD8FszZDkNl9&#xA;DwTwzwpNC4kikAZHU1BB6EZqSCDRcVfirsVdirsVSPzteSWnlu5mik9KTlEFkADUrItdj7Vx8GOT&#xA;0yHED0cPXaiWHEZxPCRW/Pr+p5W3mbXpnMaXJAcniOMYIH+sFGSHY+lgLMeXnL7recl27rMh4RPn&#xA;5R++goa/rcr/AJb+ZNKuZvWf/RriFyS2/wBbhEi1PXsfvzPw4wJxMRwjfb4F2HYurkZyxzlxHnfP&#xA;37vJtM17UtNR0tZAI3PJkYBhXpXNlT0iO/xrrn80f/ADBS27/GuufzR/8AMaW3f411z+aP8A4AY0&#xA;tu/xrrn80f8AwAxpbTLRNa8waq8ypcQxeivL4krWv09PfAQlLf8AGuufzR/8AMNIt3+Ndc/mj/4A&#xA;Y0tvavyp16/l8g3mosV+uRS3It6LsXWJTGKD/KzR9oSjHMLNDbmyMTKJA5vKv8A2sx0+RbYHVtOn&#xA;tWiu2LAlY29WYKys5k/eFuJZEORhpssZEyIEE5sWOUAAPWPx8d/c+rdZdH0ed0YMjKCGBqD8Q7jJ&#xA;Y5A0RuHUakEQILDcyHTuxV2Kp23/ACiyf8ZP+Njlf8TmH+5+KSEgAkmgHU5Y4ahcs0lrN9XaNpOD&#xA;cfU+KOtNudD08crz/Qfc5eiH76N9/wDZ9ryD8qPLOo+X7rzPYm0a00+eay+rODKYnMInWVkWUerx&#xA;LSL9oeHXbNRrM/FAAH3/ALaet7L0nBmMpR2A2Pn5WzxraZePJeHIVHP4OhoftUzVygQaeghlEhYT&#xA;Kxu9X0GaG6jYBJt2jDq6OB2cKTQ/jl0JzxEEOPlx4tQDE9PsZ1ot3Hd2YuIvsyAHj4HcEffm0wS4&#xA;o2Hn9VjMJcJfNXnW8ku/OtzLrt3caU8zSfXLeH9+0JjjAhCoHRaOQNuW3jm60M5mFGPL7WOWAAHD&#xA;uu/L+x1V5p7uR/Vt5rdkAdyQC0i7/tbjgSB+rKtX2jDHLho3bfh0cp78k9MMpJPruK9gEp+KnNk0&#xA;Mz/LjzTcQa8nl6dy9tdxPJaqdzHLHV2A/wAllBPzHucwdZiFcQdflzcOcQ/nR+0fj7Hqea1yXYq7&#xA;FXYqxP8AM6Th5YK/78njX9bf8a5kab63TduGsHvkHk9uQslT2V6fPiafjmZlFivMfe8nhIEr8j9x&#xA;btbSwvbiOz1BS1jcssVzQ0IRiByU77r9oe4yciQLHNu0Gbw80Zef37Mp/wChb/KvbU7774f+aMxv&#xA;z8u4PoPE1/0Lf5W/6ud9/wAkf+aMfz8u4LxO/wChb/K3/Vzvv+SP/NGP5+XcF4nf9C3+Vv8Aq533&#xA;/JH/AJox/Py7gvE7/oW/yt/1c77/AJI/80Y/n5dwXieGeYtOj0rzDqmmQOzxWV3Pao7U5MkUjIC1&#xA;KCpC75s8cuKIPeGQZ7+VX5VaP5x0e7vr67uLeS3uPQVYOHErwVqnkrb/ABZi6nUnGQAEE0zb/oW/&#xA;yt/1c77/AJI/80Zjfn5dwRxPKbD89fJvlZX0TTbHU5rS1u5Wkec2/JzQofskAfEqnNP2nocmpyEk&#xA;gAChz7+bPF2hDHtRtmHkD81/Lnmi4vxp2nXlvcWsSuysBI0vJmNBwZvi5V3bb3zSazs/LAREpAx+&#xA;QDnabWQyE0Ds9T0HUWMJtr1vqltcofWWRlpEwFQ3KvHqMPZGoljz+GDxRl+Lau08EZ4jI7EI6wst&#xA;B1GZodP1y1vJkFXjgeOVgPEhJCc7AkjmHlY6eEthMH8e9H/4S/5ev+Sf/N2R8Rn+S8/sd/hL/l6/&#xA;5J/83Y+Iv5Lz+xMDo0R0sWHqGg3ElP2q1rTwyHFvbkeAODht5b+cGkXWn2em8JjLbzSSLKoUr8YC&#xA;lO5r+1mbpZWS3aLTiBJ5lgWn2M0DGZpXSQ7oEJQqKdOQ65lkA7F2FXzZFba3JFAYnSrF0cSqaEcA&#xA;3b35Zo83YsaPhmvf+P1u0x9omxxi9kxtZo7y3jijuAZIRxSOZ2MjA719SUnkfm335p9To8sPrH6v&#xA;1Odgz4+Ub/T+v71rxujlHUq42KkUIOYJFOcCCLDPfLPOw0EvMtGJLKh2PxH4c2MMvg4TIvPa6sma&#xA;glWpaXoepXT3V5pNhPcSU9SaS1hkkagoKu6sxoBTrmpn2zqTsJcI8kx00Al0PlDy7bhxaWa2pk2Y&#xA;wFo/wBp+GH+WtSSOKQlXfGP6rbBiA5bJR5m0LTdL0G8voncTRIPSLsCOTMFG1B45t+z+29Rnzxge&#xA;Gid6Dru0QMOCUwdwNkk/J6wvdR85x6m5LrYpI8kh6fHG0Sr7V51HyOdNrJAQrveR7Olkzajjkb4R&#xA;v9we9ZqXpnYq7FXYqwn815KaJaR7fFchvf4Y3H/G2ZOl+o+50Pb5/dRH9L9BYD5ZshfaxHakchJH&#xA;OKfKFyPxzMyyqNvPaLF4mUR7xL/clK8m4iU3v5q+fbf6yP0m/rw3BiWX2HKh4f3fb+XLBp8dcg+k&#xA;aafHijLvAZ9+Vf50Xet6jHoXmERi9mBFnfIAgkcb+nIo+EMexWg7UzC1OkERxR5Nhi9gzAYpJ5p8&#xA;5+XvK9vDca1cmBLhykIVGkZioqfhQE0HjlmPFKfJQGN/8r0/Lf8A5b5f+keb/mnLvyeTuTwl85ea&#xA;r+21DzPrF/asXtru9uZ4HIKkxyys6mh3GxzbY4kRAPczD0z8mPzF8qeV9BvrTWbl4J57r1Y1WKSQ&#xA;FPTVa1QHuuYerwSnIEMZBnl9+bf5c6xp9zp36UuIEuo3ie4jt5gyBhSoJjYV+jMOWiyEVTTPUwwm&#xA;5EB8w6pofmY+ZtS1HR7u1tI7uCSyeVy8jS28sXoy8y8JPKRercQfp3yyOlnCNfU6zN2lhyTJuvn+&#xA;p6P+XWoaF5WsXWaKFLlkQSfU4qF2CnbmVRnAPd9980+t7K1GfYCveR+12uHt3SYsdDeXlH9dfape&#xA;YNe1DW+d3dSejbBuFpZqSVqN28OgO7fIfLcdn6DHpahEXL+KX4+78Hmdfr8mq9cjUf4Y/j7/AMAd&#xA;+VwuB560uSCtYnd3I2+ARtyB+Y2zM1cuHGS09mYzPPEB9H/phv8AfQ+/+zNJ4/k9h+V83fphv99D&#xA;7/7MfH8l/K+bv0w3++h9/wDZj4/kv5XzedfmT5pi1Ex6THGpW1kEssn2iJQpUKvyDGubXRQNcR6p&#xA;jiESwSUuInMZUSBTwLfZrTatO2ZzYutFuJ7CO89JhE1A7gEor0BZeQ2qK5HiF1e6rlVmYKgJZjRQ&#xA;NySewwmq3V7N5e5abolraPErXEaVkkO55sSx7diaZzs8kQTwgALOEpm5EqGoykRrEOhPI/RsP15o&#xA;e1cuwh8XMwR3tIdbhiuNPe2cVa4ZI4aEgiTkGRxTesZXnt4ZrNLIxnxDpz93d8eXxciQsIbXdPvH&#xA;02Q2l7cW9wvFnnjq7lFNX4x1VSeJNAtK0ArmV2bkx+NEZIxMDt8Ty/BcXW4pzxkQkYy72KXPkYag&#xA;YUfzHdarcXbBbGBradFeu/P1JiVVEX4moDt0zusQhj+mEYVzqv0PLz7NyZD+8ySkPx3l675Z8s6Z&#xA;5d0uOwsIwFFDNMR8cr03dz/nTMLJkMzZdjgwQxR4YhNcg3OxV2KuxVgv5qw3UtpYLDE8iK8jyMil&#xA;gtAoHIgbdcydNICyTToe3Mc5iAiDLc8haQflrZzHzMsrRsqxRSNyIIFSOP8AHLc+SMobEFwOydLk&#xA;hqAZxlHY8wQxq+sLm1vJrd4mBjdlGx3Ckio9tsvGWPeHWT0mQSIEZbHuKSXf5cfmXqVzJeaVZzPY&#xA;TGsLfWYougo3wSSow+KvbLBqcY2Jez7Kkfy8QdiP1onQfys/NqDW9PnmtpbeKG4ikkna8hYIqOGL&#xA;ELK7GlOwORyarGYkW7DifRhgqKc3/wCCpmm4UcfkHmn51+RfMPmSx0v9Bwm8ltJZTNE8qIeMirRg&#xA;ZWRf2d98zNFkjjJs808dvJv+VJ/md/1Zv+nm0/6q5sPzePv+9eIIkfkv58pv5fmr/wAx9l/XH83j&#xA;7/vXiCF1P8rfNOk2T3+paNNa2cVPUmN1bTAVIAqkXxUJyUdTCRoHdw9fqJY8RlHmhLG8NmHVIYpE&#xA;ccWSVAwp7dx8xgy4ROtyK7jTycNRIEk1K+d7t/WLRvt2oUdvRdlP08/VwcExyl8wP0Ux44HnH5E/&#xA;ptmFz+XlsYmFnNLJccCI4m4fHJT4RX4aAnxzSx7Zl4vAYiuKvteul7Lw/L+IJy4uDirbnV0w6+lR&#xA;5RHEawwKI4j4gblv9kxLfTm7wxIFnmdz+PIbPI5pAmhyGw/Hmd3o/wCVnlDVHs5dbWAlbisVsxZV&#xA;qin42FSOrCn0Zqe1ZSkRCPIbl6r2ax48YllnzOw93X8eTOpNA14j4I+J8SyH/jbNTHDIcxfxepOr&#xA;xdD9hWL5e8w8hy+zX4qFK09vjywYt94n/TMJauFGpC/cUl8zaD550d5b/Tp31nR6FpbcJGl7bqd9&#xA;1RWV+I25gMOtRm1xaXTyHKj7z+t5TUdpa3GT6rH9WP6nn9prlve3k6KGTlI7W4enIxkkqGptyC9c&#xA;28RQploO1BlPDP6vv/a7U7XzBdEQabp13MooZJIoJHDV+yBRTtg4h3tHaHaGQS4MXTmat6F5L8ta&#xA;1FoEPPT5bS4ct9ZhmrE/MHjyMchBXkoB6ZznaEMkspPMdOT0nZWtgcETPafXYpuvlW/WQSrZIJB0&#xA;cGMN99cxTHMRVmve5/5nBd7fL9it+gta/wB8n/g0/wCasr8DJ3MvzmHv+wtvbTWUa/Wx6RY0BYih&#xA;PgDWhzTa7Dk47INIGSOQ+ndG6ZYpepK/wsqrSJ+oDnuD8tsnodEcole21D3/AIDjajLwEMZ1LzCL&#xA;aR0twknAni5qQ1O4pTbMnR9kGc6l9I5009oa+GDDxX+8kPTH9J8kd5LuoP0obiVAkN6JItLQOXW2&#xA;KsZJrYVC0MlRIv8Akin7OdVmHpodOfn5up02oGaHEGd5iuQ7FXYq7FXYqwf80dfaxsbewWGVxdNz&#xA;lkWN2Tih2Qso6k70r2zL0uMSJJLVPUxxEcV/In7ku/KvV2utT1GEW0kSPEkjN6bJHyRioHxdCefT&#xA;2w6jCIQABv381jrI5jQB28qQPn221eTzRdNbaffTw8YuMsFvNLGf3YrxZFZdu+Xafw+AcXDfwZ/n&#xA;OD0+r4An7lbQ/N3m3S7YW0mhahdwoKRh7W5DLTwYo23tkJ4MZJPEPsa5auB6T/0sv1PTLO4NzZwX&#xA;JieEzRpJ6Mq8ZE5qDxdT0YVoRmDIUabImxargZOxV2KuxVbLFFNE8UyLJFICskbgMrKRQgg7EHEF&#xA;BAIosD1j8lvKF9I0tr62nyNvxgYGOv8AqOGp8gRmVDWTHPd1mXsnFLcXFJT+QNnXbWZKdv3C/wDN&#xA;eW/nj3OP/Ig/nfYnE+hy6TrcETTGeGaSN4mYCoFQGB/2Vae1M5vUxAzAgcz+l7jR5OLTkH+EV9ij&#xA;r1pcWt/chIvRQsxtwV/dkfs0GwI9sGbNljM+qQF95TptLp54x6IGVdwZT5U1tb6wjgmSO3vYhR4I&#xA;wFQgftIoJoPbtmfh1EcnXd1up0Zxch6U9y9xHYq2KghgSGU1Ug0I+kYg0xlEEUUp/wAL6GNcOtpa&#xA;JFqTRvFLPFWP1PUpVnVSF50BBYDeprl51EqpxIaGAnxdU2V5VpSWTboDI5H3E5UZlyBhiOjiSzFi&#xA;asepPU9siS2AAcmsUpH5p1+50qCNbS3a4upq8TxZkQDu1OvXYZZjhxc3B1uqliHpFyLAxJ5j1e/j&#xA;jnV2mmYIskqsqLX5CiqPYZHLo8cjZJadJ21qogQjGNnqQft3/Qmum3usQeUL2FIZTcS3Ahhoh5AS&#xA;qOXEUr2P35bHFCJAHINEtZnyYpSlZnKVfNZoHkXUH1SJ9Vi4WsaLM6khubFjxiPX+Wr+1B32nLKB&#xA;H0p0vZ8+PxMh3+34s1u9CsZtLbT4EFqgIeCSIANFKp5JKv8AlKwr75RHIQbdvDHGAqIoK+lTX01j&#xA;G19D6F4KpOgIKlkJUun+S9OS+xwTAB25M0VkVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqh&#xA;cWNpcvG88SyPCeUZPY/5jISxxlRI5NkMsoggGrVJoYpozHKiyRt1VgCPxwyiCKLCMjE2DRQdpoWm&#xA;Wdz9Yt4iklCPtEih67E5VDTwibAcjJq8k48Mjsj8vcZ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xVU/0f8Ay/ww7MPU7/R/8v8ADHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1O/0f/L/DHZfU7/R/8v8A&#xA;DHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1O/0f/L/DHZfU7/R/8v8ADHZfU7/R/wDL/DHZfU7/AEf/&#xA;AC/wx2X1O/0f/L/DHZfU7/R/8v8ADHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1O/0f/L/DHZfU7/R/&#xA;8v8ADHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1O/0f/L/DHZfU7/R/8v8ADHZfU7/R/wDL/DHZfU7/&#xA;AEf/AC/wx2X1O/0f/L/DHZfU7/R/8v8ADHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1O/0f/L/DHZfU&#xA;7/R/8v8ADHZfU7/R/wDL/DHZfU7/AEf/AC/wx2X1P//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:d585c68a-adff-4543-9462-e091e7a35d57"
    stRef:documentID="xmp.did:d585c68a-adff-4543-9462-e091e7a35d57"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:d585c68a-adff-4543-9462-e091e7a35d57"
      stEvt:when="2021-12-03T18:32:58+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e63baa1b-7486-7744-bd13-9facfde5f77f"
      stEvt:when="2021-12-03T18:33:01+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="734.840000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
734.84 400 li
734.84 0 li
cp
clp
734.84 400 mo
-7.34003e-06 400 li
-7.34003e-06 0 li
734.84 0 li
734.84 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .870588 .843137 rgb
f
137.683 327.784 mo
137.4 327.784 137.169 327.556 137.168 327.272 cv
137.166 326.988 137.396 326.757 137.68 326.755 cv
219.471 326.273 li
219.732 326.265 219.987 326.501 219.988 326.785 cv
219.99 327.069 219.761 327.301 219.477 327.303 cv
137.686 327.784 li
137.685 327.784 137.684 327.784 137.683 327.784 cv
cp
1 .619608 .501961 rgb
f
261.654 318.829 mo
232.799 318.829 li
232.799 262.156 li
261.654 262.156 li
261.654 318.829 li
cp
.364706 .156863 .4 rgb
f
290.454 338.505 mo
201.999 338.505 li
198.879 338.505 196.351 335.977 196.351 332.856 cv
196.351 320.72 li
196.351 317.601 198.879 315.071 201.999 315.071 cv
290.454 315.071 li
293.574 315.071 296.103 317.601 296.103 320.72 cv
296.103 332.856 li
296.103 335.977 293.574 338.505 290.454 338.505 cv
cp
f
375.577 284.649 mo
118.875 284.649 li
113.568 284.649 109.266 280.348 109.266 275.04 cv
109.266 116.122 li
109.266 110.815 113.568 106.513 118.875 106.513 cv
375.577 106.513 li
380.885 106.513 385.187 110.815 385.187 116.122 cv
385.187 275.04 li
385.187 280.348 380.885 284.649 375.577 284.649 cv
cp
f
362.86 259.229 mo
131.593 259.229 li
127.143 259.229 123.536 255.622 123.536 251.173 cv
123.536 127.61 li
123.536 123.161 127.143 119.554 131.593 119.554 cv
362.86 119.554 li
367.31 119.554 370.917 123.161 370.917 127.61 cv
370.917 251.173 li
370.917 255.622 367.31 259.229 362.86 259.229 cv
cp
.654902 .435294 .658824 rgb
f
338.695 151.647 mo
155.758 151.647 li
152.242 151.647 149.392 148.797 149.392 145.281 cv
149.392 141.765 152.242 138.915 155.758 138.915 cv
338.695 138.915 li
342.211 138.915 345.061 141.765 345.061 145.281 cv
345.061 148.797 342.211 151.647 338.695 151.647 cv
cp
.815686 .596078 .827451 rgb
f
338.695 173.09 mo
155.758 173.09 li
152.242 173.09 149.392 170.239 149.392 166.723 cv
149.392 163.207 152.242 160.357 155.758 160.357 cv
338.695 160.357 li
342.211 160.357 345.061 163.207 345.061 166.723 cv
345.061 170.239 342.211 173.09 338.695 173.09 cv
cp
f
338.695 194.532 mo
155.758 194.532 li
152.242 194.532 149.392 191.682 149.392 188.166 cv
149.392 184.649 152.242 181.799 155.758 181.799 cv
338.695 181.799 li
342.211 181.799 345.061 184.649 345.061 188.166 cv
345.061 191.682 342.211 194.532 338.695 194.532 cv
cp
f
252.598 270.555 mo
252.598 273.521 250.193 275.926 247.227 275.926 cv
244.26 275.926 241.855 273.521 241.855 270.555 cv
241.855 267.588 244.26 265.184 247.227 265.184 cv
250.193 265.184 252.598 267.588 252.598 270.555 cv
cp
.654902 .435294 .658824 rgb
f
584.576 325.035 mo
306.794 325.035 li
306.794 164.122 li
306.794 157.275 312.344 151.725 319.191 151.725 cv
572.18 151.725 li
579.026 151.725 584.576 157.275 584.576 164.122 cv
584.576 325.035 li
cp
1 .788235 .721569 rgb
f
565.482 309.188 mo
325.849 309.188 li
321.322 309.188 317.652 305.519 317.652 300.992 cv
317.652 177.708 li
317.652 173.182 321.322 169.512 325.849 169.512 cv
565.482 169.512 li
570.01 169.512 573.679 173.182 573.679 177.708 cv
573.679 300.992 li
573.679 305.519 570.01 309.188 565.482 309.188 cv
cp
1 .933333 .921569 rgb
f
601.878 338.505 mo
292.318 338.505 li
288.038 338.505 284.568 335.035 284.568 330.756 cv
284.568 330.395 li
284.568 326.114 288.038 322.645 292.318 322.645 cv
601.878 322.645 li
606.158 322.645 609.628 326.114 609.628 330.395 cv
609.628 330.756 li
609.628 335.035 606.158 338.505 601.878 338.505 cv
cp
1 .6 .490196 rgb
f
153.187 338.422 mo
100.198 338.422 li
97.0312 338.422 94.4639 335.854 94.4639 332.688 cv
94.4639 332.127 li
94.4639 316.409 107.205 303.668 122.922 303.668 cv
130.462 303.668 li
146.18 303.668 158.921 316.409 158.921 332.127 cv
158.921 332.688 li
158.921 335.854 156.354 338.422 153.187 338.422 cv
cp
.364706 .156863 .4 rgb
f
126.692 323.159 mo
126.408 323.159 126.178 322.929 126.178 322.645 cv
126.178 304.046 li
126.178 303.762 126.408 303.531 126.692 303.531 cv
126.977 303.531 127.207 303.762 127.207 304.046 cv
127.207 322.645 li
127.207 322.929 126.977 323.159 126.692 323.159 cv
cp
.654902 .435294 .658824 rgb
f
131.924 306.019 mo
121.461 306.019 li
120.371 306.019 119.487 305.135 119.487 304.045 cv
119.487 302.956 120.371 302.072 121.461 302.072 cv
131.924 302.072 li
133.014 302.072 133.897 302.956 133.897 304.045 cv
133.897 305.135 133.014 306.019 131.924 306.019 cv
cp
.717647 .501961 .729412 rgb
f
157.298 323.159 mo
96.083 323.159 li
95.7988 323.159 95.5684 322.929 95.5684 322.645 cv
95.5684 322.36 95.7988 322.13 96.083 322.13 cv
157.298 322.13 li
157.583 322.13 157.813 322.36 157.813 322.645 cv
157.813 322.929 157.583 323.159 157.298 323.159 cv
cp
.654902 .435294 .658824 rgb
f
277.725 332.959 mo
231.051 332.959 li
230.767 332.959 230.537 332.729 230.537 332.444 cv
230.537 332.16 230.767 331.93 231.051 331.93 cv
277.725 331.93 li
278.009 331.93 278.239 332.16 278.239 332.444 cv
278.239 332.729 278.009 332.959 277.725 332.959 cv
cp
.815686 .596078 .827451 rgb
f
114.025 179.212 mo
113.741 179.212 113.511 178.981 113.511 178.697 cv
113.511 119.554 li
113.511 119.27 113.741 119.039 114.025 119.039 cv
114.31 119.039 114.54 119.27 114.54 119.554 cv
114.54 178.697 li
114.54 178.981 114.31 179.212 114.025 179.212 cv
cp
f
392.691 158.964 mo
325.084 158.964 li
324.8 158.964 324.569 158.733 324.569 158.449 cv
324.569 158.165 324.8 157.935 325.084 157.935 cv
392.691 157.935 li
392.976 157.935 393.206 158.165 393.206 158.449 cv
393.206 158.733 392.976 158.964 392.691 158.964 cv
cp
1 .933333 .921569 rgb
f
486.353 331.09 mo
405.018 331.09 li
404.733 331.09 404.503 330.859 404.503 330.575 cv
404.503 330.291 404.733 330.061 405.018 330.061 cv
486.353 330.061 li
486.637 330.061 486.867 330.291 486.867 330.575 cv
486.867 330.859 486.637 331.09 486.353 331.09 cv
cp
.654902 .435294 .658824 rgb
f
437.524 234.317 mo
367.057 234.317 li
364.53 234.317 362.481 232.269 362.481 229.741 cv
362.481 198.626 li
362.481 196.099 364.53 194.05 367.057 194.05 cv
437.524 194.05 li
440.052 194.05 442.1 196.099 442.1 198.626 cv
442.1 229.741 li
442.1 232.269 440.052 234.317 437.524 234.317 cv
cp
.666667 .8 .784314 rgb
f
437.524 286.595 mo
367.057 286.595 li
364.53 286.595 362.481 284.546 362.481 282.019 cv
362.481 250.903 li
362.481 248.376 364.53 246.327 367.057 246.327 cv
437.524 246.327 li
440.052 246.327 442.1 248.376 442.1 250.903 cv
442.1 282.019 li
442.1 284.546 440.052 286.595 437.524 286.595 cv
cp
f
527.21 234.317 mo
456.742 234.317 li
454.216 234.317 452.167 232.269 452.167 229.741 cv
452.167 198.626 li
452.167 196.099 454.216 194.05 456.742 194.05 cv
527.21 194.05 li
529.737 194.05 531.785 196.099 531.785 198.626 cv
531.785 229.741 li
531.785 232.269 529.737 234.317 527.21 234.317 cv
cp
f
527.21 286.595 mo
456.742 286.595 li
454.216 286.595 452.167 284.546 452.167 282.019 cv
452.167 250.903 li
452.167 248.376 454.216 246.327 456.742 246.327 cv
527.21 246.327 li
529.737 246.327 531.785 248.376 531.785 250.903 cv
531.785 282.019 li
531.785 284.546 529.737 286.595 527.21 286.595 cv
cp
f
629.729 362.607 mo
629.514 362.607 629.297 362.546 629.106 362.417 cv
628.596 362.072 628.461 361.379 628.805 360.869 cv
670.045 299.711 li
670.39 299.2 671.084 299.064 671.593 299.409 cv
672.104 299.754 672.238 300.447 671.895 300.957 cv
630.654 362.115 li
630.438 362.435 630.087 362.607 629.729 362.607 cv
cp
.505882 .32549 .54902 rgb
f
670.971 362.607 mo
670.607 362.607 670.252 362.431 670.037 362.104 cv
634.027 307.252 li
633.689 306.736 633.833 306.046 634.348 305.707 cv
634.864 305.371 635.554 305.513 635.893 306.027 cv
671.902 360.88 li
672.24 361.396 672.097 362.086 671.582 362.425 cv
671.393 362.548 671.181 362.607 670.971 362.607 cv
cp
f
642.445 319.157 mo
641.84 319.157 641.344 318.674 641.33 318.066 cv
641.317 317.45 641.806 316.94 642.421 316.927 cv
659.248 316.565 li
659.878 316.565 660.374 317.049 660.388 317.656 cv
660.4 318.272 659.912 318.782 659.297 318.796 cv
642.47 319.157 li
642.461 319.157 642.453 319.157 642.445 319.157 cv
cp
f
670.917 254.969 mo
670.917 254.969 685.981 263.979 682.631 283.744 cv
678.776 306.483 656.105 313.855 636.439 308.483 cv
616.773 303.111 620.051 287.617 620.051 287.617 cv
670.917 254.969 li
cp
.156863 .423529 .486275 rgb
f
584.706 346.531 mo
584.706 346.531 570.29 353.437 566.028 357.462 cv
561.767 361.486 561.55 364.228 562.04 365.575 cv
562.531 366.923 592.35 365.585 592.35 365.585 cv
592.35 365.585 592.673 357.395 595.85 357.923 cv
599.026 358.451 597.291 365.789 597.291 365.789 cv
606.307 365.704 li
606.307 365.704 606.722 357.561 606.067 354.364 cv
605.361 350.916 603.36 346.259 603.36 346.259 cv
584.706 346.531 li
cp
.384314 .639216 .607843 rgb
f
587.784 344.15 mo
587.784 344.15 575.379 351.148 577.643 351.875 cv
579.906 352.602 592.69 352.725 596.438 351.361 cv
600.187 349.997 603.321 346.112 603.321 346.112 cv
594.814 342.084 li
587.784 344.15 li
cp
.956863 .517647 .384314 rgb
f
603.321 346.112 mo
604.932 339.006 li
589.685 335.909 li
587.474 347.174 li
603.321 346.112 li
cp
f
623.74 338.698 mo
623.74 338.698 614.895 352.012 613.295 357.651 cv
611.696 363.291 612.913 365.756 614.024 366.662 cv
615.136 367.568 640.063 351.148 640.063 351.148 cv
640.063 351.148 636.146 343.948 639.146 342.775 cv
642.146 341.603 644.412 348.794 644.412 348.794 cv
652.112 344.104 li
652.112 344.104 648.299 336.897 646.101 334.486 cv
643.728 331.886 639.623 328.911 639.623 328.911 cv
623.74 338.698 li
cp
.384314 .639216 .607843 rgb
f
625.165 335.076 mo
625.165 335.076 618.094 347.44 620.41 346.905 cv
622.728 346.37 633.771 339.929 636.291 336.838 cv
638.812 333.747 639.516 328.805 639.516 328.805 cv
630.146 329.701 li
625.165 335.076 li
cp
.956863 .517647 .384314 rgb
f
639.516 328.805 mo
637.259 321.877 li
622.577 327.024 li
626.447 337.833 li
639.516 328.805 li
cp
f
629.02 292.578 mo
643.629 327.162 li
618.907 335.909 li
610.096 314.989 li
617.399 292.578 li
629.02 292.578 li
cp
1 .729412 .341176 rgb
f
660.968 278.061 mo
660.968 278.061 662.563 296.283 658.085 298.615 cv
653.606 300.947 620.896 304.509 619.236 305.966 cv
617.576 307.424 606.437 342.766 606.437 342.766 cv
579.182 340.041 li
579.182 340.041 589.031 291.346 596.202 286.39 cv
601.591 282.666 631.438 278.061 631.438 278.061 cv
660.968 278.061 li
cp
f
642.026 215.93 mo
642.026 215.93 647.73 213.384 652.814 216.605 cv
657.897 219.826 656.011 227.302 656.011 227.302 cv
656.011 227.302 662.85 233.951 663.597 240.724 cv
664.344 247.497 660.846 249.273 660.846 249.273 cv
649.391 244.11 li
644.882 222.883 li
642.026 215.93 li
cp
.364706 .156863 .4 rgb
f
629.261 242.329 mo
629.261 242.329 627.595 236.719 629.966 233.596 cv
632.464 230.306 636.528 230.1 636.507 227.382 cv
636.459 221.069 641.034 218.153 641.034 218.153 cv
641.227 243.014 li
629.261 242.329 li
cp
f
638.11 237.826 mo
638.11 237.826 631.136 238.264 628.129 241.868 cv
626.026 244.389 616.436 253.302 614.998 255.081 cv
613.694 256.694 606.141 259.109 603.571 257.838 cv
603.357 257.732 603.118 257.853 603.072 258.088 cv
602.522 260.897 598.77 264.478 599.5 270.979 cv
599.628 272.126 610.561 280.623 620.785 277.292 cv
631.009 273.961 634.443 264.294 634.443 264.294 cv
638.11 237.826 li
cp
.654902 .435294 .658824 rgb
f
623.657 280.79 mo
623.657 280.79 644.554 284.279 644.922 281.47 cv
645.765 275.052 650.568 241.352 650.568 241.352 cv
647.708 236.83 li
638.563 237.905 li
638.563 237.905 634.18 238.374 629.891 250.125 cv
625.603 261.876 623.657 280.79 623.657 280.79 cv
cp
f
648.605 232.655 mo
648.44 239.229 li
648.44 239.229 647.208 241.088 643.354 241.305 cv
640.484 241.466 639.614 239.972 639.614 239.972 cv
640.452 234.236 li
647.435 232.883 li
648.605 232.655 li
cp
.956863 .517647 .384314 rgb
f
647.435 232.883 mo
647.413 233.063 647.34 233.272 647.228 233.513 cv
645.674 236.76 641.635 237.366 639.977 237.474 cv
640.452 234.236 li
647.435 232.883 li
cp
0 0 0 rgb
f
639.362 219.216 mo
639.362 219.216 635.705 227.371 636.95 231.984 cv
638.195 236.598 642.395 235.914 644.911 235.049 cv
647.428 234.184 648.606 232.656 648.606 232.656 cv
648.606 232.656 650.941 233.474 652.529 231.31 cv
654.117 229.146 653.177 226.635 651.845 226.049 cv
650.513 225.463 648.912 226.413 648.912 226.413 cv
650.182 224.045 li
650.182 224.045 645.052 211.899 639.362 219.216 cv
cp
.956863 .517647 .384314 rgb
f
648.912 226.413 mo
648.912 226.413 645.391 227.124 642.944 223.205 cv
640.497 219.285 640.722 217.676 640.722 217.676 cv
638.284 221.722 li
638.284 221.722 637.739 218.917 638.861 217.128 cv
639.983 215.34 641.148 215.711 641.148 215.711 cv
648.914 217.65 li
650.958 223.875 li
648.912 226.413 li
cp
.364706 .156863 .4 rgb
f
639.642 229.652 mo
639.519 229.652 639.404 229.573 639.366 229.449 cv
638.824 227.683 640.071 225.895 640.125 225.819 cv
640.218 225.69 640.398 225.658 640.526 225.751 cv
640.656 225.843 640.688 226.022 640.596 226.153 cv
640.584 226.169 639.46 227.788 639.917 229.279 cv
639.964 229.432 639.879 229.594 639.727 229.64 cv
639.698 229.648 639.67 229.652 639.642 229.652 cv
cp
0 0 0 rgb
f
643.285 224.012 mo
643.167 224.012 643.056 223.938 643.014 223.821 cv
642.56 222.56 641.891 222.701 641.86 222.705 cv
641.708 222.737 641.551 222.647 641.514 222.495 cv
641.476 222.343 641.563 222.189 641.714 222.147 cv
641.763 222.137 642.915 221.841 643.557 223.626 cv
643.61 223.775 643.533 223.941 643.383 223.995 cv
643.351 224.007 643.317 224.012 643.285 224.012 cv
cp
f
638.119 222.754 mo
638.097 222.754 638.073 222.751 638.05 222.745 cv
637.896 222.707 637.802 222.552 637.839 222.397 cv
637.854 222.332 638.009 221.75 638.516 221.547 cv
638.843 221.416 639.22 221.481 639.634 221.745 cv
639.768 221.832 639.807 222.01 639.721 222.145 cv
639.633 222.277 639.455 222.315 639.321 222.231 cv
639.154 222.123 638.915 222.008 638.731 222.082 cv
638.533 222.159 638.425 222.436 638.399 222.535 cv
638.366 222.666 638.248 222.754 638.119 222.754 cv
cp
f
649.25 230.282 mo
649.179 230.282 649.107 230.256 649.052 230.203 cv
648.936 230.094 648.931 229.911 649.041 229.796 cv
651.272 227.445 li
651.382 227.327 651.564 227.325 651.68 227.435 cv
651.796 227.544 651.801 227.727 651.69 227.842 cv
649.459 230.192 li
649.402 230.253 649.326 230.282 649.25 230.282 cv
cp
f
651.606 229.657 mo
651.563 229.654 650.024 229.417 650.024 229.417 cv
649.867 229.393 649.759 229.245 649.783 229.088 cv
649.808 228.931 649.954 228.823 650.112 228.847 cv
651.65 229.084 li
651.808 229.108 651.916 229.256 651.892 229.413 cv
651.869 229.556 651.747 229.657 651.606 229.657 cv
cp
f
638.72 282.499 mo
638.72 282.499 648.422 237.543 648.438 237.159 cv
648.452 236.776 648.452 236.776 648.452 236.776 cv
648.452 236.776 656.901 239.251 659.817 242.811 cv
661.938 245.398 658.434 281.318 657.415 281.988 cv
656.396 282.659 638.72 282.499 638.72 282.499 cv
cp
.654902 .435294 .658824 rgb
f
623.657 280.79 mo
623.657 280.79 625.924 270.827 631.162 257.081 cv
636.446 243.215 639.977 237.474 639.977 237.474 cv
639.977 237.474 633.563 238.328 631.322 239.559 cv
629.739 240.427 623.592 254.097 622.548 263.921 cv
621.504 273.746 620.904 280.094 620.904 280.094 cv
621.404 280.527 623.657 280.79 623.657 280.79 cv
cp
f
614.137 256.276 mo
614.381 257.715 614.94 259.996 615.834 260.487 cv
616.046 260.604 616.258 260.603 616.507 260.484 cv
616.808 260.339 616.863 260.152 616.878 260.025 cv
616.991 259.07 615.271 257.297 614.137 256.276 cv
cp
616.154 261.15 mo
615.948 261.15 615.747 261.098 615.557 260.993 cv
614.025 260.151 613.508 256.052 613.454 255.587 cv
613.44 255.471 613.499 255.357 613.602 255.301 cv
613.706 255.246 613.832 255.255 613.923 255.331 cv
614.305 255.644 617.647 258.435 617.451 260.093 cv
617.418 260.371 617.271 260.756 616.758 261.004 cv
616.556 261.102 616.353 261.15 616.154 261.15 cv
cp
.262745 .0980392 .286275 rgb
f
643.516 241.527 mo
640.906 241.527 639.485 240.245 639.419 240.184 cv
639.302 240.075 639.295 239.894 639.402 239.776 cv
639.511 239.659 639.693 239.653 639.81 239.76 cv
639.826 239.774 641.507 241.277 644.519 240.885 cv
647.48 240.503 648.155 238.565 648.183 238.482 cv
648.232 238.332 648.396 238.25 648.546 238.299 cv
648.697 238.348 648.78 238.51 648.731 238.66 cv
648.7 238.757 647.934 241.026 644.593 241.457 cv
644.214 241.506 643.854 241.527 643.516 241.527 cv
cp
.364706 .156863 .4 rgb
f
638.207 226.45 mo
638.004 226.423 637.893 226.274 637.916 226.113 cv
638.118 224.74 li
637.627 224.132 li
637.525 224.006 637.545 223.82 637.671 223.719 cv
637.797 223.617 637.982 223.636 638.084 223.763 cv
638.656 224.472 li
638.708 224.535 638.73 224.618 638.719 224.699 cv
638.498 226.199 li
638.477 226.345 638.351 226.45 638.207 226.45 cv
cp
0 0 0 rgb
f
642.673 226.81 mo
642.475 226.786 642.361 226.64 642.382 226.479 cv
642.556 225.118 li
641.82 224.394 li
641.705 224.28 641.703 224.094 641.817 223.979 cv
641.931 223.862 642.115 223.86 642.232 223.976 cv
643.071 224.802 li
643.137 224.866 643.168 224.957 643.156 225.048 cv
642.964 226.553 li
642.945 226.701 642.819 226.81 642.673 226.81 cv
cp
f
625.652 255.323 mo
625.629 255.323 625.604 255.32 625.58 255.314 cv
625.426 255.274 625.333 255.117 625.373 254.963 cv
626.967 248.788 li
627.006 248.635 627.161 248.544 627.318 248.581 cv
627.473 248.621 627.565 248.778 627.525 248.933 cv
625.932 255.107 li
625.898 255.237 625.781 255.323 625.652 255.323 cv
cp
.364706 .156863 .4 rgb
f
639.762 231.693 mo
640.173 231.902 640.632 232.062 640.909 231.979 cv
641.207 231.896 641.547 231.592 641.824 231.288 cv
639.762 231.693 li
cp
640.749 232.576 mo
639.93 232.576 638.928 231.88 638.803 231.79 cv
638.708 231.724 638.663 231.607 638.688 231.495 cv
638.712 231.382 638.801 231.295 638.914 231.272 cv
642.481 230.57 li
642.596 230.547 642.713 230.597 642.777 230.694 cv
642.842 230.791 642.842 230.918 642.776 231.015 cv
642.688 231.146 641.886 232.307 641.063 232.536 cv
640.964 232.563 640.857 232.576 640.749 232.576 cv
cp
0 0 0 rgb
f
612.557 322.956 mo
612.521 322.956 612.486 322.95 612.452 322.937 cv
612.304 322.879 612.23 322.712 612.288 322.563 cv
612.542 321.911 618.525 306.57 619.688 305.184 cv
620.876 303.765 631.385 303.02 632.579 302.938 cv
632.768 302.945 632.876 303.049 632.887 303.207 cv
632.897 303.366 632.777 303.504 632.618 303.515 cv
628.201 303.812 620.905 304.628 620.129 305.555 cv
619.248 306.606 614.967 317.277 612.825 322.772 cv
612.781 322.887 612.672 322.956 612.557 322.956 cv
cp
.364706 .156863 .4 rgb
f
615.868 299.198 mo
615.759 299.198 615.612 299.244 615.442 299.459 cv
615.236 299.72 615.166 300.017 615.229 300.366 cv
615.504 301.889 618.05 303.783 619.33 304.649 cv
618.431 302.357 616.945 299.369 615.941 299.205 cv
615.919 299.201 615.895 299.198 615.868 299.198 cv
cp
619.908 305.657 mo
619.856 305.657 619.805 305.644 619.759 305.616 cv
619.567 305.5 615.074 302.755 614.662 300.469 cv
614.568 299.954 614.679 299.494 614.989 299.102 cv
615.358 298.634 615.76 298.587 616.035 298.636 cv
617.868 298.937 619.948 304.625 620.18 305.272 cv
620.221 305.387 620.186 305.516 620.091 305.593 cv
620.038 305.636 619.974 305.657 619.908 305.657 cv
cp
f
673.906 296.313 mo
673.829 296.313 673.751 296.281 673.694 296.221 cv
673.586 296.104 673.594 295.921 673.71 295.813 cv
678.575 291.313 679.513 282.477 679.521 282.389 cv
679.537 282.229 679.68 282.117 679.837 282.13 cv
679.996 282.146 680.111 282.287 680.096 282.445 cv
680.059 282.817 679.126 291.59 674.103 296.236 cv
674.047 296.287 673.977 296.313 673.906 296.313 cv
cp
.156863 .627451 .603922 rgb
f
606.295 277.735 mo
635.699 277.735 li
636.743 277.735 637.59 276.889 637.59 275.845 cv
637.59 255.855 li
637.59 254.811 636.743 253.965 635.699 253.965 cv
606.295 253.965 li
605.251 253.965 604.404 254.811 604.404 255.855 cv
604.404 275.845 li
604.404 276.889 605.251 277.735 606.295 277.735 cv
cp
1 1 1 rgb
f
604.101 277.735 mo
633.63 277.735 li
634.676 277.735 635.523 276.887 635.523 275.841 cv
635.523 255.858 li
635.523 254.813 634.676 253.965 633.63 253.965 cv
604.101 253.965 li
603.055 253.965 602.207 254.813 602.207 255.858 cv
602.207 275.841 li
602.207 276.887 603.055 277.735 604.101 277.735 cv
cp
.364706 .156863 .4 rgb
f
613.99 265.85 mo
613.99 267.395 615.242 268.646 616.786 268.646 cv
618.331 268.646 619.583 267.395 619.583 265.85 cv
619.583 264.306 618.331 263.053 616.786 263.053 cv
615.242 263.053 613.99 264.306 613.99 265.85 cv
cp
1 1 1 rgb
f
607.199 264.782 mo
606.928 264.267 606.508 263.848 606.028 263.516 cv
604.406 262.392 599.306 260.048 597.792 261.483 cv
596.342 262.859 599.135 264.249 599.135 264.249 cv
599.135 264.249 596.66 263.579 596.78 265.422 cv
596.881 266.961 598.458 267.469 598.458 267.469 cv
598.458 267.469 595.817 267.018 596.776 269.222 cv
597.735 271.426 603.196 273.388 605.206 273.326 cv
607.217 273.265 605.793 270.629 605.793 270.629 cv
605.793 270.629 607.951 270.277 607.951 269.081 cv
607.951 267.814 606.254 267.333 606.254 267.333 cv
606.254 267.333 608.178 266.64 607.199 264.782 cv
cp
.956863 .517647 .384314 rgb
f
605.621 267.468 mo
605.581 267.468 605.541 267.46 605.502 267.442 cv
599.016 264.512 li
598.871 264.446 598.807 264.275 598.872 264.13 cv
598.938 263.984 599.107 263.921 599.254 263.986 cv
605.74 266.917 li
605.885 266.982 605.949 267.153 605.884 267.299 cv
605.836 267.405 605.73 267.468 605.621 267.468 cv
cp
0 0 0 rgb
f
605.002 270.616 mo
604.963 270.616 604.924 270.608 604.887 270.592 cv
598.343 267.732 li
598.196 267.669 598.13 267.499 598.194 267.354 cv
598.257 267.207 598.43 267.141 598.573 267.205 cv
605.117 270.064 li
605.264 270.128 605.33 270.298 605.266 270.443 cv
605.219 270.552 605.113 270.616 605.002 270.616 cv
cp
f
644.049 267.077 mo
644.049 267.077 641.433 265.17 640.105 264.617 cv
638.849 264.093 637.597 263.786 637.597 263.786 cv
637.135 265.987 li
637.135 265.987 632.47 266.341 629.056 267.488 cv
625.642 268.636 626.019 270.168 626.019 270.168 cv
626.019 270.168 623.805 271.188 624.553 272.181 cv
625.301 273.173 628.759 272.77 628.759 272.77 cv
628.759 272.77 624.329 273.775 625.938 274.962 cv
627.545 276.148 631.42 276.396 631.42 276.396 cv
631.42 276.396 639.564 279.018 642.727 276.504 cv
645.889 273.989 644.049 267.077 644.049 267.077 cv
cp
.956863 .517647 .384314 rgb
f
637.135 266.234 mo
637.014 266.234 636.908 266.146 636.891 266.023 cv
636.87 265.889 636.963 265.763 637.099 265.743 cv
639.748 265.348 li
639.885 265.327 640.009 265.421 640.028 265.556 cv
640.049 265.69 639.956 265.816 639.82 265.836 cv
637.171 266.231 li
637.159 266.233 637.146 266.234 637.135 266.234 cv
cp
0 0 0 rgb
f
626.243 270.211 mo
626.122 270.211 626.017 270.122 625.999 269.999 cv
625.979 269.863 626.073 269.738 626.208 269.72 cv
632.949 268.756 li
633.084 268.736 633.21 268.83 633.229 268.965 cv
633.248 269.101 633.154 269.226 633.02 269.245 cv
626.278 270.208 li
626.267 270.21 626.255 270.211 626.243 270.211 cv
cp
f
628.31 273.058 mo
628.188 273.058 628.083 272.97 628.065 272.847 cv
628.045 272.711 628.139 272.586 628.273 272.566 cv
632.501 271.946 li
632.646 271.924 632.763 272.02 632.781 272.154 cv
632.802 272.29 632.708 272.415 632.573 272.435 cv
628.346 273.055 li
628.333 273.057 628.321 273.058 628.31 273.058 cv
cp
f
655.031 239.61 mo
655.031 239.61 676.404 250.188 675.593 269.964 cv
674.891 287.034 644.023 282.061 643.009 282.073 cv
641.059 282.098 641.843 262.224 642.445 261.665 cv
643.048 261.107 652.631 260.4 652.631 260.4 cv
655.031 239.61 li
cp
.654902 .435294 .658824 rgb
f
658.894 259.316 mo
661.945 259.679 665.003 259.755 665.276 259.244 cv
665.296 259.209 665.255 259.102 665.12 258.95 cv
664.148 257.859 660.917 258.639 658.894 259.316 cv
cp
645.027 261.562 mo
644.886 261.562 644.763 261.458 644.742 261.314 cv
644.719 261.157 644.828 261.011 644.986 260.988 cv
657.645 259.165 li
658.229 258.922 663.893 256.705 665.552 258.567 cv
665.935 258.998 665.89 259.322 665.784 259.518 cv
665.143 260.712 659.423 259.99 657.663 259.736 cv
645.068 261.559 li
645.055 261.561 645.041 261.562 645.027 261.562 cv
cp
.364706 .156863 .4 rgb
f
120.686 191.825 mo
121.028 192.438 122.955 197.612 120.628 202.831 cv
118.302 208.05 112.532 204.418 112.532 204.418 cv
112.532 194.79 li
120.686 191.825 li
cp
.956863 .517647 .384314 rgb
f
100.461 235.101 mo
100.461 235.101 108.514 236.734 115.081 232.552 cv
121.647 228.369 119.872 202.831 119.872 202.831 cv
109.753 202.831 li
103.806 216.847 li
100.461 235.101 li
cp
f
100.258 340.841 mo
100.258 349.009 li
115.632 348.433 li
115.632 340.841 li
100.258 340.841 li
cp
f
64.7578 339.921 mo
64.7578 348.089 li
78.9897 347.512 li
78.9897 339.921 li
64.7578 339.921 li
cp
f
95.6699 249.893 mo
95.6699 249.893 106.764 267.462 113.339 295.595 cv
119.336 321.256 120.628 342.479 120.628 342.479 cv
94.6875 342.479 li
94.6875 342.479 91.8018 321.557 91.0332 313.278 cv
90.2646 305 87.707 293.919 87.707 293.919 cv
87.707 293.919 84.1465 341.67 83.2978 342.479 cv
82.4492 343.287 57.6162 342.657 57.8823 341.561 cv
58.1484 340.464 63.1162 265.171 63.7886 259.949 cv
65.8559 243.899 95.6699 249.893 95.6699 249.893 cv
cp
.247059 .619608 .592157 rgb
f
82.5225 361.589 mo
82.5225 363.03 82.0381 364.68 81.0469 365.095 cv
80.0552 365.51 72.0298 366.374 65.0073 365.764 cv
58.2851 365.176 56.8901 364.68 56.394 364.068 cv
56.1518 363.757 56.6245 362.315 57.1665 360.921 cv
57.2012 360.852 57.2241 360.771 57.2588 360.701 cv
57.5356 359.998 57.8237 359.317 58.0317 358.833 cv
58.2388 358.372 58.4927 357.934 58.7925 357.508 cv
59.519 356.504 60.9604 354.429 61.3291 353.356 cv
61.8135 351.927 62.5513 348.836 63.0474 347.384 cv
63.543 345.953 64.7539 345.653 64.7539 345.653 cv
64.7539 345.653 78.5791 344.708 79.5708 345.538 cv
80.5508 346.357 81.0469 353.16 81.0469 354.187 cv
81.0469 355.213 li
81.0469 356.17 81.7041 358.061 82.1304 359.629 cv
82.2461 360.021 82.3384 360.39 82.4072 360.725 cv
82.4766 361.059 82.5225 361.347 82.5225 361.589 cv
cp
.654902 .435294 .658824 rgb
f
140.372 364.529 mo
139.45 364.91 100.211 365.982 99.2998 364.529 cv
99.0229 364.092 98.8271 362.604 98.7002 360.736 cv
98.3774 356.331 98.3774 349.782 98.3774 349.782 cv
98.3774 349.782 98.0889 347.545 98.147 346.507 cv
98.1929 345.48 117.069 345.873 117.069 345.873 cv
129.337 355.547 li
129.337 355.547 132.704 354.947 136.382 355.547 cv
138.331 355.858 139.588 358.245 140.211 360.494 cv
140.764 362.488 140.811 364.345 140.372 364.529 cv
cp
f
140.372 364.529 mo
139.45 364.91 100.211 365.982 99.2998 364.529 cv
99.0229 364.092 98.8271 362.604 98.7002 360.736 cv
106.161 361.267 124.518 362.27 140.211 360.494 cv
140.764 362.488 140.811 364.345 140.372 364.529 cv
cp
.156863 .423529 .486275 rgb
f
82.5225 361.589 mo
82.5225 363.03 82.0381 364.68 81.0469 365.095 cv
80.0552 365.51 72.0298 366.374 65.0073 365.764 cv
58.2851 365.176 56.8901 364.68 56.394 364.068 cv
56.1518 363.757 56.6245 362.315 57.1665 360.921 cv
63.4048 361.394 74.6704 361.819 82.1304 359.629 cv
82.2461 360.021 82.3384 360.39 82.4072 360.725 cv
82.4766 361.059 82.5225 361.347 82.5225 361.589 cv
cp
f
87.7075 294.207 mo
87.5259 294.193 87.4072 294.055 87.4194 293.896 cv
87.4277 293.793 88.2363 283.513 88.4707 278.957 cv
88.7056 274.407 88.7148 272.228 88.7153 272.206 cv
88.7153 272.093 88.7827 271.99 88.8862 271.943 cv
97.29 268.202 li
97.4346 268.14 97.605 268.203 97.6704 268.349 cv
97.7353 268.494 97.6699 268.664 97.5244 268.729 cv
89.29 272.396 li
89.2822 273.014 89.2436 275.17 89.0469 278.986 cv
88.812 283.55 88.0024 293.838 87.9946 293.941 cv
87.9824 294.093 87.8564 294.207 87.7075 294.207 cv
cp
1 .729412 .341176 rgb
f
65.1103 352.796 mo
64.9829 352.796 64.8667 352.711 64.832 352.582 cv
64.7905 352.429 64.8818 352.271 65.0356 352.229 cv
65.2617 352.169 70.6089 350.754 73.4336 351.235 cv
75.0981 351.521 li
73.5835 350.412 70.5019 348.459 68.5898 349.273 cv
68.4453 349.338 68.2744 349.27 68.2114 349.122 cv
68.1489 348.976 68.2168 348.807 68.3633 348.744 cv
71.2876 347.49 76.165 351.604 76.3716 351.78 cv
76.4702 351.865 76.5005 352.005 76.4458 352.122 cv
76.3906 352.239 76.2671 352.308 76.1357 352.284 cv
73.3359 351.804 li
70.6299 351.34 65.2388 352.771 65.1851 352.786 cv
65.1601 352.793 65.1348 352.796 65.1103 352.796 cv
cp
f
126.396 353.516 mo
126.366 353.515 119.374 352.795 119.374 352.795 cv
119.268 352.783 119.176 352.715 119.136 352.615 cv
119.096 352.516 119.114 352.402 119.184 352.321 cv
121.623 349.45 li
121.726 349.329 121.907 349.314 122.029 349.417 cv
122.15 349.521 122.165 349.702 122.062 349.823 cv
119.978 352.277 li
126.424 352.94 li
126.583 352.957 126.698 353.099 126.682 353.257 cv
126.666 353.405 126.541 353.516 126.396 353.516 cv
cp
f
76.2309 209.966 mo
76.2309 209.966 68.5776 209.939 64.4473 213.964 cv
60.3174 217.988 63.7886 257.368 63.7886 257.368 cv
63.7886 257.368 78.0625 259.042 85.875 257.368 cv
93.6875 255.695 98.522 252.281 98.522 252.281 cv
98.522 252.281 96.0005 215.752 93.853 211.877 cv
91.7051 208.002 76.2309 209.966 76.2309 209.966 cv
cp
f
74.7192 207.149 mo
74.7627 212.099 li
74.7627 212.099 76.6514 213.659 79.04 213.66 cv
82.2656 213.661 83.3608 211.166 83.3608 211.166 cv
83.2393 205.364 li
74.7192 207.149 li
cp
.956863 .517647 .384314 rgb
f
74.7192 207.021 mo
74.7192 207.021 76.6704 211.024 80.3218 210.416 cv
83.2651 209.926 83.2363 205.771 83.2363 205.771 cv
74.7192 207.021 li
cp
0 0 0 rgb
f
84.478 192.758 mo
84.478 192.758 86.335 201.585 83.5273 205.871 cv
80.7197 210.158 76.9575 208.978 75.2588 207.716 cv
72.9673 206.015 72.4634 203.609 72.4634 203.609 cv
72.4634 203.609 69.3643 204.281 68.2847 201.763 cv
67.1509 199.117 69.0513 196.935 70.6045 196.782 cv
72.1577 196.629 72.3437 196.909 72.3437 196.909 cv
71.8393 194.072 li
71.8393 194.072 81.1182 183.404 84.478 192.758 cv
cp
.956863 .517647 .384314 rgb
f
83.0493 196.934 mo
83.0493 196.934 87.729 194.842 88.1572 198.486 cv
88.6538 202.707 83.6006 202.831 83.6006 202.831 cv
83.0493 196.934 li
cp
f
85.4556 200.711 mo
85.4082 200.711 85.3594 200.699 85.3149 200.674 cv
85.1763 200.596 85.1269 200.42 85.2046 200.282 cv
86.7324 197.559 li
86.8096 197.42 86.9844 197.37 87.125 197.449 cv
87.2637 197.527 87.313 197.703 87.2353 197.841 cv
85.7075 200.564 li
85.6548 200.658 85.5566 200.711 85.4556 200.711 cv
cp
0 0 0 rgb
f
71.8979 201.031 mo
71.833 201.031 71.7676 201.01 71.7139 200.965 cv
69.2798 198.947 li
69.1572 198.845 69.1401 198.664 69.2422 198.541 cv
69.3442 198.419 69.5268 198.402 69.6479 198.503 cv
72.082 200.521 li
72.2046 200.623 72.2217 200.805 72.1196 200.927 cv
72.063 200.996 71.9805 201.031 71.8979 201.031 cv
cp
f
69.688 201.447 mo
69.6025 201.447 69.5176 201.409 69.4604 201.336 cv
69.3628 201.211 69.3852 201.029 69.5107 200.932 cv
70.9092 199.843 li
71.0342 199.744 71.2148 199.767 71.314 199.893 cv
71.4116 200.019 71.3892 200.2 71.2637 200.298 cv
69.8652 201.387 li
69.8125 201.428 69.75 201.447 69.688 201.447 cv
cp
f
87.272 199.872 mo
85.9272 199.872 li
85.7681 199.872 85.6392 199.743 85.6392 199.583 cv
85.6392 199.424 85.7681 199.295 85.9272 199.295 cv
87.272 199.295 li
87.4311 199.295 87.5601 199.424 87.5601 199.583 cv
87.5601 199.743 87.4311 199.872 87.272 199.872 cv
cp
f
76.9658 198.738 mo
76.8203 198.738 76.6953 198.628 76.6797 198.48 cv
76.5185 196.962 li
76.5019 196.804 76.6162 196.662 76.7749 196.645 cv
76.9297 196.629 77.0747 196.743 77.0918 196.901 cv
77.2529 198.419 li
77.2695 198.578 77.1553 198.72 76.9966 198.736 cv
76.9863 198.737 76.9761 198.738 76.9658 198.738 cv
cp
f
82.7783 198.143 mo
82.6328 198.143 82.5078 198.033 82.4922 197.885 cv
82.331 196.366 li
82.3144 196.208 82.4287 196.066 82.5874 196.049 cv
82.7446 196.036 82.8872 196.147 82.9043 196.306 cv
83.0654 197.824 li
83.082 197.982 82.9678 198.125 82.8091 198.141 cv
82.7988 198.142 82.7886 198.143 82.7783 198.143 cv
cp
f
80.3003 202.248 mo
80.1001 202.222 79.9912 202.075 80.0146 201.918 cv
80.3496 199.667 79.5337 197.838 79.5254 197.82 cv
79.4595 197.675 79.5234 197.504 79.668 197.438 cv
79.814 197.372 79.9839 197.436 80.0498 197.58 cv
80.0864 197.661 80.9458 199.576 80.585 202.002 cv
80.5635 202.146 80.4404 202.248 80.3003 202.248 cv
cp
f
83.0601 195.376 mo
83.0146 195.376 82.9692 195.366 82.9268 195.344 cv
82.3486 195.042 81.4585 195.261 81.4487 195.263 cv
81.2988 195.301 81.1382 195.208 81.0986 195.054 cv
81.0596 194.9 81.1523 194.743 81.3066 194.704 cv
81.3511 194.692 82.4165 194.426 83.1934 194.833 cv
83.3345 194.907 83.3892 195.081 83.3154 195.222 cv
83.2642 195.32 83.1636 195.376 83.0601 195.376 cv
cp
f
75.727 196.094 mo
75.6543 196.094 75.5815 196.067 75.5254 196.012 cv
75.4116 195.901 75.4097 195.719 75.521 195.604 cv
76.1328 194.979 77.2285 194.898 77.2749 194.896 cv
77.4263 194.892 77.5703 195.004 77.5815 195.164 cv
77.5923 195.322 77.4722 195.459 77.3135 195.471 cv
77.3042 195.471 76.3901 195.54 75.9331 196.008 cv
75.8769 196.065 75.8018 196.094 75.727 196.094 cv
cp
f
73.7295 197.7 mo
73.7295 197.7 75.9834 196.176 75.8486 193.863 cv
75.7134 191.55 75.2046 190.96 75.2046 190.96 cv
75.2046 190.96 77.5239 192.192 80.4067 191.323 cv
83.6689 190.34 85.4673 185.857 83.688 184.634 cv
81.7046 183.271 76.8857 185.19 76.8857 185.19 cv
76.8857 185.19 71.8359 184.913 68.542 188.923 cv
65.2485 192.933 68.939 197.656 68.939 197.656 cv
68.939 197.656 69.9136 195.588 73.7295 197.7 cv
cp
f
79.8286 204.707 mo
78.5474 204.707 77.5161 203.655 77.4658 203.604 cv
77.3555 203.489 77.3589 203.307 77.4731 203.196 cv
77.5864 203.086 77.769 203.089 77.8804 203.203 cv
77.8931 203.215 79.0947 204.429 80.3223 204.058 cv
80.4761 204.009 80.6357 204.098 80.6826 204.249 cv
80.729 204.401 80.6431 204.563 80.4912 204.608 cv
80.2656 204.678 80.0434 204.707 79.8286 204.707 cv
cp
f
82.7788 187.482 mo
82.7788 187.482 84.9477 189.465 85.456 191.881 cv
85.9648 194.297 85.456 196.343 85.456 196.343 cv
84.9678 196.336 li
84.9678 196.336 83.7988 190.478 81.9082 189.94 cv
80.0176 189.403 82.7788 187.482 82.7788 187.482 cv
cp
f
70.9507 210.732 mo
70.9507 210.732 58.0049 211.799 52.3882 220.811 cv
46.771 229.823 46.3384 237.922 46.3384 237.922 cv
66.5127 235.101 li
70.9507 210.732 li
cp
1 .729412 .341176 rgb
f
92.5571 235.101 mo
103.104 235.549 li
103.806 216.847 li
103.806 216.847 93.4482 210.302 89.2544 209.798 cv
85.0601 209.293 92.5571 235.101 92.5571 235.101 cv
cp
f
48.7993 237.577 mo
48.7993 237.577 47.6162 252.505 58.6445 250.956 cv
71.167 249.198 77.6733 223.35 77.6733 223.35 cv
81.4087 221.052 li
81.4087 221.052 80.6914 224.001 83.686 222.414 cv
86.6802 220.828 86.081 217.854 86.081 217.854 cv
82.5796 211.858 li
82.5796 211.858 87.748 207.059 86.2202 206.816 cv
83.8608 206.442 76.5102 211.35 76.5102 211.35 cv
76.5102 211.35 76.9141 208.393 75.2046 208.882 cv
73.3599 209.41 72.7075 214.864 72.7075 214.864 cv
53.0698 236.561 li
48.7993 237.577 li
cp
.956863 .517647 .384314 rgb
f
81.4087 221.34 mo
81.3252 221.34 81.2436 221.304 81.1875 221.236 cv
81.1035 221.136 81.0976 220.991 81.1738 220.885 cv
82.5439 218.956 li
82.6352 218.827 82.8154 218.797 82.9458 218.888 cv
83.0757 218.98 83.1059 219.16 83.0137 219.29 cv
82.2778 220.326 li
83.3418 219.827 li
83.4853 219.76 83.6572 219.821 83.7256 219.966 cv
83.793 220.109 83.7309 220.281 83.5869 220.349 cv
81.5312 221.313 li
81.4917 221.331 81.4502 221.34 81.4087 221.34 cv
cp
0 0 0 rgb
f
73.6987 213.948 mo
73.6157 213.948 73.5332 213.912 73.4761 213.843 cv
73.375 213.72 73.3926 213.538 73.5156 213.438 cv
77.1108 210.483 li
77.2339 210.383 77.415 210.4 77.5166 210.523 cv
77.6177 210.646 77.6001 210.828 77.477 210.929 cv
73.8818 213.883 li
73.8281 213.927 73.7632 213.948 73.6987 213.948 cv
cp
f
81.2471 213.046 mo
81.1543 213.046 81.0635 213.002 81.0078 212.919 cv
80.9184 212.787 80.9536 212.607 81.0854 212.519 cv
82.4184 211.619 li
82.5508 211.53 82.729 211.564 82.8184 211.697 cv
82.9077 211.829 82.8726 212.009 82.7407 212.098 cv
81.4077 212.997 li
81.3584 213.03 81.3022 213.046 81.2471 213.046 cv
cp
f
65.1108 268.621 mo
65.0195 268.621 64.9297 268.578 64.874 268.498 cv
64.7827 268.367 64.8149 268.188 64.9453 268.097 cv
69.2602 265.088 70.3901 260.708 70.4009 260.664 cv
70.4394 260.51 70.5952 260.415 70.75 260.454 cv
70.9043 260.492 70.9985 260.648 70.9604 260.803 cv
70.9141 260.99 69.7749 265.433 65.2754 268.569 cv
65.2251 268.604 65.1675 268.621 65.1108 268.621 cv
cp
1 .729412 .341176 rgb
f
132.947 202.504 mo
114.661 202.021 li
113.587 201.992 112.74 201.099 112.768 200.025 cv
113.014 190.735 li
113.042 189.661 113.936 188.813 115.009 188.842 cv
133.295 189.325 li
134.369 189.354 135.216 190.247 135.188 191.32 cv
134.943 200.611 li
134.915 201.685 134.021 202.532 132.947 202.504 cv
cp
.156863 .423529 .486275 rgb
f
130.165 201.366 mo
115.392 200.976 li
114.506 200.953 113.807 200.216 113.831 199.331 cv
114.038 191.484 li
114.062 190.599 114.798 189.9 115.684 189.924 cv
130.457 190.314 li
131.342 190.337 132.041 191.074 132.017 191.959 cv
131.81 199.805 li
131.787 200.691 131.05 201.39 130.165 201.366 cv
cp
1 1 1 rgb
f
134.261 195.944 mo
134.249 196.401 133.869 196.762 133.412 196.75 cv
132.955 196.738 132.594 196.358 132.606 195.901 cv
132.618 195.443 132.999 195.083 133.456 195.095 cv
133.913 195.107 134.273 195.487 134.261 195.944 cv
cp
.247059 .619608 .592157 rgb
f
109.753 203.713 mo
109.753 203.713 108.143 197.942 109.258 196.065 cv
110.373 194.188 113.099 192.269 115.453 192.794 cv
117.807 193.32 113.842 196.563 113.842 196.563 cv
113.842 196.563 116.32 202.028 114.709 204.612 cv
113.099 207.197 109.753 203.713 109.753 203.713 cv
cp
.956863 .517647 .384314 rgb
f
113.813 205.717 mo
113.696 205.717 113.585 205.645 113.542 205.528 cv
113.487 205.379 113.564 205.213 113.713 205.158 cv
115.226 204.603 114.937 201.338 114.699 200.126 cv
114.668 199.97 114.77 199.818 114.926 199.788 cv
115.081 199.758 115.234 199.858 115.264 200.015 cv
115.303 200.212 116.194 204.861 113.913 205.699 cv
113.879 205.711 113.846 205.717 113.813 205.717 cv
cp
0 0 0 rgb
f
198.469 56.7065 mo
198.469 56.7065 197.261 47.917 196.758 47.4365 cv
196.254 46.9551 185.47 37.9565 184.989 35.3496 cv
184.508 32.7427 186.382 31.5674 186.382 31.5674 cv
186.382 31.5674 215.646 41.9248 216.432 42.8164 cv
217.219 43.708 213.35 56.4482 213.35 56.4482 cv
198.469 56.7065 li
cp
.956863 .517647 .384314 rgb
f
185.576 32.3818 mo
216.35 44.9497 li
217.842 40.6899 li
186.801 28.77 li
185.576 32.3818 li
cp
0 0 0 rgb
f
189.097 40.4951 mo
192.561 43.7466 li
197.529 37.2632 li
194.041 34.8584 li
189.097 40.4951 li
cp
f
228.804 60.2715 mo
228.804 60.2715 229.212 51.4092 228.804 50.8447 cv
228.396 50.2803 219.425 39.4736 219.425 36.8228 cv
219.425 34.1719 221.481 33.3564 221.481 33.3564 cv
221.481 33.3564 248.379 48.853 248.991 49.8726 cv
249.603 50.8921 243.485 62.7183 243.485 62.7183 cv
228.804 60.2715 li
cp
.956863 .517647 .384314 rgb
f
260.966 82.248 mo
260.966 82.248 256.802 77.7578 239.267 77.3838 cv
221.732 77.0098 216.91 78.4302 216.91 78.4302 cv
217.593 52.4585 li
195.517 49.5791 li
195.517 49.5791 185.347 76.2617 185.566 88.792 cv
185.785 101.322 196.087 105.811 199.375 106.559 cv
202.662 107.307 262.414 106.891 262.414 106.891 cv
260.966 82.248 li
cp
1 .729412 .341176 rgb
f
216.033 80.4727 mo
226.024 53.6304 li
248.063 55.4131 li
241.458 78.2148 li
216.033 80.4727 li
cp
f
241.641 90.1289 mo
258.525 106.55 li
258.525 106.55 264.226 108.217 271.632 108.416 cv
279.039 108.614 284.804 108.416 284.804 108.416 cv
288.558 103.854 li
293.846 108.504 li
311.959 92.7485 li
311.959 92.7485 302.753 85.041 291.136 79.7876 cv
279.519 74.5342 262.463 74.2637 241.641 90.1289 cv
cp
.384314 .639216 .607843 rgb
f
292.121 104.755 mo
291.954 104.755 291.818 104.62 291.819 104.453 cv
291.826 88.187 li
291.826 88.02 291.961 87.8853 292.127 87.8853 cv
292.294 87.8853 292.43 88.0205 292.429 88.187 cv
292.422 104.453 li
292.422 104.62 292.287 104.755 292.121 104.755 cv
cp
.364706 .156863 .4 rgb
f
262.917 97.0381 mo
261.665 97.0557 259.447 99.9697 258.237 101.771 cv
260.088 100.977 263.09 99.4434 263.522 98.1064 cv
263.613 97.8267 263.581 97.584 263.422 97.3433 cv
263.244 97.0732 263.05 97.0381 262.917 97.0381 cv
cp
257.461 102.714 mo
257.373 102.714 257.287 102.675 257.228 102.604 cv
257.146 102.504 257.137 102.363 257.205 102.253 cv
257.572 101.661 260.855 96.4634 262.897 96.4341 cv
263.347 96.4512 263.673 96.6274 263.926 97.0103 cv
264.187 97.4053 264.244 97.8369 264.097 98.2925 cv
263.391 100.474 257.806 102.605 257.568 102.695 cv
257.533 102.708 257.497 102.714 257.461 102.714 cv
cp
f
300.915 101.673 mo
310.424 94.084 li
310.424 94.084 313.405 97.813 312.718 105.944 cv
311.915 115.452 298.543 118.067 298.543 118.067 cv
296.375 110.162 li
300.915 101.673 li
cp
.956863 .517647 .384314 rgb
f
270.569 103.748 mo
270.569 103.748 270.004 99.5977 272.462 100.289 cv
274.919 100.981 273.762 104.613 273.762 104.613 cv
270.569 103.748 li
cp
f
272.573 73.4448 mo
271.136 78.9585 li
271.136 78.9585 272.76 81.4287 276.714 81.8442 cv
280.739 82.2671 279.986 80.2266 279.986 80.2266 cv
280.302 77.3848 li
273.683 74.0117 li
272.573 73.4448 li
cp
f
273.674 74.0361 mo
273.639 74.2217 273.647 74.4546 273.686 74.73 cv
274.233 78.4575 277.96 80.2266 279.986 80.2266 cv
280.236 77.5527 li
273.674 74.0361 li
cp
0 0 0 rgb
f
285.979 62.8706 mo
285.979 62.8706 287.109 72.1582 284.436 76.3857 cv
281.761 80.6128 277.774 78.6284 275.526 76.9834 cv
273.277 75.3384 272.572 73.4463 272.572 73.4463 cv
272.572 73.4463 269.983 73.5396 269.066 70.8838 cv
268.148 68.2285 269.867 66.0088 271.381 65.8354 cv
272.895 65.6621 274.2 67.1084 274.2 67.1084 cv
273.664 64.3472 li
273.664 64.3472 282.557 53.7915 285.979 62.8706 cv
cp
.956863 .517647 .384314 rgb
f
282.556 73.2339 mo
282.498 73.2339 282.439 73.2173 282.387 73.1816 cv
282.249 73.0879 282.213 72.8999 282.307 72.7622 cv
283.226 71.4121 282.604 69.4448 282.597 69.4248 cv
282.546 69.2666 282.632 69.0962 282.791 69.0444 cv
282.949 68.9922 283.12 69.0791 283.171 69.2378 cv
283.201 69.3296 283.894 71.5039 282.806 73.1021 cv
282.748 73.188 282.653 73.2339 282.556 73.2339 cv
cp
0 0 0 rgb
f
272.753 70.8872 mo
272.642 70.8872 272.535 70.8252 272.482 70.7188 cv
270.979 67.6763 li
270.905 67.5269 270.967 67.3457 271.116 67.272 cv
271.265 67.1973 271.447 67.2588 271.521 67.4087 cv
273.023 70.4512 li
273.098 70.6006 273.036 70.7817 272.887 70.8555 cv
272.844 70.877 272.798 70.8872 272.753 70.8872 cv
cp
f
272.202 69.7705 mo
272.157 69.7676 270.545 69.5288 270.545 69.5288 cv
270.381 69.5044 270.267 69.3506 270.291 69.1855 cv
270.316 69.021 270.47 68.9092 270.634 68.9312 cv
272.246 69.1699 li
272.411 69.1943 272.525 69.3481 272.5 69.5132 cv
272.478 69.6631 272.349 69.7705 272.202 69.7705 cv
cp
f
274.2 67.1084 mo
274.2 67.1084 274.875 67.9233 275.786 67.1499 cv
276.695 66.3765 276.222 63.1211 276.222 63.1211 cv
276.222 63.1211 278.583 64.4756 280.409 64.1172 cv
282.235 63.7588 283.713 61.6855 283.713 61.6855 cv
283.713 61.6855 284.13 64.4453 287.919 64.4492 cv
291.708 64.4531 293.814 59.9404 290.412 57.8438 cv
287.008 55.7476 284.486 56.7637 284.486 56.7637 cv
284.486 56.7637 285.066 53.1978 279.976 53.4858 cv
275.337 53.7476 273.033 58.751 273.033 58.751 cv
273.033 58.751 270.495 58.1001 269.18 60.6733 cv
267.864 63.2471 270.444 66.1924 270.444 66.1924 cv
270.444 66.1924 272.576 65.6865 274.2 67.1084 cv
cp
.364706 .156863 .4 rgb
f
279.781 69.0381 mo
279.764 69.0381 279.747 69.0366 279.729 69.0332 cv
279.564 69.0049 279.455 68.8491 279.483 68.6846 cv
279.756 67.0972 li
279.785 66.9331 279.938 66.8188 280.105 66.8511 cv
280.27 66.8794 280.379 67.0352 280.351 67.1997 cv
280.078 68.7871 li
280.053 68.9341 279.925 69.0381 279.781 69.0381 cv
cp
0 0 0 rgb
f
284.426 70.064 mo
284.215 70.0356 284.102 69.8813 284.127 69.7168 cv
284.37 68.1245 li
284.395 67.9595 284.552 67.8442 284.714 67.8716 cv
284.879 67.8965 284.992 68.0508 284.967 68.2153 cv
284.724 69.8076 li
284.702 69.957 284.573 70.064 284.426 70.064 cv
cp
f
279.358 66.0303 mo
279.32 66.0303 279.282 66.0229 279.245 66.0083 cv
279.09 65.9458 279.016 65.77 279.078 65.6152 cv
279.56 64.4165 281.036 64.5815 281.096 64.5869 cv
281.261 64.6069 281.379 64.7563 281.359 64.9219 cv
281.34 65.0874 281.188 65.2065 281.025 65.1865 cv
280.981 65.1816 279.946 65.0728 279.638 65.8408 cv
279.591 65.9585 279.478 66.0303 279.358 66.0303 cv
cp
f
285.517 66.9233 mo
285.355 66.9233 285.222 66.7954 285.215 66.6328 cv
285.211 66.5674 285.15 66.0264 284.232 66.0073 cv
284.066 66.0039 283.934 65.8662 283.937 65.6992 cv
283.94 65.5347 284.075 65.4038 284.239 65.4038 cv
285.467 65.4287 285.809 66.2065 285.819 66.6143 cv
285.823 66.7808 285.691 66.9194 285.524 66.9233 cv
285.522 66.9233 285.52 66.9233 285.517 66.9233 cv
cp
f
280.516 75.4634 mo
280.468 75.4634 280.42 75.4517 280.375 75.4277 cv
280.327 75.4023 279.215 74.7964 279.33 73.6533 cv
279.346 73.4873 279.497 73.3662 279.66 73.3828 cv
279.826 73.3994 279.947 73.5469 279.93 73.7129 cv
279.856 74.458 280.65 74.8901 280.659 74.8945 cv
280.806 74.9731 280.861 75.1558 280.783 75.3032 cv
280.729 75.4053 280.625 75.4634 280.516 75.4634 cv
cp
f
220.541 34.0107 mo
248.522 51.9561 li
250.763 48.0376 li
222.401 30.6816 li
220.541 34.0107 li
cp
f
222.531 42.6284 mo
225.347 46.4546 li
231.409 40.9805 li
228.416 37.9829 li
222.531 42.6284 li
cp
f
216.123 80.167 mo
215.087 81.4199 213.628 83.4639 213.771 84.5596 cv
213.801 84.7925 213.902 84.9561 214.089 85.0752 cv
214.285 85.1997 214.408 85.1689 214.492 85.1265 cv
215.257 84.7534 215.844 82.1899 216.123 80.167 cv
cp
214.342 85.7671 mo
214.172 85.7676 213.977 85.7197 213.765 85.585 cv
213.43 85.3716 213.225 85.0439 213.172 84.6372 cv
212.927 82.7598 215.964 79.4043 216.315 79.0239 cv
216.335 79.0034 216.354 78.9873 216.375 78.9736 cv
216.404 78.9551 216.436 78.9414 216.47 78.9336 cv
216.848 78.8384 230.292 75.4805 241.354 76.9707 cv
241.519 76.9932 241.635 77.145 241.613 77.3105 cv
241.59 77.4761 241.437 77.5933 241.273 77.5693 cv
230.973 76.1836 218.551 79.0503 216.816 79.4702 cv
216.693 80.6045 216.131 84.999 214.757 85.6694 cv
214.647 85.7227 214.507 85.7671 214.342 85.7671 cv
cp
1 1 1 rgb
f
244.115 92.5356 mo
244.115 92.5356 234.074 106.083 244.451 113.605 cv
254.827 121.128 270.119 119.93 270.119 119.93 cv
272.51 108.504 li
254.611 100.635 li
244.115 92.5356 li
cp
.956863 .517647 .384314 rgb
f
272.753 114.557 mo
272.753 114.557 274.684 119.907 270.119 119.93 cv
265.554 119.954 266.042 114.557 266.042 114.557 cv
270.59 113.179 li
272.753 114.557 li
cp
f
298.42 113.876 mo
298.42 113.876 295.372 118.53 299.937 118.553 cv
304.501 118.576 305.679 112.265 305.679 112.265 cv
300.583 112.498 li
298.42 113.876 li
cp
f
277.35 82.1655 mo
277.144 82.1655 276.927 82.1592 276.696 82.1455 cv
272.384 81.8901 270.34 78.5894 270.255 78.4487 cv
270.168 78.3062 270.214 78.1211 270.357 78.0347 cv
270.5 77.9478 270.685 77.9937 270.771 78.1357 cv
270.791 78.1675 272.745 81.3066 276.732 81.543 cv
279.887 81.7329 280.238 80.5034 280.241 80.4902 cv
280.282 80.3315 280.446 80.2334 280.602 80.2671 cv
280.762 80.3037 280.864 80.457 280.831 80.6177 cv
280.817 80.6851 280.477 82.1655 277.35 82.1655 cv
cp
.364706 .156863 .4 rgb
f
296.84 117.067 mo
274.018 117.067 li
273.208 117.067 272.551 116.41 272.551 115.6 cv
272.551 100.085 li
272.551 99.2744 273.208 98.6177 274.018 98.6177 cv
296.84 98.6177 li
297.651 98.6177 298.308 99.2744 298.308 100.085 cv
298.308 115.6 li
298.308 116.41 297.651 117.067 296.84 117.067 cv
cp
1 1 1 rgb
f
298.543 117.067 mo
275.625 117.067 li
274.813 117.067 274.154 116.409 274.154 115.597 cv
274.154 100.088 li
274.154 99.2759 274.813 98.6177 275.625 98.6177 cv
298.543 98.6177 li
299.355 98.6177 300.014 99.2759 300.014 100.088 cv
300.014 115.597 li
300.014 116.409 299.355 117.067 298.543 117.067 cv
cp
0 0 0 rgb
f
296.504 107.373 mo
296.788 106.833 297.228 106.395 297.729 106.047 cv
299.427 104.87 304.767 102.416 306.352 103.919 cv
307.87 105.36 304.946 106.815 304.946 106.815 cv
304.946 106.815 307.537 106.113 307.411 108.042 cv
307.306 109.653 305.655 110.185 305.655 110.185 cv
305.655 110.185 308.419 109.713 307.416 112.02 cv
306.411 114.328 300.694 116.381 298.59 116.317 cv
296.486 116.252 297.976 113.493 297.976 113.493 cv
297.976 113.493 295.717 113.125 295.717 111.873 cv
295.717 110.547 297.494 110.043 297.494 110.043 cv
297.494 110.043 295.48 109.317 296.504 107.373 cv
cp
.956863 .517647 .384314 rgb
f
298.156 110.184 mo
298.042 110.184 297.932 110.118 297.881 110.006 cv
297.813 109.854 297.88 109.676 298.032 109.607 cv
304.822 106.54 li
304.973 106.471 305.153 106.539 305.221 106.691 cv
305.29 106.843 305.222 107.021 305.07 107.09 cv
298.28 110.157 li
298.24 110.176 298.198 110.184 298.156 110.184 cv
cp
0 0 0 rgb
f
298.805 113.48 mo
298.688 113.48 298.578 113.413 298.528 113.3 cv
298.461 113.147 298.531 112.969 298.684 112.902 cv
305.534 109.908 li
305.687 109.841 305.865 109.911 305.932 110.063 cv
305.999 110.216 305.929 110.395 305.776 110.461 cv
298.926 113.455 li
298.886 113.473 298.845 113.48 298.805 113.48 cv
cp
f
277.173 107.373 mo
276.889 106.833 276.449 106.395 275.947 106.047 cv
274.25 104.87 268.91 102.416 267.325 103.919 cv
265.807 105.36 268.731 106.815 268.731 106.815 cv
268.731 106.815 266.141 106.113 266.266 108.042 cv
266.371 109.653 268.022 110.185 268.022 110.185 cv
268.022 110.185 265.258 109.713 266.262 112.02 cv
267.266 114.328 272.983 116.381 275.087 116.317 cv
277.191 116.252 275.701 113.493 275.701 113.493 cv
275.701 113.493 277.96 113.125 277.96 111.873 cv
277.96 110.547 276.183 110.043 276.183 110.043 cv
276.183 110.043 278.197 109.317 277.173 107.373 cv
cp
.956863 .517647 .384314 rgb
f
275.521 110.184 mo
275.479 110.184 275.437 110.176 275.397 110.157 cv
268.607 107.09 li
268.455 107.021 268.387 106.843 268.456 106.691 cv
268.524 106.539 268.705 106.471 268.855 106.54 cv
275.645 109.607 li
275.797 109.676 275.865 109.854 275.796 110.006 cv
275.746 110.118 275.636 110.184 275.521 110.184 cv
cp
0 0 0 rgb
f
274.873 113.48 mo
274.832 113.48 274.791 113.473 274.751 113.455 cv
267.901 110.461 li
267.749 110.395 267.679 110.216 267.746 110.063 cv
267.812 109.911 267.99 109.841 268.143 109.908 cv
274.994 112.902 li
275.146 112.969 275.216 113.147 275.149 113.3 cv
275.1 113.413 274.989 113.48 274.873 113.48 cv
cp
f
319.924 271.683 mo
319.924 271.683 320.058 249.123 328.792 246.955 cv
337.528 244.786 338.943 251.105 338.943 251.105 cv
338.943 251.105 341.864 250.856 342.545 255.782 cv
343.227 260.707 341.74 273.655 341.74 273.655 cv
319.924 271.683 li
cp
f
318.078 273.258 mo
318.078 273.258 316.084 266.003 331.229 265.431 cv
346.375 264.858 343.809 273.258 343.809 273.258 cv
330.334 276.752 li
318.078 273.258 li
cp
.654902 .435294 .658824 rgb
f
300.234 295.887 mo
300.234 295.887 310.247 273.58 320.655 270.586 cv
331.063 267.593 319.181 298.313 319.181 298.313 cv
300.234 295.887 li
cp
.988235 .686275 .286275 rgb
f
339.757 271.683 mo
339.757 271.683 357.499 274.97 361.837 291.159 cv
366.174 307.349 341.805 315.09 341.805 315.09 cv
339.757 271.683 li
cp
f
350.166 342.016 mo
349.607 349.043 li
364.429 350.193 li
364.429 343.165 li
350.166 342.016 li
cp
1 1 1 rgb
f
341.996 313.12 mo
341.996 313.12 360.927 291.901 379.246 296.554 cv
397.566 301.206 370.697 345.721 370.697 345.721 cv
344.052 345.721 li
344.964 338.731 li
314.69 339.437 li
318.549 305.069 li
341.996 313.12 li
cp
.156863 .423529 .486275 rgb
f
321.165 332.124 mo
330.115 332.124 li
326.23 347.183 li
320.531 347.183 li
321.165 332.124 li
cp
1 1 1 rgb
f
304.048 313.903 mo
304.048 313.903 270.6 322.721 268.647 335.499 cv
266.694 348.276 290.62 353.837 301.851 354.635 cv
313.082 355.433 322.628 354.635 322.628 354.635 cv
322.628 309.259 li
304.048 313.903 li
cp
.156863 .423529 .486275 rgb
f
311.479 313.903 mo
311.479 313.903 312.815 273.753 320.655 270.586 cv
329.229 267.124 343.708 271.354 346.422 276.72 cv
349.136 282.087 341.996 313.12 341.996 313.12 cv
341.996 313.12 326.067 316.971 311.479 313.903 cv
cp
.988235 .686275 .286275 rgb
f
335.475 264.595 mo
335.33 271.147 li
335.33 271.147 334.106 273.005 330.266 273.23 cv
327.405 273.399 326.417 272.731 326.417 272.731 cv
326.888 269.422 li
327.353 266.194 li
334.308 264.825 li
335.475 264.595 li
cp
.956863 .517647 .384314 rgb
f
334.308 264.825 mo
334.288 265.004 334.215 265.214 334.104 265.453 cv
332.565 268.694 328.541 269.311 326.888 269.422 cv
327.353 266.194 li
334.308 264.825 li
cp
0 0 0 rgb
f
326.223 251.226 mo
326.223 251.226 322.602 259.365 323.856 263.96 cv
325.11 268.555 329.293 267.86 331.8 266.991 cv
334.306 266.121 335.476 264.596 335.476 264.596 cv
335.476 264.596 337.806 265.403 339.383 263.242 cv
340.959 261.081 340.014 258.581 338.685 258.001 cv
337.355 257.42 335.763 258.372 335.763 258.372 cv
337.021 256.008 li
337.021 256.008 331.874 243.917 326.223 251.226 cv
cp
.956863 .517647 .384314 rgb
f
326.79 261.648 mo
326.668 261.665 326.544 261.602 326.491 261.483 cv
325.723 259.813 326.717 257.88 326.759 257.799 cv
326.833 257.658 327.008 257.604 327.147 257.678 cv
327.288 257.751 327.342 257.925 327.269 258.065 cv
327.26 258.083 326.365 259.831 327.013 261.244 cv
327.08 261.389 327.017 261.56 326.872 261.625 cv
326.845 261.637 326.818 261.646 326.79 261.648 cv
cp
0 0 0 rgb
f
336.11 262.229 mo
336.039 262.229 335.968 262.202 335.913 262.149 cv
335.797 262.041 335.792 261.858 335.901 261.743 cv
338.118 259.394 li
338.228 259.278 338.409 259.273 338.524 259.382 cv
338.64 259.49 338.645 259.673 338.536 259.788 cv
336.319 262.139 li
336.263 262.197 336.187 262.229 336.11 262.229 cv
cp
f
338.457 261.599 mo
338.415 261.596 336.88 261.363 336.88 261.363 cv
336.723 261.34 336.615 261.193 336.639 261.036 cv
336.663 260.88 336.806 260.77 336.966 260.794 cv
338.5 261.026 li
338.658 261.051 338.765 261.197 338.742 261.354 cv
338.72 261.496 338.597 261.599 338.457 261.599 cv
cp
f
328.357 263.319 mo
328.667 263.507 329.115 263.674 329.542 263.461 cv
329.946 263.259 330.223 262.928 330.402 262.64 cv
328.357 263.319 li
cp
329.112 264.139 mo
328.266 264.139 327.584 263.454 327.549 263.418 cv
327.479 263.347 327.451 263.245 327.475 263.149 cv
327.498 263.053 327.57 262.976 327.664 262.944 cv
330.855 261.883 li
330.957 261.852 331.068 261.875 331.145 261.949 cv
331.222 262.023 331.251 262.135 331.221 262.237 cv
331.207 262.286 330.858 263.445 329.799 263.975 cv
329.565 264.093 329.333 264.139 329.112 264.139 cv
cp
f
330.229 259.326 mo
330.035 259.304 329.923 259.16 329.944 259.003 cv
330.138 257.481 li
330.159 257.324 330.295 257.214 330.46 257.232 cv
330.617 257.253 330.729 257.396 330.709 257.555 cv
330.514 259.075 li
330.496 259.221 330.372 259.326 330.229 259.326 cv
cp
f
325.714 258.964 mo
325.515 258.938 325.406 258.792 325.43 258.635 cv
325.652 257.117 li
325.676 256.961 325.816 256.851 325.979 256.875 cv
326.136 256.898 326.245 257.044 326.222 257.201 cv
325.999 258.719 li
325.978 258.861 325.855 258.964 325.714 258.964 cv
cp
f
331.647 256.411 mo
331.543 256.411 331.442 256.354 331.391 256.255 cv
331.031 255.555 330.06 255.749 330.018 255.758 cv
329.864 255.793 329.71 255.691 329.677 255.536 cv
329.645 255.382 329.743 255.229 329.897 255.195 cv
329.957 255.184 331.34 254.898 331.902 255.992 cv
331.975 256.133 331.92 256.307 331.778 256.379 cv
331.736 256.4 331.691 256.411 331.647 256.411 cv
cp
f
327.237 255.471 mo
327.146 255.471 327.056 255.428 327 255.346 cv
326.864 255.147 326.708 255.04 326.519 255.016 cv
326.132 254.978 325.688 255.276 325.549 255.399 cv
325.429 255.503 325.248 255.493 325.143 255.373 cv
325.038 255.254 325.049 255.073 325.168 254.968 cv
325.196 254.943 325.87 254.354 326.588 254.445 cv
326.945 254.489 327.243 254.684 327.475 255.021 cv
327.564 255.152 327.531 255.331 327.4 255.421 cv
327.35 255.455 327.293 255.471 327.237 255.471 cv
cp
f
324.11 331.64 mo
324.11 331.64 340.39 330.731 341.317 331.611 cv
342.245 332.49 341.69 349.179 341.69 349.179 cv
341.69 349.179 343.729 367.991 342.324 369.8 cv
341.594 370.738 340.067 371.674 338.768 372.355 cv
337.296 373.128 335.462 372.785 334.419 371.491 cv
333.505 370.357 332.538 368.648 332.049 366.191 cv
330.967 360.752 330.967 360.752 330.967 360.752 cv
323.776 348.315 li
324.11 331.64 li
cp
.988235 .541176 .368627 rgb
f
348.561 348.911 mo
348.561 348.911 347.847 361.324 348.573 362.279 cv
349.3 363.235 371.381 372.893 372.214 373.251 cv
373.048 373.609 380.471 373.814 382.321 373.94 cv
384.172 374.067 384.033 367.718 382.875 365.828 cv
381.717 363.938 377.252 362.299 377.252 362.299 cv
365.091 347.937 li
348.678 347.193 li
348.561 348.911 li
cp
f
344.964 339.019 mo
344.931 339.019 344.897 339.013 344.864 339.001 cv
344.715 338.945 344.64 338.78 344.695 338.631 cv
344.767 338.435 352.083 318.885 360.69 310.356 cv
360.803 310.245 360.985 310.245 361.097 310.358 cv
361.208 310.472 361.208 310.652 361.095 310.765 cv
352.578 319.204 345.306 338.636 345.233 338.831 cv
345.19 338.946 345.081 339.019 344.964 339.019 cv
cp
1 .729412 .341176 rgb
f
321.165 332.411 mo
321.142 332.411 321.119 332.409 321.096 332.403 cv
320.929 332.361 304.267 328.225 286.504 327.156 cv
286.346 327.146 286.226 327.011 286.235 326.853 cv
286.245 326.693 286.391 326.57 286.539 326.583 cv
304.357 327.653 321.069 331.803 321.235 331.846 cv
321.389 331.884 321.482 332.04 321.444 332.193 cv
321.411 332.324 321.294 332.411 321.165 332.411 cv
cp
f
312.99 294.841 mo
312.846 294.841 312.722 294.733 312.705 294.587 cv
312.326 291.389 314.798 281.817 314.903 281.412 cv
314.943 281.258 315.1 281.165 315.254 281.205 cv
315.409 281.245 315.501 281.402 315.461 281.557 cv
315.436 281.655 312.911 291.428 313.277 294.519 cv
313.296 294.677 313.183 294.82 313.024 294.839 cv
313.013 294.841 313.001 294.841 312.99 294.841 cv
cp
.364706 .156863 .4 rgb
f
290.729 324.184 mo
290.674 324.184 290.622 324.188 290.573 324.196 cv
290.436 324.221 290.385 324.277 290.355 324.325 cv
290.106 324.732 290.185 324.99 290.267 325.148 cv
290.835 326.255 294.052 326.85 296.055 327.081 cv
294.477 325.921 291.867 324.184 290.729 324.184 cv
cp
297.036 327.751 mo
296.372 327.705 290.704 327.257 289.754 325.411 cv
289.601 325.112 289.496 324.628 289.866 324.024 cv
289.995 323.814 290.205 323.678 290.472 323.63 cv
292.177 323.34 296.703 326.836 297.213 327.237 cv
297.312 327.315 297.349 327.449 297.303 327.567 cv
297.26 327.678 297.154 327.751 297.036 327.751 cv
cp
1 .729412 .341176 rgb
f
325.826 257.382 mo
325.786 257.382 325.745 257.374 325.707 257.356 cv
324.952 257.015 li
324.807 256.949 324.743 256.778 324.809 256.633 cv
324.875 256.486 325.045 256.423 325.19 256.489 cv
325.945 256.831 li
326.09 256.896 326.154 257.067 326.088 257.213 cv
326.04 257.319 325.935 257.382 325.826 257.382 cv
cp
0 0 0 rgb
f
300.891 313.285 mo
330.419 313.285 li
331.466 313.285 332.313 312.438 332.313 311.392 cv
332.313 291.409 li
332.313 290.363 331.466 289.515 330.419 289.515 cv
300.891 289.515 li
299.845 289.515 298.997 290.363 298.997 291.409 cv
298.997 311.392 li
298.997 312.438 299.845 313.285 300.891 313.285 cv
cp
.545098 .333333 .556863 rgb
f
303.085 313.285 mo
332.489 313.285 li
333.533 313.285 334.38 312.439 334.38 311.395 cv
334.38 291.405 li
334.38 290.361 333.533 289.515 332.489 289.515 cv
303.085 289.515 li
302.041 289.515 301.194 290.361 301.194 291.405 cv
301.194 311.395 li
301.194 312.439 302.041 313.285 303.085 313.285 cv
cp
0 0 0 rgb
f
313.696 301.4 mo
313.696 302.944 314.949 304.197 316.493 304.197 cv
318.038 304.197 319.29 302.944 319.29 301.4 cv
319.29 299.855 318.038 298.604 316.493 298.604 cv
314.949 298.604 313.696 299.855 313.696 301.4 cv
cp
1 1 1 rgb
f
330.401 257.732 mo
330.351 257.732 330.301 257.72 330.254 257.692 cv
329.523 257.259 li
329.387 257.178 329.342 257.001 329.423 256.863 cv
329.505 256.725 329.681 256.683 329.818 256.763 cv
330.549 257.196 li
330.686 257.277 330.73 257.454 330.649 257.592 cv
330.596 257.683 330.499 257.732 330.401 257.732 cv
cp
0 0 0 rgb
f
341.017 300.339 mo
341.017 300.339 335.155 298.43 334.38 298.183 cv
334.38 298.183 334.296 300.293 334.554 300.665 cv
334.812 301.036 323.268 302.816 323.297 303.932 cv
323.327 305.047 324.399 305.294 324.399 305.294 cv
324.399 305.294 322.088 305.79 322.708 306.905 cv
323.327 308.021 324.399 308.065 324.399 308.065 cv
324.399 308.065 322.126 309.169 324.399 310.577 cv
326.672 311.985 337.826 312.853 341.401 309.284 cv
344.03 306.662 341.017 300.339 341.017 300.339 cv
cp
.956863 .517647 .384314 rgb
f
335.763 258.372 mo
335.763 258.372 331.934 257.645 330.326 255.154 cv
328.855 252.876 328.357 250.273 328.357 250.273 cv
328.357 250.273 327.535 250.68 326.298 252.026 cv
325.061 253.372 325.013 254.436 325.013 254.436 cv
325.013 254.436 323.651 249.494 328.607 247.822 cv
333.563 246.149 337.608 249.557 338.745 252.654 cv
339.882 255.751 335.763 258.372 335.763 258.372 cv
cp
0 0 0 rgb
f
337.545 296.917 mo
337.841 311.744 li
337.841 311.744 339.816 313.402 347.302 308.033 cv
356.962 301.104 351.22 294.692 351.22 294.692 cv
347.706 292.184 li
337.545 296.917 li
cp
.988235 .686275 .286275 rgb
f
324.399 305.582 mo
324.255 305.582 324.13 305.474 324.113 305.327 cv
324.095 305.169 324.208 305.025 324.366 305.008 cv
330.966 304.245 li
331.137 304.216 331.268 304.341 331.285 304.498 cv
331.304 304.656 331.19 304.8 331.032 304.817 cv
324.433 305.58 li
324.421 305.582 324.41 305.582 324.399 305.582 cv
cp
0 0 0 rgb
f
330.999 308.354 mo
324.399 308.354 li
324.24 308.354 324.111 308.225 324.111 308.065 cv
324.111 307.906 324.24 307.777 324.399 307.777 cv
330.999 307.777 li
331.158 307.777 331.287 307.906 331.287 308.065 cv
331.287 308.225 331.158 308.354 330.999 308.354 cv
cp
f
318.075 271.466 mo
318.075 271.466 320.684 273.403 323.592 274.83 cv
326.5 276.257 328.357 276.752 328.357 276.752 cv
328.357 276.752 335.489 275.556 338.615 274.605 cv
341.74 273.655 343.809 272.829 343.809 272.829 cv
337.693 267.626 li
330.115 271.077 li
324.841 268.927 li
324.841 268.927 319.29 270.146 318.075 271.466 cv
cp
.654902 .435294 .658824 rgb
f
333.297 281.996 mo
333.173 281.996 333.06 281.916 333.021 281.792 cv
331.508 276.836 li
331.461 276.684 331.547 276.522 331.699 276.477 cv
331.856 276.427 332.012 276.517 332.059 276.668 cv
333.572 281.624 li
333.619 281.776 333.533 281.938 333.381 281.983 cv
333.353 281.992 333.324 281.996 333.297 281.996 cv
cp
.364706 .156863 .4 rgb
f
323.926 281.996 mo
323.9 281.996 323.874 281.993 323.848 281.985 cv
323.694 281.942 323.605 281.783 323.648 281.63 cv
325.045 276.674 li
325.088 276.521 325.249 276.429 325.401 276.475 cv
325.554 276.518 325.644 276.677 325.6 276.83 cv
324.203 281.786 li
324.167 281.913 324.052 281.996 323.926 281.996 cv
cp
f
335.476 296.736 mo
335.37 296.736 335.269 296.679 335.218 296.578 cv
335.146 296.436 335.204 296.262 335.346 296.19 cv
335.724 296.001 344.648 291.54 349.277 291.209 cv
349.427 291.189 349.573 291.316 349.585 291.476 cv
349.597 291.635 349.478 291.772 349.318 291.783 cv
344.804 292.106 335.696 296.66 335.605 296.706 cv
335.563 296.727 335.52 296.736 335.476 296.736 cv
cp
f
345.612 288.796 mo
344.293 288.796 342.875 291.155 342.073 292.833 cv
344.291 290.975 345.944 289.234 345.837 288.825 cv
345.836 288.832 345.799 288.803 345.653 288.797 cv
345.64 288.796 345.626 288.796 345.612 288.796 cv
cp
341.33 294.1 mo
341.27 294.1 341.21 294.081 341.159 294.044 cv
341.054 293.966 341.014 293.828 341.062 293.707 cv
341.284 293.136 343.31 288.16 345.675 288.221 cv
346.152 288.238 346.324 288.461 346.385 288.644 cv
346.741 289.729 343.094 292.777 341.51 294.037 cv
341.457 294.079 341.394 294.1 341.33 294.1 cv
cp
f
370.722 355.277 mo
365.14 355.277 li
364.98 355.277 364.852 355.148 364.852 354.989 cv
364.852 354.83 364.98 354.701 365.14 354.701 cv
370.722 354.701 li
370.881 354.701 371.01 354.83 371.01 354.989 cv
371.01 355.148 370.881 355.277 370.722 355.277 cv
cp
f
374.407 359.227 mo
366.562 359.227 li
366.402 359.227 366.273 359.098 366.273 358.938 cv
366.273 358.779 366.402 358.65 366.562 358.65 cv
374.407 358.65 li
374.566 358.65 374.695 358.779 374.695 358.938 cv
374.695 359.098 374.566 359.227 374.407 359.227 cv
cp
f
326.25 352.881 mo
326.228 352.881 326.205 352.878 326.182 352.873 cv
326.027 352.835 325.932 352.679 325.97 352.524 cv
326.964 348.463 li
327.002 348.309 327.157 348.217 327.313 348.251 cv
327.467 348.289 327.562 348.445 327.524 348.6 cv
326.53 352.661 li
326.498 352.793 326.38 352.881 326.25 352.881 cv
cp
f
328.973 357.199 mo
328.952 357.199 328.931 357.197 328.91 357.192 cv
328.754 357.157 328.656 357.004 328.691 356.849 cv
330.024 350.893 li
330.06 350.737 330.218 350.64 330.368 350.674 cv
330.524 350.709 330.622 350.862 330.587 351.018 cv
329.254 356.974 li
329.224 357.108 329.104 357.199 328.973 357.199 cv
cp
f
304.538 301.934 mo
304.267 301.418 303.846 300.999 303.367 300.666 cv
301.745 299.543 296.645 297.198 295.131 298.635 cv
293.68 300.01 296.474 301.4 296.474 301.4 cv
296.474 301.4 293.999 300.73 294.119 302.573 cv
294.219 304.111 295.796 304.619 295.796 304.619 cv
295.796 304.619 293.156 304.169 294.115 306.373 cv
295.074 308.576 300.535 310.538 302.545 310.477 cv
304.555 310.416 303.131 307.78 303.131 307.78 cv
303.131 307.78 305.29 307.428 305.29 306.231 cv
305.29 304.966 303.592 304.484 303.592 304.484 cv
303.592 304.484 305.516 303.79 304.538 301.934 cv
cp
.956863 .517647 .384314 rgb
f
302.959 304.618 mo
302.919 304.618 302.879 304.61 302.841 304.593 cv
296.355 301.663 li
296.21 301.598 296.146 301.427 296.211 301.281 cv
296.277 301.136 296.448 301.072 296.592 301.138 cv
303.078 304.067 li
303.223 304.133 303.288 304.304 303.222 304.449 cv
303.174 304.556 303.069 304.618 302.959 304.618 cv
cp
0 0 0 rgb
f
302.34 307.768 mo
302.302 307.768 302.263 307.76 302.225 307.743 cv
295.681 304.883 li
295.535 304.819 295.468 304.649 295.532 304.504 cv
295.596 304.358 295.768 304.291 295.912 304.355 cv
302.456 307.216 li
302.602 307.279 302.668 307.449 302.604 307.595 cv
302.557 307.703 302.451 307.768 302.34 307.768 cv
cp
f
228.931 241.853 mo
154.601 241.853 li
151.724 241.853 149.392 239.521 149.392 236.644 cv
149.392 215.222 li
149.392 212.345 151.724 210.013 154.601 210.013 cv
228.931 210.013 li
231.808 210.013 234.14 212.345 234.14 215.222 cv
234.14 236.644 li
234.14 239.521 231.808 241.853 228.931 241.853 cv
cp
.545098 .333333 .556863 rgb
f
657.128 206.954 mo
702.488 206.954 li
704.582 206.954 706.278 205.257 706.278 203.163 cv
706.278 180.19 li
706.278 178.097 704.582 176.399 702.488 176.399 cv
657.128 176.399 li
655.035 176.399 653.338 178.097 653.338 180.19 cv
653.338 203.163 li
653.338 205.257 655.035 206.954 657.128 206.954 cv
cp
.607843 .8 .780392 rgb
f
668.029 203.13 mo
662.79 216.895 li
679.15 204.59 li
668.029 203.13 li
cp
f
75.4131 177.701 mo
30.7617 177.701 li
28.7583 177.701 27.1348 176.078 27.1348 174.074 cv
27.1348 152.792 li
27.1348 150.789 28.7583 149.165 30.7617 149.165 cv
75.4131 149.165 li
77.416 149.165 79.04 150.789 79.04 152.792 cv
79.04 174.074 li
79.04 176.078 77.416 177.701 75.4131 177.701 cv
cp
f
56.0283 174.169 mo
61.2676 187.934 li
44.9072 175.629 li
56.0283 174.169 li
cp
f
505.085 253.266 mo
505.085 253.266 501.566 253.523 502.687 258.497 cv
503.807 263.472 507.012 257.287 507.012 257.287 cv
505.085 253.266 li
cp
1 .662745 .560784 rgb
f
470.366 349.119 mo
471.05 349.51 510.701 347.456 511.593 346.637 cv
511.911 346.345 511.893 344.46 511.638 341.775 cv
511.178 336.89 508.416 328.546 506.888 323.399 cv
506.888 323.399 493.011 324.332 491.773 325.121 cv
490.526 325.917 477.161 337.2 477.161 337.2 cv
477.161 337.2 472.061 339.141 470.231 342.157 cv
469.697 343.043 469.425 343.985 469.331 344.864 cv
469.102 346.993 469.889 348.854 470.366 349.119 cv
cp
.156863 .423529 .486275 rgb
f
470.366 349.119 mo
471.05 349.51 510.701 347.456 511.593 346.637 cv
511.911 346.345 511.893 344.46 511.638 341.775 cv
469.331 344.864 li
469.102 346.993 469.889 348.854 470.366 349.119 cv
cp
1 1 1 rgb
f
481.741 333.708 mo
481.592 333.708 481.466 333.594 481.454 333.443 cv
481.441 333.284 481.56 333.146 481.718 333.133 cv
492.46 332.273 li
487.479 329.018 li
487.345 328.931 487.308 328.752 487.395 328.619 cv
487.483 328.484 487.663 328.449 487.793 328.535 cv
493.48 332.252 li
493.584 332.319 493.633 332.445 493.603 332.564 cv
493.572 332.684 493.469 332.771 493.347 332.78 cv
481.765 333.707 li
481.757 333.708 481.749 333.708 481.741 333.708 cv
cp
f
518.887 286.727 mo
518.887 286.727 496.874 271.159 477.874 275.938 cv
458.875 280.719 486.621 326.921 486.621 326.921 cv
514.239 326.983 li
511.548 313.746 li
544.703 313.682 li
530.073 292.967 li
518.887 286.727 li
cp
.545098 .333333 .556863 rgb
f
493.42 289.494 mo
493.324 289.494 493.231 289.447 493.176 289.36 cv
493.152 289.322 490.718 285.501 487.458 282.72 cv
487.337 282.616 487.322 282.434 487.426 282.313 cv
487.53 282.191 487.711 282.178 487.833 282.28 cv
491.16 285.12 493.639 289.013 493.664 289.052 cv
493.749 289.187 493.709 289.364 493.574 289.45 cv
493.526 289.48 493.473 289.494 493.42 289.494 cv
cp
.262745 .0980392 .286275 rgb
f
527.384 251.175 mo
503.131 270.459 li
503.131 270.459 502.94 283.236 514.943 286.727 cv
526.945 290.216 528.339 275.664 528.339 275.664 cv
527.384 251.175 li
cp
.976471 .494118 .345098 rgb
f
511.822 267.169 mo
511.822 267.169 512.409 274.347 506.689 273.665 cv
500.97 272.982 501.322 264.77 501.322 264.77 cv
511.822 267.169 li
cp
1 .662745 .560784 rgb
f
556.452 303.715 mo
556.452 303.715 567.469 263.944 558.193 253 cv
548.917 242.056 527.384 251.175 527.384 251.175 cv
517.08 287.673 li
556.452 303.715 li
cp
.976471 .494118 .345098 rgb
f
540.633 276.693 mo
540.633 276.693 535.064 267.873 532.362 266.868 cv
529.659 265.863 523.126 267.187 523.124 267.97 cv
523.122 268.752 529.174 269.704 529.174 269.704 cv
529.174 269.704 525.772 275.648 525.718 276.984 cv
525.663 278.32 528.731 282.211 529.405 282.6 cv
530.079 282.988 531.771 280.819 531.771 280.819 cv
531.771 280.819 533.64 283.08 536.273 283.776 cv
538.907 284.473 541.93 280.479 541.93 280.479 cv
540.633 276.693 li
cp
1 .662745 .560784 rgb
f
531.771 281.107 mo
531.723 281.104 529.501 280.729 529.501 280.729 cv
529.344 280.703 529.238 280.555 529.265 280.397 cv
529.291 280.241 529.435 280.132 529.597 280.161 cv
530.94 280.388 li
529.82 279.25 li
529.708 279.137 529.71 278.954 529.823 278.843 cv
529.935 278.73 530.119 278.73 530.23 278.846 cv
531.976 280.617 li
532.063 280.706 532.084 280.842 532.026 280.952 cv
531.976 281.049 531.877 281.107 531.771 281.107 cv
cp
0 0 0 rgb
f
532.805 270.603 mo
532.757 270.599 529.126 269.988 529.126 269.988 cv
528.969 269.962 528.863 269.813 528.89 269.656 cv
528.916 269.5 529.058 269.394 529.222 269.42 cv
532.853 270.03 li
533.01 270.057 533.115 270.205 533.089 270.362 cv
533.065 270.503 532.943 270.603 532.805 270.603 cv
cp
f
550.182 241.809 mo
550.008 248.903 li
550.008 248.903 548.679 250.911 544.52 251.147 cv
541.422 251.323 540.353 250.598 540.353 250.598 cv
540.871 247.015 li
541.382 243.521 li
548.917 242.056 li
550.182 241.809 li
cp
1 .662745 .560784 rgb
f
548.799 242.66 mo
548.775 242.846 548.697 243.063 548.576 243.312 cv
546.911 246.676 542.595 247.316 540.823 247.433 cv
541.337 244.082 li
548.799 242.66 li
cp
0 0 0 rgb
f
540.439 228.527 mo
540.439 228.527 536.662 236.966 537.953 241.737 cv
539.244 246.509 543.587 245.799 546.19 244.901 cv
548.793 244.005 550.011 242.425 550.011 242.425 cv
550.011 242.425 552.428 243.268 554.068 241.029 cv
555.71 238.79 554.734 236.193 553.356 235.588 cv
551.978 234.982 550.323 235.967 550.323 235.967 cv
551.635 233.516 li
551.635 233.516 546.321 220.956 540.439 228.527 cv
cp
1 .662745 .560784 rgb
f
540.735 239.313 mo
540.612 239.313 540.498 239.234 540.46 239.11 cv
539.9 237.288 541.187 235.441 541.241 235.363 cv
541.334 235.233 541.513 235.202 541.643 235.295 cv
541.772 235.387 541.804 235.566 541.712 235.696 cv
541.7 235.713 540.535 237.393 541.011 238.94 cv
541.058 239.093 540.973 239.254 540.82 239.301 cv
540.792 239.31 540.764 239.313 540.735 239.313 cv
cp
0 0 0 rgb
f
550.675 239.959 mo
550.604 239.959 550.532 239.933 550.477 239.88 cv
550.361 239.771 550.356 239.588 550.466 239.473 cv
552.773 237.039 li
552.883 236.923 553.065 236.918 553.181 237.028 cv
553.296 237.138 553.301 237.32 553.191 237.436 cv
550.884 239.869 li
550.827 239.929 550.751 239.959 550.675 239.959 cv
cp
f
553.112 239.311 mo
553.068 239.308 551.478 239.063 551.478 239.063 cv
551.32 239.039 551.213 238.892 551.236 238.734 cv
551.261 238.577 551.407 238.471 551.565 238.493 cv
553.156 238.737 li
553.313 238.762 553.421 238.909 553.397 239.066 cv
553.375 239.209 553.253 239.311 553.112 239.311 cv
cp
f
509.7 271.406 mo
517.211 270.785 li
518.066 270.715 518.701 269.965 518.631 269.109 cv
517.182 251.575 li
517.111 250.721 516.361 250.085 515.507 250.155 cv
507.995 250.776 li
507.141 250.847 506.505 251.597 506.575 252.451 cv
508.024 269.986 li
508.096 270.841 508.846 271.477 509.7 271.406 cv
cp
1 1 1 rgb
f
508.168 271.532 mo
515.679 270.912 li
516.534 270.841 517.169 270.091 517.099 269.236 cv
515.649 251.701 li
515.579 250.847 514.829 250.211 513.975 250.282 cv
506.463 250.902 li
505.608 250.974 504.973 251.724 505.043 252.578 cv
506.492 270.113 li
506.563 270.968 507.313 271.604 508.168 271.532 cv
cp
0 0 0 rgb
f
550.323 235.967 mo
550.323 235.967 549.448 236.538 548.814 235.543 cv
548.182 234.547 549.578 231.612 549.578 231.612 cv
549.578 231.612 546.954 232.202 545.335 231.33 cv
543.715 230.459 542.925 228.07 542.925 228.07 cv
542.925 228.07 541.726 230.555 538.147 229.452 cv
534.57 228.35 533.898 223.476 537.723 222.489 cv
541.548 221.503 543.632 223.198 543.632 223.198 cv
543.632 223.198 544.125 219.663 548.847 221.42 cv
553.148 223.021 553.864 228.417 553.864 228.417 cv
553.864 228.417 556.45 228.543 556.941 231.356 cv
557.432 234.17 554.137 236.197 554.137 236.197 cv
554.137 236.197 552.271 235.098 550.323 235.967 cv
cp
f
544.581 236.162 mo
544.386 236.14 544.274 235.995 544.295 235.837 cv
544.5 234.259 li
544.521 234.102 544.654 233.993 544.823 234.01 cv
544.981 234.03 545.093 234.175 545.072 234.333 cv
544.867 235.911 li
544.848 236.057 544.724 236.162 544.581 236.162 cv
cp
f
539.896 235.775 mo
539.695 235.749 539.587 235.603 539.61 235.444 cv
539.846 233.87 li
539.869 233.714 540.013 233.609 540.174 233.628 cv
540.331 233.651 540.439 233.798 540.416 233.956 cv
540.181 235.53 li
540.159 235.673 540.036 235.775 539.896 235.775 cv
cp
f
546.059 233.14 mo
545.954 233.14 545.853 233.083 545.802 232.982 cv
545.426 232.247 544.411 232.447 544.368 232.459 cv
544.215 232.488 544.06 232.392 544.027 232.236 cv
543.994 232.081 544.093 231.928 544.248 231.895 cv
544.31 231.883 545.737 231.59 546.315 232.721 cv
546.388 232.862 546.332 233.035 546.19 233.108 cv
546.147 233.13 546.104 233.14 546.059 233.14 cv
cp
f
541.484 232.154 mo
541.393 232.154 541.302 232.11 541.246 232.028 cv
541.104 231.82 540.938 231.706 540.741 231.681 cv
540.348 231.627 539.872 231.949 539.726 232.078 cv
539.606 232.183 539.424 232.172 539.318 232.051 cv
539.214 231.932 539.226 231.75 539.345 231.645 cv
539.374 231.62 540.08 231.02 540.812 231.108 cv
541.179 231.154 541.485 231.355 541.723 231.704 cv
541.813 231.836 541.778 232.015 541.646 232.104 cv
541.597 232.139 541.54 232.154 541.484 232.154 cv
cp
f
503.027 262.616 mo
503.027 262.616 498.006 262.04 499.55 259.73 cv
501.095 257.421 510.178 256.315 511.146 259.027 cv
512.115 261.739 503.027 262.616 503.027 262.616 cv
cp
1 .662745 .560784 rgb
f
503.57 266.762 mo
503.57 266.762 498.55 266.187 500.094 263.876 cv
501.639 261.566 510.722 260.462 511.69 263.174 cv
512.659 265.885 503.57 266.762 503.57 266.762 cv
cp
f
506.475 270.231 mo
505.396 270.589 504.24 270.702 503.131 270.459 cv
502.139 270.242 501.272 269.744 501.771 268.62 cv
502.77 266.373 510.524 264.04 511.777 266.259 cv
512.712 267.913 508.618 269.521 506.475 270.231 cv
cp
f
502.436 262.063 mo
502.286 262.063 502.159 261.947 502.148 261.796 cv
502.136 261.637 502.255 261.499 502.414 261.487 cv
508.246 261.052 li
508.423 261.031 508.543 261.159 508.555 261.317 cv
508.567 261.477 508.448 261.614 508.289 261.626 cv
502.457 262.062 li
502.449 262.063 502.442 262.063 502.436 262.063 cv
cp
0 0 0 rgb
f
503.38 266.653 mo
503.23 266.653 503.104 266.538 503.093 266.387 cv
503.08 266.228 503.199 266.09 503.358 266.078 cv
509.189 265.643 li
509.338 265.618 509.487 265.75 509.498 265.908 cv
509.511 266.067 509.392 266.205 509.232 266.217 cv
503.401 266.652 li
503.395 266.653 503.387 266.653 503.38 266.653 cv
cp
f
547.749 304.513 mo
547.724 304.513 547.697 304.509 547.671 304.502 cv
547.508 304.459 547.411 304.292 547.454 304.129 cv
548.435 300.436 li
548.478 300.273 548.643 300.179 548.808 300.219 cv
548.971 300.262 549.067 300.429 549.024 300.592 cv
548.044 304.285 li
548.008 304.422 547.884 304.513 547.749 304.513 cv
cp
.32549 .270588 .47451 rgb
f
518.784 295.238 mo
518.607 295.234 518.475 295.094 518.479 294.926 cv
518.582 290.992 li
518.586 290.823 518.702 290.696 518.895 290.695 cv
519.063 290.699 519.196 290.84 519.191 291.008 cv
519.089 294.941 li
519.085 295.107 518.949 295.238 518.784 295.238 cv
cp
f
522.031 297.686 mo
521.862 297.686 521.726 297.549 521.727 297.38 cv
521.736 293.21 li
521.736 293.042 521.873 292.906 522.041 292.906 cv
522.21 292.906 522.347 293.043 522.346 293.212 cv
522.336 297.382 li
522.336 297.55 522.199 297.686 522.031 297.686 cv
cp
f
542.749 241.706 mo
542.568 241.706 542.378 241.683 542.181 241.63 cv
542.026 241.59 541.935 241.433 541.976 241.278 cv
542.015 241.123 542.174 241.029 542.327 241.073 cv
543.569 241.395 544.294 240.224 544.324 240.174 cv
544.406 240.037 544.583 239.995 544.72 240.075 cv
544.855 240.157 544.9 240.333 544.819 240.47 cv
544.538 240.942 543.788 241.706 542.749 241.706 cv
cp
0 0 0 rgb
f
434.445 333.96 mo
434.764 334.68 467.929 356.511 469.132 356.379 cv
469.562 356.332 470.663 354.803 472.048 352.488 cv
474.571 348.279 477.287 339.921 479.104 334.87 cv
479.104 334.87 467.371 327.401 465.907 327.305 cv
464.431 327.207 446.979 328.381 446.979 328.381 cv
446.979 328.381 441.72 326.924 438.46 328.271 cv
437.505 328.669 436.728 329.267 436.131 329.919 cv
434.686 331.498 434.217 333.464 434.445 333.96 cv
cp
.156863 .423529 .486275 rgb
f
434.445 333.96 mo
434.764 334.68 467.929 356.511 469.132 356.379 cv
469.562 356.332 470.663 354.803 472.048 352.488 cv
436.131 329.919 li
434.686 331.498 434.217 333.464 434.445 333.96 cv
cp
1 1 1 rgb
f
461.695 334.514 mo
461.643 334.514 461.591 334.5 461.544 334.471 cv
451.662 328.358 li
451.526 328.274 451.484 328.097 451.568 327.962 cv
451.652 327.825 451.83 327.783 451.965 327.868 cv
461.13 333.537 li
459.044 327.963 li
458.987 327.814 459.063 327.648 459.213 327.593 cv
459.363 327.536 459.527 327.612 459.583 327.762 cv
461.965 334.125 li
462.009 334.24 461.974 334.37 461.878 334.448 cv
461.825 334.492 461.761 334.514 461.695 334.514 cv
cp
f
556.452 303.715 mo
556.452 303.715 508.988 279.575 498.523 283.017 cv
484.787 287.533 459.894 324.785 459.894 324.785 cv
481.713 345.902 li
481.713 345.902 504.31 315.406 507.928 315.81 cv
512.11 316.275 535.648 326.176 544.023 323.483 cv
552.399 320.792 556.452 303.715 556.452 303.715 cv
cp
.654902 .435294 .658824 rgb
f
504.283 308.979 mo
504.228 308.979 504.172 308.981 504.114 308.985 cv
503.501 309.033 503.405 309.284 503.374 309.366 cv
502.99 310.379 505.167 313.228 506.894 315.104 cv
506.904 313.743 506.779 310.729 505.533 309.499 cv
505.181 309.15 504.771 308.979 504.283 308.979 cv
cp
507.161 316.096 mo
507.084 316.096 507.009 316.065 506.954 316.008 cv
506.46 315.498 502.148 310.974 502.835 309.162 cv
502.952 308.854 503.261 308.473 504.069 308.411 cv
504.807 308.352 505.428 308.583 505.939 309.089 cv
507.75 310.879 507.462 315.625 507.449 315.826 cv
507.441 315.94 507.368 316.039 507.261 316.078 cv
507.229 316.09 507.194 316.096 507.161 316.096 cv
cp
.262745 .0980392 .286275 rgb
f
553.437 249.395 mo
553.437 249.395 586.211 263.575 580.519 288.048 cv
575.094 311.368 537.685 291 537.685 291 cv
539.535 272.696 li
556.991 274.561 li
553.437 249.395 li
cp
.976471 .494118 .345098 rgb
f
562.854 273.999 mo
562.835 273.999 562.814 273.997 562.795 273.993 cv
553.225 272.016 542.381 272.672 542.272 272.679 cv
542.09 272.684 541.976 272.567 541.966 272.409 cv
541.956 272.25 542.077 272.113 542.235 272.103 cv
542.344 272.097 553.263 271.435 562.912 273.429 cv
563.067 273.461 563.168 273.613 563.136 273.77 cv
563.107 273.905 562.987 273.999 562.854 273.999 cv
cp
1 1 1 rgb
f
559.502 269.908 mo
558.018 269.908 555.86 271.222 554.737 271.98 cv
557.265 271.923 560.372 271.564 560.747 270.823 cv
560.771 270.776 560.833 270.652 560.639 270.393 cv
560.444 270.131 560.171 269.979 559.803 269.928 cv
559.706 269.915 559.605 269.908 559.502 269.908 cv
cp
554.024 272.565 mo
553.773 272.565 553.605 272.538 553.548 272.368 cv
553.509 272.251 553.549 272.122 553.646 272.047 cv
553.807 271.925 557.626 269.041 559.882 269.357 cv
560.403 269.43 560.813 269.662 561.102 270.047 cv
561.438 270.499 561.374 270.86 561.262 271.084 cv
560.563 272.464 555.494 272.565 554.024 272.565 cv
cp
f
543.533 251.367 mo
542.525 251.367 541.431 251.227 540.269 250.873 cv
540.116 250.827 540.03 250.666 540.077 250.514 cv
540.123 250.362 540.281 250.273 540.437 250.322 cv
545.888 251.975 549.781 248.718 549.82 248.685 cv
549.939 248.58 550.122 248.596 550.227 248.716 cv
550.33 248.836 550.316 249.018 550.196 249.122 cv
550.163 249.15 547.529 251.367 543.533 251.367 cv
cp
f
554.928 297.669 mo
554.894 297.669 554.858 297.663 554.824 297.65 cv
554.709 297.605 543.214 293.182 537.526 289.447 cv
537.394 289.359 537.356 289.181 537.443 289.048 cv
537.531 288.915 537.711 288.878 537.843 288.965 cv
543.479 292.665 554.916 297.067 555.031 297.111 cv
555.18 297.169 555.254 297.335 555.197 297.484 cv
555.153 297.599 555.044 297.669 554.928 297.669 cv
cp
f
517.259 286.479 mo
517.072 286.462 516.956 286.32 516.972 286.162 cv
517.491 280.907 520.011 273.654 520.036 273.582 cv
520.089 273.432 520.253 273.352 520.403 273.404 cv
520.554 273.457 520.633 273.622 520.581 273.771 cv
520.556 273.844 518.058 281.033 517.546 286.219 cv
517.531 286.367 517.405 286.479 517.259 286.479 cv
cp
f
408.937 164.907 mo
409.623 172.547 li
424.298 172.547 li
424.298 163.895 li
408.937 164.907 li
cp
1 .662745 .560784 rgb
f
435.112 168.437 mo
436.595 176.098 li
452.747 172.268 li
449.925 163.895 li
435.112 168.437 li
cp
f
453.083 63.8628 mo
453.083 63.8628 456.936 60.3281 462.421 63.2129 cv
467.906 66.0986 467.223 74.3135 467.223 74.3135 cv
467.223 74.3135 472.989 76.356 473.463 83.4116 cv
473.937 90.4673 465.84 93.2114 465.84 93.2114 cv
452.053 91.04 li
452.053 91.04 449.302 86.9375 449.321 86.7856 cv
449.342 86.6338 448.775 69.6401 448.775 69.6401 cv
453.083 63.8628 li
cp
0 0 0 rgb
f
423.283 121.824 mo
423.283 121.824 426.166 94.4956 436.883 89.7974 cv
447.6 85.0991 464.938 89.9312 464.938 89.9312 cv
464.158 126.482 li
423.283 121.824 li
cp
.247059 .619608 .592157 rgb
f
408.749 171.867 mo
408.749 171.867 406.441 179.377 405.58 180.365 cv
404.719 181.353 395.035 190.015 393.775 193.071 cv
392.516 196.126 394.151 200.37 394.939 200.496 cv
395.728 200.623 432.79 184.273 432.79 184.273 cv
425.485 166.153 li
408.749 171.867 li
cp
.121569 .368627 .407843 rgb
f
432.223 120.291 mo
432.223 120.291 411 115.126 405.181 124.093 cv
399.36 133.061 407.499 167.282 407.499 167.282 cv
427.041 167.282 li
432.223 120.291 li
cp
.545098 .333333 .556863 rgb
f
406.6 177.262 mo
406.6 177.262 414.343 180.988 413.362 181.98 cv
412.383 182.973 401.697 185.735 401.497 184.552 cv
401.296 183.368 405.36 177.689 406.6 177.262 cv
cp
1 .729412 .341176 rgb
f
480.267 128.065 mo
480.267 128.065 484.686 148.599 475.83 151.905 cv
466.975 155.21 446.561 151.291 446.561 151.291 cv
454.843 165.906 li
428.205 173.797 li
428.205 173.797 406.086 133.856 419.549 123.211 cv
433.013 112.566 461.351 128.065 461.351 128.065 cv
480.267 128.065 li
cp
.654902 .435294 .658824 rgb
f
435.063 175.759 mo
435.063 175.759 433.939 183.974 432.383 185.006 cv
430.826 186.039 424.229 191.336 420.834 195.844 cv
417.988 199.623 421.459 201.197 421.459 201.197 cv
443.874 198.582 li
461.491 182.177 li
452.889 168.256 li
435.063 175.759 li
cp
.156863 .423529 .486275 rgb
f
433.532 180.831 mo
433.532 180.831 441.261 184.587 440.276 185.576 cv
439.292 186.565 428.597 189.285 428.4 188.101 cv
428.204 186.916 432.291 181.253 433.532 180.831 cv
cp
1 .729412 .341176 rgb
f
451.42 81.5322 mo
452.318 87.2866 li
452.318 87.2866 451.403 89.1543 447.641 90.1206 cv
444.837 90.8408 443.753 90.4551 443.753 90.4551 cv
443.692 87.4688 li
443.639 84.5557 li
450.302 81.9678 li
451.42 81.5322 li
cp
1 .662745 .560784 rgb
f
450.307 81.9844 mo
450.32 82.1655 450.288 82.3872 450.224 82.6465 cv
449.317 86.1543 445.444 87.5356 443.827 87.9619 cv
443.67 84.6724 li
450.307 81.9844 li
cp
0 0 0 rgb
f
439.688 70.0435 mo
439.688 70.0435 437.652 78.8081 439.775 83.125 cv
441.898 87.4419 445.914 85.9541 448.232 84.6118 cv
450.552 83.27 451.421 81.5332 451.421 81.5332 cv
451.421 81.5332 453.886 81.8887 455.036 79.4438 cv
456.187 76.999 454.771 74.7002 453.342 74.3789 cv
451.912 74.0576 450.515 75.3062 450.515 75.3062 cv
451.312 72.7212 li
451.312 72.7212 443.894 61.7144 439.688 70.0435 cv
cp
1 .662745 .560784 rgb
f
441.927 80.2632 mo
441.839 80.2632 441.753 80.2158 441.709 80.1323 cv
440.843 78.5112 441.721 76.522 441.758 76.438 cv
441.813 76.314 441.96 76.2578 442.085 76.3145 cv
442.209 76.3701 442.265 76.5161 442.209 76.6406 cv
442.2 76.6592 441.395 78.4951 442.145 79.8999 cv
442.209 80.02 442.163 80.1699 442.043 80.2339 cv
442.006 80.2539 441.966 80.2632 441.927 80.2632 cv
cp
0 0 0 rgb
f
451.542 79.0264 mo
451.496 79.0264 451.45 79.0142 451.409 78.9878 cv
451.294 78.9146 451.26 78.7622 451.333 78.647 cv
453.082 75.8921 li
453.157 75.7759 453.311 75.7432 453.424 75.8159 cv
453.539 75.8892 453.573 76.0415 453.5 76.1567 cv
451.751 78.9116 li
451.703 78.9858 451.623 79.0264 451.542 79.0264 cv
cp
f
452.184 78.0156 mo
452.052 78.0156 451.942 77.9116 451.937 77.7783 cv
451.932 77.6421 452.037 77.5273 452.174 77.5215 cv
453.739 77.4585 li
453.882 77.4629 453.99 77.5596 453.996 77.6958 cv
454.001 77.832 453.896 77.9468 453.759 77.9526 cv
452.193 78.0156 li
452.19 78.0156 452.187 78.0156 452.184 78.0156 cv
cp
f
440.022 117.169 mo
439.936 117.169 439.849 117.129 439.792 117.055 cv
439.773 117.03 437.893 114.518 436.399 110.813 cv
434.093 105.088 436.294 96.8506 436.389 96.5029 cv
436.431 96.3486 436.59 96.2578 436.743 96.3003 cv
436.896 96.3423 436.987 96.501 436.945 96.6543 cv
436.923 96.7378 434.701 105.055 436.935 110.597 cv
438.397 114.228 440.234 116.683 440.253 116.707 cv
440.349 116.834 440.323 117.015 440.196 117.111 cv
440.145 117.15 440.083 117.169 440.022 117.169 cv
cp
1 1 1 rgb
f
444.017 81.6357 mo
444.372 81.7832 444.913 81.9077 445.346 81.5767 cv
445.757 81.2612 445.978 80.8145 446.094 80.4702 cv
444.017 81.6357 li
cp
444.701 82.2842 mo
444.002 82.2842 443.395 81.8716 443.358 81.8462 cv
443.288 81.7979 443.248 81.7163 443.252 81.6313 cv
443.256 81.5464 443.304 81.4692 443.378 81.4277 cv
446.341 79.7651 li
446.422 79.7207 446.521 79.7231 446.597 79.7734 cv
446.674 79.8237 446.717 79.9121 446.708 80.0039 cv
446.703 80.0547 446.58 81.2529 445.646 81.9692 cv
445.342 82.2026 445.013 82.2842 444.701 82.2842 cv
cp
0 0 0 rgb
f
445.86 73.373 mo
445.787 73.373 445.715 73.3408 445.666 73.2788 cv
445.154 72.6274 444.199 73.0186 444.159 73.0352 cv
444.031 73.0879 443.888 73.0283 443.835 72.9038 cv
443.782 72.7783 443.84 72.6338 443.966 72.5806 cv
444.02 72.5566 445.307 72.0215 446.055 72.9731 cv
446.139 73.0806 446.12 73.2358 446.013 73.3203 cv
445.968 73.356 445.914 73.373 445.86 73.373 cv
cp
f
439.444 73.644 mo
439.392 73.644 439.338 73.627 439.293 73.5923 cv
439.186 73.5088 439.165 73.354 439.248 73.2461 cv
439.271 73.2168 439.815 72.5205 440.526 72.4727 cv
440.868 72.4482 441.197 72.5801 441.481 72.8618 cv
441.578 72.958 441.579 73.1143 441.483 73.2114 cv
441.387 73.3081 441.23 73.3091 441.134 73.2134 cv
440.951 73.0327 440.765 72.9526 440.561 72.9653 cv
440.073 72.9971 439.645 73.5425 439.64 73.5483 cv
439.591 73.6108 439.518 73.644 439.444 73.644 cv
cp
f
440.465 77.04 mo
440.333 77.04 440.224 76.9365 440.218 76.8037 cv
440.154 75.3647 li
439.526 74.835 li
439.422 74.7471 439.408 74.5908 439.497 74.4868 cv
439.585 74.3809 439.741 74.3691 439.845 74.457 cv
440.556 75.0566 li
440.608 75.1011 440.641 75.1655 440.644 75.2349 cv
440.712 76.7822 li
440.718 76.9185 440.612 77.0337 440.476 77.04 cv
440.472 77.04 440.469 77.04 440.465 77.04 cv
cp
f
445.013 76.5361 mo
444.883 76.5361 444.774 76.4355 444.766 76.3047 cv
444.675 74.8809 li
443.776 74.2827 li
443.662 74.2075 443.632 74.0537 443.707 73.9404 cv
443.782 73.8262 443.935 73.7935 444.05 73.8716 cv
445.051 74.5376 li
445.115 74.5801 445.155 74.6504 445.161 74.7275 cv
445.26 76.2734 li
445.268 76.4097 445.165 76.5269 445.028 76.5356 cv
445.023 76.5361 445.018 76.5361 445.013 76.5361 cv
cp
f
450.207 75.2422 mo
450.207 75.2422 446.122 74.6968 444.38 71.9717 cv
442.637 69.2466 442.73 67.9468 442.73 67.9468 cv
442.73 67.9468 440.716 69.1172 440.002 70.6421 cv
439.287 72.1665 439.165 72.9771 439.165 72.9771 cv
439.165 72.9771 438.489 69.7012 438.836 68.6982 cv
439.183 67.6948 441.087 62.0732 448.927 62.7598 cv
460.815 63.8008 455.979 73.4517 450.207 75.2422 cv
cp
f
451.636 112.257 mo
451.636 112.257 451.273 112.098 449.738 111.549 cv
448.284 111.029 443.04 111.427 443.04 111.427 cv
443.04 111.427 438.478 112.101 434.677 113.601 cv
430.877 115.101 431.394 116.813 431.394 116.813 cv
431.394 116.813 428.946 118.099 429.852 119.179 cv
430.757 120.259 434.649 119.601 434.649 119.601 cv
434.649 119.601 429.691 120.999 431.583 122.249 cv
433.474 123.499 439.793 121.464 439.793 121.464 cv
439.793 121.464 449.163 125.793 452.598 122.76 cv
456.032 119.728 451.636 112.257 451.636 112.257 cv
cp
1 .662745 .560784 rgb
f
449.194 110.923 mo
445.011 126.218 li
445.011 126.218 472.248 145.793 483.626 130.445 cv
495.003 115.096 473.837 92.0928 464.938 89.9312 cv
456.038 87.7695 460.534 112.492 460.534 112.492 cv
449.194 110.923 li
cp
.247059 .619608 .592157 rgb
f
442.164 144.544 mo
441.928 144.544 441.69 144.612 441.449 144.748 cv
441.077 144.957 440.895 145.214 440.891 145.533 cv
440.871 147.003 444.207 149.45 446.087 150.656 cv
445.628 149.089 444.384 145.389 442.702 144.661 cv
442.521 144.583 442.343 144.544 442.164 144.544 cv
cp
446.561 151.578 mo
446.51 151.578 446.458 151.565 446.413 151.538 cv
445.785 151.162 440.284 147.807 440.313 145.526 cv
440.318 145.158 440.471 144.637 441.166 144.245 cv
441.752 143.917 442.346 143.878 442.932 144.132 cv
445.328 145.169 446.78 150.975 446.841 151.221 cv
446.868 151.334 446.825 151.453 446.731 151.522 cv
446.682 151.56 446.621 151.578 446.561 151.578 cv
cp
.364706 .156863 .4 rgb
f
468.324 113.347 mo
468.29 113.347 468.255 113.341 468.221 113.328 cv
462.938 111.286 452.299 111.621 452.193 111.625 cv
452.024 111.61 451.9 111.505 451.896 111.347 cv
451.89 111.188 452.015 111.054 452.174 111.049 cv
452.615 111.034 463.037 110.705 468.428 112.79 cv
468.577 112.847 468.65 113.014 468.593 113.163 cv
468.549 113.277 468.439 113.347 468.324 113.347 cv
cp
1 1 1 rgb
f
466.574 109.189 mo
465.237 109.189 463.094 110.22 461.591 111.075 cv
464.785 110.598 467.367 109.924 467.513 109.495 cv
467.508 109.495 467.484 109.459 467.408 109.405 cv
467.196 109.254 466.911 109.189 466.574 109.189 cv
cp
460.254 111.837 mo
460.134 111.837 460.025 111.763 459.983 111.648 cv
459.938 111.522 459.984 111.381 460.097 111.308 cv
460.682 110.924 465.874 107.603 467.742 108.935 cv
468.116 109.201 468.11 109.486 468.073 109.632 cv
467.781 110.786 462.532 111.557 460.289 111.835 cv
460.277 111.836 460.266 111.837 460.254 111.837 cv
cp
f
443.95 90.7456 mo
443.839 90.7456 443.768 90.7441 443.744 90.7432 cv
443.585 90.7388 443.46 90.606 443.465 90.4468 cv
443.47 90.2876 443.585 90.1724 443.762 90.167 cv
443.813 90.1699 449.697 90.2993 452.088 87.1138 cv
452.184 86.9844 452.365 86.9609 452.491 87.0562 cv
452.619 87.1514 452.645 87.3325 452.549 87.4595 cv
450.213 90.5728 445.063 90.7456 443.95 90.7456 cv
cp
f
431.553 121.965 mo
399.78 121.965 li
390.706 101.44 li
421.226 101.44 li
421.987 101.44 422.677 101.889 422.984 102.585 cv
431.553 121.965 li
cp
f
428.793 121.965 mo
397.021 121.965 li
388.922 103.647 li
388.462 102.608 389.224 101.44 390.359 101.44 cv
419.718 101.44 li
428.793 121.965 li
cp
.988235 .541176 .368627 rgb
f
442.203 124.558 mo
397.345 124.558 li
396.628 124.558 396.048 123.978 396.048 123.262 cv
396.048 122.546 396.628 121.965 397.345 121.965 cv
442.203 121.965 li
442.919 121.965 443.499 122.546 443.499 123.262 cv
443.499 123.978 442.919 124.558 442.203 124.558 cv
cp
0 0 0 rgb
f
431.394 117.061 mo
431.309 117.061 431.226 117.016 431.18 116.937 cv
431.111 116.819 431.151 116.667 431.271 116.6 cv
431.303 116.581 434.585 114.7 438.741 113.517 cv
438.871 113.481 439.01 113.556 439.046 113.687 cv
439.084 113.818 439.008 113.955 438.876 113.993 cv
434.778 115.159 431.549 117.009 431.517 117.027 cv
431.479 117.05 431.436 117.061 431.394 117.061 cv
cp
f
434.182 119.724 mo
434.102 119.724 434.023 119.686 433.977 119.614 cv
433.9 119.5 433.931 119.347 434.045 119.271 cv
434.159 119.195 436.874 117.401 439.423 117.182 cv
439.573 117.171 439.68 117.271 439.69 117.407 cv
439.702 117.543 439.602 117.663 439.466 117.674 cv
437.044 117.882 434.346 119.665 434.318 119.683 cv
434.276 119.711 434.229 119.724 434.182 119.724 cv
cp
f
361.812 85.522 mo
407.989 85.522 li
410.135 85.522 411.873 83.7832 411.873 81.6387 cv
411.873 57.9248 li
411.873 55.7803 410.135 54.0415 407.989 54.0415 cv
361.812 54.0415 li
359.667 54.0415 357.928 55.7803 357.928 57.9248 cv
357.928 81.6387 li
357.928 83.7832 359.667 85.522 361.812 85.522 cv
cp
1 1 1 rgb
f
401.304 82.2524 mo
406.251 95.2505 li
390.802 83.6309 li
401.304 82.2524 li
cp
f
403.777 64.0806 mo
366.024 64.0806 li
365.27 64.0806 364.659 63.4692 364.659 62.7148 cv
364.659 61.9604 365.27 61.3491 366.024 61.3491 cv
403.777 61.3491 li
404.531 61.3491 405.143 61.9604 405.143 62.7148 cv
405.143 63.4692 404.531 64.0806 403.777 64.0806 cv
cp
.815686 .596078 .827451 rgb
f
403.777 71.0474 mo
366.024 71.0474 li
365.27 71.0474 364.659 70.436 364.659 69.6816 cv
364.659 68.9277 365.27 68.3164 366.024 68.3164 cv
403.777 68.3164 li
404.531 68.3164 405.143 68.9277 405.143 69.6816 cv
405.143 70.436 404.531 71.0474 403.777 71.0474 cv
cp
f
698.685 189.044 mo
660.932 189.044 li
660.178 189.044 659.566 188.433 659.566 187.678 cv
659.566 186.924 660.178 186.313 660.932 186.313 cv
698.685 186.313 li
699.438 186.313 700.05 186.924 700.05 187.678 cv
700.05 188.433 699.438 189.044 698.685 189.044 cv
cp
1 1 1 rgb
f
698.685 197.041 mo
660.932 197.041 li
660.178 197.041 659.566 196.429 659.566 195.675 cv
659.566 194.921 660.178 194.31 660.932 194.31 cv
698.685 194.31 li
699.438 194.31 700.05 194.921 700.05 195.675 cv
700.05 196.429 699.438 197.041 698.685 197.041 cv
cp
f
71.9634 160.801 mo
34.2114 160.801 li
33.457 160.801 32.8457 160.189 32.8457 159.435 cv
32.8457 158.681 33.457 158.069 34.2114 158.069 cv
71.9634 158.069 li
72.7178 158.069 73.3291 158.681 73.3291 159.435 cv
73.3291 160.189 72.7178 160.801 71.9634 160.801 cv
cp
1 .933333 .921569 rgb
f
71.9634 168.797 mo
34.2114 168.797 li
33.457 168.797 32.8457 168.186 32.8457 167.432 cv
32.8457 166.677 33.457 166.066 34.2114 166.066 cv
71.9634 166.066 li
72.7178 166.066 73.3291 166.677 73.3291 167.432 cv
73.3291 168.186 72.7178 168.797 71.9634 168.797 cv
cp
f
403.777 78.2144 mo
366.024 78.2144 li
365.27 78.2144 364.659 77.603 364.659 76.8486 cv
364.659 76.0947 365.27 75.4834 366.024 75.4834 cv
403.777 75.4834 li
404.531 75.4834 405.143 76.0947 405.143 76.8486 cv
405.143 77.603 404.531 78.2144 403.777 78.2144 cv
cp
.815686 .596078 .827451 rgb
f
573.515 89.2578 mo
573.515 89.2578 574.731 79.2085 577.838 79.2598 cv
580.943 79.311 579.783 89.6108 579.783 89.6108 cv
573.515 89.2578 li
cp
.988235 .686275 .286275 rgb
f
568.85 85.0391 mo
568.85 85.0391 559.927 82.6968 557.629 84.4893 cv
556.108 85.6748 558.642 88.0908 558.642 88.0908 cv
558.642 88.0908 554.888 87.8809 555.147 89.8081 cv
555.407 91.7358 556.78 92.3164 556.78 92.3164 cv
556.78 92.3164 553.647 92.8374 555.53 95.7109 cv
557.246 98.3306 570.446 103.173 574.077 103.564 cv
577.709 103.956 579.96 90.0176 579.748 88.8311 cv
579.537 87.6445 568.85 85.0391 568.85 85.0391 cv
cp
f
573.694 105.763 mo
562.125 102.999 li
561.188 102.774 560.611 101.834 560.835 100.897 cv
561.059 99.9609 561.999 99.3828 562.936 99.6069 cv
574.505 102.372 li
575.441 102.596 576.019 103.537 575.795 104.473 cv
575.571 105.41 574.631 105.987 573.694 105.763 cv
cp
.654902 .435294 .658824 rgb
f
562.963 89.5562 mo
562.938 89.5562 562.912 89.5527 562.887 89.5459 cv
558.565 88.3691 li
558.412 88.3271 558.321 88.1685 558.363 88.0151 cv
558.405 87.8608 558.564 87.7705 558.718 87.8125 cv
563.039 88.9893 li
563.192 89.0313 563.283 89.1899 563.241 89.3433 cv
563.206 89.4717 563.09 89.5562 562.963 89.5562 cv
cp
1 1 1 rgb
f
562.186 94.0874 mo
562.16 94.0874 562.135 94.084 562.109 94.0767 cv
556.704 92.5942 li
556.551 92.5522 556.46 92.3936 556.502 92.2402 cv
556.544 92.0864 556.704 91.9951 556.856 92.0386 cv
562.262 93.521 li
562.415 93.563 562.506 93.7217 562.464 93.875 cv
562.429 94.0029 562.313 94.0874 562.186 94.0874 cv
cp
f
575.818 87.4121 mo
575.79 87.4121 575.761 87.4077 575.731 87.3984 cv
573.269 86.6216 li
573.117 86.5737 573.032 86.4116 573.08 86.2598 cv
573.128 86.1089 573.287 86.0239 573.442 86.0718 cv
575.905 86.8486 li
576.057 86.8965 576.142 87.0586 576.094 87.2104 cv
576.055 87.333 575.94 87.4121 575.818 87.4121 cv
cp
f
318.486 41.313 mo
318.486 41.313 315.633 31.6006 312.578 32.1621 cv
309.522 32.7236 312.361 42.6919 312.361 42.6919 cv
318.486 41.313 li
cp
.988235 .686275 .286275 rgb
f
322.394 36.3843 mo
322.394 36.3843 330.81 32.606 333.372 33.9961 cv
335.066 34.9155 332.965 37.7153 332.965 37.7153 cv
332.965 37.7153 336.633 36.8906 336.694 38.8345 cv
336.755 40.7783 335.496 41.5771 335.496 41.5771 cv
335.496 41.5771 338.672 41.5757 337.288 44.7197 cv
336.025 47.5859 323.802 54.5337 320.285 55.5171 cv
316.767 56.5005 312.254 43.1221 312.268 41.917 cv
312.28 40.7119 322.394 36.3843 322.394 36.3843 cv
cp
f
321.024 57.623 mo
331.981 52.9927 li
332.868 52.6182 333.283 51.5952 332.908 50.708 cv
332.533 49.8213 331.51 49.4058 330.624 49.7808 cv
319.667 54.4111 li
318.78 54.7861 318.365 55.8086 318.74 56.6958 cv
319.115 57.5825 320.137 57.998 321.024 57.623 cv
cp
.654902 .435294 .658824 rgb
f
328.896 39.875 mo
328.787 39.875 328.684 39.8125 328.635 39.707 cv
328.568 39.562 328.632 39.3911 328.776 39.3247 cv
332.846 37.4536 li
332.991 37.3862 333.161 37.4512 333.228 37.5947 cv
333.294 37.7397 333.23 37.9106 333.086 37.9771 cv
329.017 39.8481 li
328.978 39.8662 328.937 39.875 328.896 39.875 cv
cp
1 1 1 rgb
f
331.345 43.7842 mo
331.236 43.7842 331.132 43.7217 331.083 43.6167 cv
331.017 43.4722 331.079 43.3008 331.224 43.2339 cv
335.375 41.3154 li
335.517 41.249 335.69 41.3115 335.758 41.4561 cv
335.824 41.6006 335.762 41.772 335.617 41.8389 cv
331.466 43.7573 li
331.427 43.7754 331.386 43.7842 331.345 43.7842 cv
cp
f
315.863 39.8745 mo
315.758 39.8745 315.657 39.8174 315.606 39.7173 cv
315.534 39.5752 315.59 39.4019 315.732 39.3296 cv
318.034 38.1582 li
318.177 38.0869 318.35 38.1421 318.422 38.2842 cv
318.494 38.4263 318.438 38.5996 318.296 38.6719 cv
315.994 39.8433 li
315.952 39.8647 315.907 39.8745 315.863 39.8745 cv
cp
f
622.689 113.461 mo
621.127 121.439 626.327 129.173 634.306 130.736 cv
642.283 132.298 650.018 127.098 651.58 119.12 cv
653.143 111.142 647.941 103.408 639.964 101.845 cv
631.986 100.282 624.252 105.483 622.689 113.461 cv
cp
1 .729412 .341176 rgb
f
642.715 116.219 mo
642.658 116.219 642.601 116.21 642.544 116.19 cv
642.275 116.095 642.134 115.801 642.229 115.532 cv
643.154 112.905 li
643.248 112.636 643.541 112.494 643.812 112.59 cv
644.08 112.685 644.222 112.979 644.127 113.248 cv
643.201 115.875 li
643.127 116.087 642.928 116.219 642.715 116.219 cv
cp
0 0 0 rgb
f
632.646 112.713 mo
632.59 112.713 632.532 112.704 632.476 112.684 cv
632.207 112.589 632.065 112.295 632.16 112.026 cv
633.086 109.399 li
633.181 109.131 633.473 108.988 633.743 109.084 cv
634.012 109.179 634.153 109.473 634.059 109.742 cv
633.133 112.369 li
633.059 112.581 632.859 112.713 632.646 112.713 cv
cp
f
631.616 118.074 mo
632.101 119.167 633.077 120.811 634.738 121.399 cv
636.378 121.98 638.103 121.488 639.146 121.048 cv
631.616 118.074 li
cp
636.359 122.699 mo
635.723 122.699 635.058 122.606 634.395 122.371 cv
631.314 121.28 630.278 117.465 630.235 117.303 cv
630.187 117.115 630.247 116.916 630.392 116.786 cv
630.538 116.658 630.742 116.621 630.924 116.692 cv
640.593 120.511 li
640.772 120.582 640.897 120.748 640.917 120.94 cv
640.936 121.133 640.845 121.32 640.682 121.424 cv
640.579 121.49 638.658 122.699 636.359 122.699 cv
cp
f
90.1045 93.4409 mo
91.104 101.509 85.3735 108.859 77.3057 109.859 cv
69.2378 110.858 61.8872 105.128 60.8882 97.0601 cv
59.8887 88.9922 65.6186 81.6416 73.6865 80.6421 cv
81.7544 79.6426 89.105 85.373 90.1045 93.4409 cv
cp
1 .729412 .341176 rgb
f
69.9702 94.7896 mo
69.7441 94.7896 69.5366 94.6396 69.4736 94.4106 cv
68.7344 91.7246 li
68.6587 91.4502 68.8198 91.1665 69.0947 91.0908 cv
69.3696 91.0137 69.6528 91.1763 69.7285 91.4512 cv
70.4678 94.1372 li
70.5434 94.4116 70.3823 94.6953 70.1074 94.771 cv
70.0615 94.7837 70.0156 94.7896 69.9702 94.7896 cv
cp
0 0 0 rgb
f
80.2593 91.998 mo
80.0332 91.998 79.8257 91.8481 79.7627 91.6191 cv
79.0239 88.9331 li
78.9482 88.6587 79.1099 88.375 79.3843 88.2993 cv
79.6597 88.2231 79.9424 88.3843 80.0181 88.6597 cv
80.7568 91.3457 li
80.8325 91.6201 80.6709 91.9043 80.3965 91.9795 cv
80.3506 91.9922 80.3047 91.998 80.2593 91.998 cv
cp
f
73.1567 99.855 mo
74.1665 100.367 75.8496 100.98 77.5278 100.515 cv
79.2329 100.042 80.3208 98.4712 80.8779 97.4165 cv
73.1567 99.855 li
cp
76.2666 101.713 mo
73.7685 101.713 71.7017 100.2 71.5981 100.123 cv
71.4429 100.007 71.3657 99.8145 71.3979 99.6235 cv
71.4302 99.4331 71.5664 99.2759 71.751 99.2178 cv
81.6631 96.0869 li
81.8481 96.0273 82.0513 96.0791 82.187 96.2178 cv
82.3227 96.3569 82.3691 96.5605 82.3066 96.7446 cv
82.2529 96.9028 80.9521 100.636 77.8032 101.509 cv
77.2822 101.653 76.7656 101.713 76.2666 101.713 cv
cp
f
282.742 225.933 mo
282.742 234.063 276.151 240.652 268.022 240.652 cv
259.893 240.652 253.302 234.063 253.302 225.933 cv
253.302 217.803 259.893 211.213 268.022 211.213 cv
276.151 211.213 282.742 217.803 282.742 225.933 cv
cp
1 .729412 .341176 rgb
f
270.739 234.06 mo
270.63 234.06 270.521 234.025 270.427 233.955 cv
270.201 233.782 270.156 233.459 270.329 233.232 cv
270.482 233.029 270.649 232.743 270.569 232.528 cv
270.442 232.188 269.784 231.945 269.485 231.882 cv
269.286 231.839 269.129 231.683 269.087 231.482 cv
269.046 231.282 269.125 231.076 269.292 230.957 cv
269.918 230.51 270.763 229.62 270.588 229.135 cv
270.193 228.044 268.206 228.691 268.186 228.699 cv
267.917 228.785 267.624 228.644 267.534 228.374 cv
267.443 228.104 267.587 227.813 267.857 227.722 cv
268.954 227.35 270.968 227.158 271.558 228.784 cv
271.886 229.694 271.191 230.617 270.596 231.2 cv
270.974 231.401 271.363 231.709 271.535 232.166 cv
271.67 232.527 271.713 233.114 271.15 233.855 cv
271.048 233.989 270.895 234.06 270.739 234.06 cv
cp
0 0 0 rgb
f
271.464 222.225 mo
271.408 222.225 271.35 222.216 271.294 222.195 cv
271.026 222.102 270.884 221.81 270.977 221.541 cv
270.999 221.479 271.523 220.007 272.754 219.675 cv
273.505 219.472 274.305 219.729 275.133 220.439 cv
275.35 220.625 275.375 220.95 275.189 221.167 cv
275.004 221.382 274.679 221.407 274.462 221.223 cv
273.91 220.748 273.429 220.563 273.025 220.669 cv
272.441 220.825 272.052 221.597 271.951 221.881 cv
271.876 222.092 271.677 222.225 271.464 222.225 cv
cp
f
260.691 225.497 mo
260.634 225.497 260.576 225.487 260.519 225.468 cv
260.25 225.373 260.11 225.078 260.205 224.81 cv
260.656 223.534 261.33 222.761 262.209 222.512 cv
263.467 222.149 264.604 223.054 264.651 223.093 cv
264.873 223.271 264.908 223.596 264.729 223.817 cv
264.551 224.039 264.227 224.073 264.006 223.896 cv
263.987 223.882 263.223 223.294 262.485 223.505 cv
261.949 223.659 261.509 224.214 261.177 225.153 cv
261.102 225.365 260.903 225.497 260.691 225.497 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.53B.p1.53-temp_01.eps)
%%CreationDate: 12/3/2021 6:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+_e+!81^97&LC^>\,N-<_p+`Y>OKGG\l:4t47_(@:]8No8OrLK?^2-3)$b:s=E*c7D"fkENO/M(FIm:rn*^!>.,h+/rN
%2,-p\VQ)#.J,Zp]n@Wl02PVQr$N?E!5qQY^U26u5BNNu(l_mZ2\BSWo<j"<K)i<nlVjc7^Y2PD)GjC[=[I8rGfdY]CSb0(6OY<!U
%I'$7c=pZFM&5^'5b-.:2$Q?h,'#%R%PhSY$#jT%@h$VqUdN.q2^7;^8((:n'AN6FESP48^L`ZP"H@P9fQ^Y%2djinJ+.'6GHIi_!
%T"&o5gjmD;*Vd)H2\S4Gb%[2H@Piq7'RX^K-a8HX`*jZ09r_bi7u[Ernt5]s/0EgK>@[Fm.+\>'5P'PscpU)g7lfpgMZSWrcuceB
%AHgZ8!CE)cO@[8f[o+k@/XN>529_;V=Q>8?Qgbfp0[("A>gr>0@_p$h;`nKWG08qRr%&3[ZgW>n\_f=YcX!I42WQ-])m,=P:RFht
%0Yfd@c>gJ_2I9HX/KgNK0O%5hI]_h"`C.ianmr'(2G>+gl]jGP)V8j7ppF.?j#h-'/AIO(G%K"qiAR-2KD*8mh6!:"c=j:pHHK8&
%Qnt;0F:0Ldda\K,)>rHjL3&(iR;h+k^GN:&F_hC(o"$MpRZ;n?%i_A2;KZKo<)\[W_4&d5Ls1dJ7]@6/WsQ-IJ#N=1(&G>O?TE'J
%6`]<L4\Q^-aR09b_;+E"b!&R=g6Kj];aN6[d6<RA"5I8.3A"kg!E76ZR&YWLR3+"a9=VK3(&o0Vrj?V@S'?7U<Q2#=ia#R'];d@K
%k4;PX<&4q6Af1<f0X-pQ?noR?kIj?%)p?klQEfD(WnTEIZY_7JTC=KLb@\"]2N(SA=hKsC@[VTbn)j4r6.PRP/<J298n-.VaC7Q3
%:N72OHM:DSWoF8@+^Xp[M]lCJ[c/>PKn$?9,)(LQGE3`<1?+";nJ`[+J$CFg/C?9uKmsDQr.&1n$[WUF'dLM'L`6931AO&L]NLuF
%$VCe1$<#hi;,q!W&.l_qUD*UTi4Z,\MMN?*L,e1"Ce@Bs^g,ZY'8I[6(ujc(Zlk@,N&]g(r.YIa5/=pRn-HnG=:B2f^LAr%]*RDR
%&R_4P0@8W?:@b8W$rP@mM[ABgZk:pu"DI:6BVK.e[Pr&tM"cO5&4)@I&OEEL0Gh218,S:a"Ks&1JhEcQrl$XK+B8*Fgfm@%I%h.f
%koMp59]PX`%:68t?j^h7G]PC60?,AQ07"DPUVV9jj5DA?O2\d27J!5SEF8Xb_2F!s3*XV?+HU7\:HsGrK@MX?5]q#<#4'JX<j3&:
%VgE2%i'aRdE0Id%KA#s3*R"_JaWi05%nP[hf,M$IZY3H?AW1FI"g:g'1AShu\.r8fO/@d&_,^CuF^5fVi$s1L;g]+YilA@CGK]Q(
%\)^=G/T(_nnWV(Nn%i$%5kSAWJ:aisg"mM%K<+cEr#[BNE=VNBQs]C>q^/J%,M05i%^\mdr>3$1*nA9C3rBY@#@=BU]V<*B=T+gk
%s(_!D9d3ZdHd>o9Y!1t9f>M?KcfZ"eYC:uTqh)Xj'4]MgIFapMkP]9/D/sUg?gRajeNLnh9Y:BV/t^a`cHVkmcHN/R]GE%6?17Ks
%8t00mEV*DY>?p-aREL2bbZd,h#jSRm(/Vo'^Zfa%2KpEPYA5&I6(O^/`"akfAj@2!RXEF24Nm(Rd),W2^&MEI\bhi]WM$RI@*-kK
%T2-t?DX(KSGqU>(-,Z2Q.6+QPn*9j1<W>M198S;B0glLgj".ZV?Z9CqdnK@Lg0YWN1q`;1?6b=]<1kT+2>_UF1-HD5PdGG^)Z8;W
%&M$Men'/JWBpr4k_jZEY5L]]/%@Q-(HLEe46a%`B/puFlM+().5P:1O@-;/rn5]<B6+@#\AAiE?:0Rb05Wupp\Tr+j*Id\#`G\ju
%-k%D#fND-*P`3+^j(dfKGTuu)=WqXuYDlW**$elb".RP>T"=oBihEnf&Qu>j<u`h$aTJ+S["ocF+4*B;U%l=q>+?^H/P-7A:r;B#
%__e_/2aLSV/2arfT=asUO2:F9eid2'[]DY\6t"DMAU"9/VfD4;%KA[YlF*NlC<m*)8g^4B9niuR1UG$k_q'$6"%DYh[4_;P"VCc@
%O4EWkX,DbC5lR3Th,\Y/GPES8F]e6!c#\d!;g$2oM0*HD)N%:c0Y5pmFL?*&G(cj`TI+t:)T&&h*KFtI>@UP@E*<?_`Tlq9c#amY
%+=^K^T#W@1n(4V1Rs[V/QoV6]-pYX3hbIAX7Nou3-@3FnYirW.BW[c$NlGOq,C6Nt_)>RmOiaJ_&h7o'hpsfsn1TS'22ZgHBd9AQ
%3KR/j<?Eok[Pr1WbI\]1c4,2g%+1B/3j.siG4!7k[U]U)0h%C@Z=k_U3REpUc5W/[&[YJ.Ka*M67qQHn%4l&UGpFM5Ve^e1+h?%V
%c?)eq9kI1nVSg"/<"\\J8BSh*AH:O%\f[qf=d7\1$Wg^N_Ul6DNlFMhAIMCrVLn@K8q=>dpRth=WsWj/(BQrT)AR4ueD=+-NL4-H
%$*Fp_$6)+NIF`a()"7Um%f[$QE_a,s+_[PF-`kap^!PF8N/dg:O\bO.%&iHa0=H!2k$#_a-47Q=dY9F/Nklt?U]5pX8cNPAoFCHP
%J;MXm`IDjOiTJK:\HAD3J.`_]D::V*n%GaDl:;9KdF=/gWRF(!k=2&Qb8e%KH^TT/iHCe3,R"B%Ydb0fROF8M3AmSHdM;'ICKcAY
%qpbk0dEVc,%t'%oULeQXi\Db.-iOMF68fq/QQ`WQBiT6m$'KBtN.K%b\:JXe'qR-SRQ,6NckXD>%qj6)W`[(30AXMt(gr_&f!IT`
%B&L>BdqYEe3-=-as)qBQ-4nh^N3WfU:30XK613n;'mVJ*4J_iC.7C:'KBM=3i8A!$H!5Y)-8[5#'^mQL5_=C]58bd@\Ikn_<*r[F
%%IlR)Ar`fABo>?6U$:K8nmPVYKM#'E%H$_(ddSS=bu%.<'.i=;p`"<jkBcFT(_"ourN;`*:0X[ed;9Fr<0;IL=3;q[5usY?e0UHL
%K<A\QS[U-Ylu`9e5?`\RJ\+lZ5R`t/_RG="hVB=#L6Qe+gX7@rVU5B3G/toL,?V_hK77Ok#8I8]ntG#cr//>F=Y4"enXC8Z?=$se
%]rri_Bhn-2f!1el*O5cV0,=[g_<6Nbj9="r^A/bld-,<1b@E?;RI52$0?YUf6>;NIZRf;&_nBsjK;Z&ZFV1Q#5RV1l&DItm"3i@(
%9N\"n$[;B2k$<@&/f@,q<*O_hl%!(([NBmQVe%n*Eecs;VclW1itUN<>4jlD\G-00fi,YCjj!CiX2!LS&5]%'lR@;3i05ZOfT+^n
%iqPFX.p5#aLg(m-<Pg=@!0HY4MN2uV=*V/`Kj/"Y,qno'b'B')'"q2Q/`1OoGh+c/J3RG&Us#L)MYN)H?!!;o-3Buh-tr0Wm>(qt
%e%S.2;-[5YoS<Mtfa<tO^TRIZ!qgG_;S]gG0>]KN!YO5\MJleQ]cBAK;#Oaa5p7TCBp=5."0Ra24Np)Vd>tF;"V*KPm)\%9Qme(L
%O3E.\E=`Ul:.5p%KTKX5;CdQ1\R<,.BN%I1hMU##X]4,o/XWWrd8F'tQp[081C<5nn*$IO*%?]HM1UI^6ip$OD%);))BqN\1W0g#
%4"c"=-\Oe\g*M^_Bis_Y,cW.:/:@1gks+Y#5@QlPOpL*1BYWEW,`]H%UgMTuAKs]7^Ei-n&Q$3:8B:1B\1*L)qXQMG5Ei,?R++mZ
%M0(tOfL;VR#*Z)`ou3mrMDL@$37m!"MQ,oa,u_hSja;"TmCC$Ll(7(r.V=J@00.Yt1'FeOH8]f_GU:C<Kbl>JZRSDA=P0A\kk2ZQ
%6bp?2-VH5rZ:0L6B\a,h7TqR<bg8B!5S7LVL':245oQj#rYd\:Q'"t%5hRo%.6\,tg5B8/q^&9ULnJ/.$3,8Zd<jDjb8=<q\-i2;
%M1#DnJ$lTg1+?*%I7GA>\VN=6+.ssJQ5/_e[mAST]u(9mA$[B'/HaWF=X1/\codP_*kH[K"nN.3N52>+$oJ#*/88%,C#%oun!`Ve
%S<+Oa2)@bg4fWW&?_g*p&3r\;B=k@V;9B%gluY4%S`O$Enq/$r&g=G"i@L^WJs=(/PK+2EGD5m[_Q"]Dpi"N-8NP5:Zpc<T)lROl
%L!f*,[M0''%PYu9"9W+,r8>PrD&GL!rjMH1"O88&r2Y>]gG#E)VG`*.^TZPd;;pH4KjNBVqu2VC#>-ckUJ(DhqOR?CEu:,Vn]Q;E
%#<]$DEJ7u0U]Z8J$^_B\<Kd/ppKA3H/5Jo_4O%Qb,Q-.La?9+HVhD;?%!9,X.>9VMk9ee0!CCdq/chB+Rgd+K<a(0k"">qRK-$ia
%KjhtTi@;(sKP^+ii[XE2:[YtOK$pIR0MY@QB\JXP&S^"erqA;\qW-7^[PG*D0>,VYJU")n'U:G,"t[nk:<@-Xk]4plaaPB<Uo96N
%"'G4'mYpX/7Ykrln:2af;,`5)V6HZoT5OAEYioXBJ8oI2._3?\MEtK1n$un*f!.29JU>EhA-ieV3a0kb*+U7TH-f>AU`"u#$PmMI
%Lb-,LZ;UQ(d6`>P#45O=P;:B8g"0d^pnAC<FYB,aC1sp]D+i.I]h5^F+In>W+t+5O*2kB\K[+/];47j?rU2KJHC,%1#t7.,:2Hh>
%`$7^66,XOBg;qaggc"kB.^miA(oQg\)>YZ#iU12^CuusD!/'F$WR:DnaaZrc+DJb7N<""fL7!KsQN"=[p['g$;CrR9!Tg[95hh!5
%SMPnCdSrm\Gp"<4#d\C_H<AR*F)/T]MjQJBP%+@+#[$RZ2",.A,;uMMdO1:VK/&qRN^7?lPL5.MB_numTEB%u97Bt(p8JiHP5B>l
%Gm!ftK#!GM.U?XO&)EkE8YL_A\/-ZuZK7Ti^],$3/.o&nho_'1&84rTW?C]tVLl0lE'Vk9%>4tB%D^WAA8$$?=Rdd?e\Dn4]A")6
%.SV6,rX&lll4S23J%=Dj^u2>:]J;,!<Z%SSn#F]6CbFZFO!/*WqR0oH$_+QqA<c=h*cfu,,c?>S3OVBG!WR!A=#"*gp9GkPYCKjo
%R+#Yg``r%@R+LcM]F_ihKn1hih%eK)D4ICRRC8=R(54q[1V'hQ#QSe0)qVj.D=\I`ddo.S(fpu@.>:ci+k$Ei,P#OiGS^93/gB'!
%GJ;@dBpkJh!\EtVF=uQr0sj+**oba?B_gt;i)fRFVPJWS"M=\GaSa>VT)oqfiX-uk!8j7`MC<@d'!d:g204>;&g7Hn9e_`aWn87*
%Bf>%&duM1-f4c?q3-%)Og\\Zg>*,[/`1`S,[Q1&i-b,%Zmk`j/K'8S#c:uf-_Of=1*#[(48<VPN[keS#doN],)SVZWdLO,X52X7B
%0Teq'MP-l1Majqg#kZf6,!OAlNk;4^\OG^"E`!(;$TKTrFC`)X+6lYm"Qb<p=E3>N3]U^W&^DXZK^gKpj$640m(LQ(WS(+V>oN<O
%d+PiVAHnD&Wep/smVV\2mPNt"dD<Q=bLot=:uRsjc-e:#4b64K*NisQp]?*n!"R'"\#j_BMm,#.45U5D_J`sTbb$fn$7[Qj/eMFg
%A?L4>ntN_aX,qe(Cc`f9"Vl@^HM$Egp[Ga1SBnZ=(8rpln*QAUDBKJEEk#[356HOGAt(`UiEtCR*/W4^fY`eTmp?Yk$._8&3:05g
%aHMK\OmClLq]78Nc0B05#>q7V"l[Q'r+?!c#)Sh@,58/H1J#n9*^KVV&fV6gf>QE(&Mcmr!AV(i\</WbqSbQm<7[YR&Q2D+iKKAt
%IbACW0>GdBo'F4qGDdu$+1>[)8E2@*q0ZE#InZqg>`mlLU`jU]A!aFTQL]uF4*7Z6qGN+S[`S7',1m1ef__MT^Hq+XWfZrtY+W;3
%BmB8"E"=e:9f!;pOOh,`%f,g]pcX3>PZ)=T]HU\ufL#F&(D2Aq;*j4l(\<JOP#mU)1R,CY?O#I'IL,Hl%\>k99F&a9<#,,/`u_U8
%7IeG6Kab)-RR^%bA<]a2_J3ehSsRmF667pJ9U_b[Eg2IGVqMB-3iq9b.PeY9F?;>N`9V*&U2.X;8.u]6ft`g:Ak3bk9aV6@Q>JC,
%jo/p8"c\SEM6&lDUQ-/>LT'il:9\*o+DZN51YE1c[km5!K_I-Gp"m^h&7Pa?&<_-GW8edjb687U+4,\N_U9%iDEcsmpOEb;;os\Q
%>A-9QZ`lY\]*&#fHZ94i1*^u?aT:rh%hlg[B9g3sN+N(oR7uAN@AO]2ns.T@HUor5k7Z?R+6*L;7o]Ym.3sI;(U$@1Y8j3sl^Od%
%]i[PoPL/K<@5*UX,j,JMM;V$VdsnkhJA4EaVu?+jHFN0&Ik_'LKGGoVislA&1YNiTj4[:*FAJHh`ADR$T&SJpIOXb%K,=BiNT`_t
%0=#:VDV($0gh5XC2i&[l^\HLV,/kcBSXIq)?2o;VA3*dsKP1IkI:QW^]'W-.Z/lfWc%eo\5u%*5=Ud^UT$NAf]&$lTU=]<6H]R*6
%f6)P_"Zo$#j#qZPE4s<(G&63qp%gUn^ZTnbI_GK%+'n?OVgn..-unGCT4n*"?*@bd4+(/_XqpOe3VbC6X5H9oGaP!\C@8#t/(^rc
%h;A[s4)nKlqENsV4T\k.e=].-MT=EKo=kBIcal(c\)HIEUXlU:<j-9<r,4#iXBiDo1Uk`22+g*h@cHnJ$[c)P/C@=VM:72XJ2Z>t
%?RFm!lH;O5ba4lTRh0e;/q*DqEU)`BX'2821a&IGeSf?9<Y%&=b/J)bW9dKS7Y5OQ%ITLq_&WdE'JtXMh:A&tD7Y^=*QURL:mm@;
%#8@I"MU`H5<nO>t[YlH!Kg*0Z/9CC<BbbOZ8sdd^rFMO?\THYHl8PP+,1C3aD\AtU>1rAFa*jS3iHoYSCC]bHL442DWYXD[ihTjp
%\NrHf8f\F;9q9uuFT_pq:[UKW_^a7'Knr7+%NNoVQDbH1JPl(%fBUm"gmk0H:'sCW?@>4[q>EkR)"o/0<HbF^VVf&])RPEc8&/Sn
%qa]bR<\?6[_/Mc',H&p=(!>sdO(QQU+q0/>:[D+Rpn3jbe.UGXZW4'aAGU=q@#<^7Mf4KL>blSSG4Dc0?#ZZ[`D1e_!bn/)[hQP&
%^6bjSp0fruNd_"d/$,,heqU1UVML]hB05oe\V2EiY5=h))t<7>rn]rCkgJX!WIRLi3fP4KDJ^_driMEcE,uJc[o'_Q[p5<$7o1nq
%BK2Po$9+f%Z/J`_"Ac,fK"g_mih+d4PYI3X^320XjnasX_3Pc#-dZu.3a20F;f9daV.-&P<Mq$u^_j<&UCeYJ,?l:4E:n1?Y%VG2
%,iTZ^77rUJ9;X*F_\)cP.^j5(THq^?$CNlPr.opDO)^eQ)n0p;du&^5=)a[BUu0#rj70>Q@G!Q[9d[=&NQ^9;BXl<13R3;("\1GD
%Le\mgGJP;[Pc-GR-,8u4+N0&q;/KAE$SCP2)b6o`$]f,SV%e>;>*i"5br=F]D4&R-;R*"pW0"(2:0Jr_k(Y,5UiQ8,JN+;Z.32@>
%oYZ1g_I0kkiLUN`AYFYcSqiG%d7LIr.(D@U$'&F$<o]R!e^:X,hZ8InW7B^Y"!0f<<.^j>Pi?]FV4V^c:(/6?HD*SqP<pWOQHL?g
%"e"u"#I'e@Y7d<<j2u'l=)R0CNMkejF61DY7V8gY"M&PS%0ml<nj0D-S/,`iL9d75B.cY1FlpllI(>Xu2tQ-C^>-r!lfH<$gi%*+
%jMiY"^/)`1*7Le+f3.._i9eIOObrUOim#Seq`C/+G!?j(M>iO>A14H8"a3QJ=/X_$k1jl$HH1+YUH)S,`)a[6dr%'::,ULm#KPS:
%Y$G<jh:@,8:Z<"E_0!XUHE&qk726&_3-)_-n*"_H-^jEI_a_2f%r&":j=64!94K;W]BhA[[;*&0<9#P$mOBHflBM&LDZ<qE<S]_[
%(fV@fJiJq2G/#b-U5Y+pq9a";Y+1)j;K0cu@_0tHUVa'j%KRp%(2Dr7A)mG\rt%K7#5SoB7oA]h-.'\,R]b&]d3mcc?K:S&p_a0n
%T-H`kO+kRAon!.-NH%oJ<Ejh?Je*qAgb;L!inK[6Ca+k1l-l'*0cKqn^sm4>gbEP"S\#m%-3;8c(-OW<73Wk/-[-Mb\Sh6,E/:3i
%Du8K2_1@U?4K*7=:e*+DVJ"61Bp;d['t4n_R>FfoGL652;(Q4hq"r#o,7@#2*p#A<:@MOI%ONL=]C.Y\?)6PG><C:o++JAHZRha+
%QfXF5e]O;7li)hT(`iJfTDuu")f1rUR:>7XNHt/>g(KhG(t_N+*`J$5dDU\eiWR*;?*^e9N/-g?:9i</,K@EKUNQ:.-*=7N.Q_YD
%<U]89O4<Hs2<m,FFC5Ld1konh1d-1$kD=n\(`PEQ1)!tMiH=#]+![pQ3RV[]*hc`+L1K.C:VKOm9Q#Hg?n^Og_MMFN0p!:M`BAq$
%p;b6iS\Sn8@kcYj52./P8WLDO3BNmAm$5n:N::HQ`i3"pnqgSJ;k;r:41hMOM?VH`,3jBmYIhruj@$b!Sr#9F@N[K#`ktbHmT=)V
%ph09<i2:2Ba*@OFG=JQKEi!B]lkE]P^WX>iT1G5g)8gTg*0E)f-TkELBJ)c/^dNE.Z'<>>b?lRSrC_6\A<DqjOen+Yb\F?>Lh0g,
%T2=;b`0+U_hdZB7P9\so+>``^/XDJ>GEEI"@JRZWABD?`[]>c5HWR%a3F5lnH*$3(W_oh8_1RW)$BH#jUK*4^8^p5.K);OkE,a4<
%N[6Vp\P]'KE62f2NfR*iQLM;60i/47Nf;(h9MdIhq+%1/W6fM+hjkiD:]X4^jYUH#%&2g]:b%g3XqTgr$ui0RqmAD/oV&"S6E44i
%``YT]6G(YeO@Tsd6_VAl67[f8&4Y"3r.*-2Na]<m83I?Y>,oN0QUcO?"B07n>@EsU;;r]Sp<LpO29SDPFO4Wf./-pVe!,\%#FVi(
%gf'Ss''E*(#u!dUicbUH;Np,^5+CZ.N4o(Uje>Fl/kTQ@E`(g=1\TtK<(QFZL>;ReU;V$"B"9=>S[YIF(F9PH@kY-b.MjCs&fGoh
%4!Xi<QA[NDnnjh9;;r]Sp@9f$O</V.0IF=YPH[\9M)dGu(>=Fpj!X`n]NFEBZ^I2n'-8K5,6$dS7QH'7423I>kBC2/k.&qelE<0e
%a@SBpB%g"tSt.VmPABoUCW9&N`?;ujY0H%]9Wh*C>ha,rA7i!hbdDF+CG%C,9WH@5g>/RYbZL>PCGVqJPA8Pje\XC7(V_uT@M4B!
%$kiK92?7C5kjHX8S1UKQ,a^0YfeVht7Rs;)h==Frq/J+u%l!uA?<*gP#sCb0S/CR3X;ncIfa3pn%C]7$HeQE6*SrP50Ou:uUH^Gc
%`L3FQM'4*(KqaT?L($RdG%/PV:CJ[PMsaTEgA_>o&JhI[:+I,r9ng`M9L:#W-<CgRLVHF_IQ-4A>W:V2im2/EO63_<+]cU4nALZ5
%1Q="s]u#))EqeUf1\SQ*FM4hr(4I*=),R83lEqreg;A)mf;DE6//\-3ds$>W@0^L%G5:Rsbk3@f6.T71'/'Ndl1DA#\D5*_YhKaR
%e/op0GM<YS#S([`kFl7?<WiYMF?&&M;i\P+E>k\)9uUtg&]59\@Ue*<@t1FISFtcXY<9+6[-:GNPIM3E7ia[<dVniThcT7F:;[s9
%Zi/e7rpO\'GIIN5g].6@mf1Sh(bseF*J=;t;UW&Wba$G?$@B5E459@tmJ6__3b.WNbk?EsHbP"$*.b/kG+=m^9T0gENR?BOJf'V9
%M/9V$"cKr1B6q.(N6M'R+W9!n/+<pBigs'h.6cm/B\Wdc&%>fHI34J?\TE8KJc]]k4M*KU;OnQBG]a<i(74tDV.8eeEDm+K#h^aq
%p(s(Rm%(/_#h^aq2N*Y+YsL@P)m3E$"O"sD"Ct0W[EWWd>1mb02Vd;(Xl37VDYQt9kU`#k22e)dgfS#dN.A&%ZW(YJqRm+d1+chS
%;=U1h"!+iZhdT&i6=iY,VTG+Eg"jQ"2:C9ESFF8ej9hMQ[ZA6Oc+7*ZXk:-N@%t9UkfhKM#]BZH#G^9R#R49uKqLAfl$CW"f!N[G
%8gEt:qZU5SF#[kLGaS_AAq?:Oi+3[KR0?o/JX:_YL1(i0G`bi?MSI@:0=/I;W/[YE!'bq,2Y^ncUfd]^D?Dn]Y5:UWOJXi5E$qa,
%hHQW#j!OcHZbW?#9TsnW7(Lf.E_:btVirM5i]Nu!mcR9^3MU$<c^BSF&*&,a`3d2`@qlOCLnAcO4(Mft*:KgGB;[GCQZemi_DE=f
%0u!0;;iDCL'[N$("=hG`gi'r[DOm?41cp,"<,A#[]f<QBMRDoZ=7=r-kbUk89N1XarcC<K*od7-g#MED>WfEpX/=XgiA]P$9W";H
%V%hrAR)KoG@AQ<NN'fh;&Ad>_dGaTlo5R:2jpu1Jr"jd3qZr*ORFSo0"629qIrO:TE[GA[ThUi.2EMoQ*Zj$KK&<$&0H@@dV.-O5
%4'?H#aK.*Z"u:2b_@`5j9T:hQ2f?;+429]ucUf*<pYT*n@m$9bl&&sfZT,s,)o,Ama0;E`NY)MO=WCoe`u%ld0e'FiMdoHYUs.g8
%P7koL3O'3YAl4M$fOlhTLf[<08Jqc$Z"MglL/VbGjb$_c:+!NM2\[FMq6<(5WnOTq!oDgD4X(q"4=[.k</d#q/tJl/Dn'0/DRC%r
%RHZ+aZA%q?'B2K'gr)dbe11(uhF<):=RNOqNl?C.dM",(VsC"L3%OO!;6.XOKSka!P8J5\B[u)Jr7^A=R*O0DAqq]*\,']l--Zom
%qTg7L'Z\f%%iu\^VZK)\mD`_L%()VMTO9<XFkf^Xg$p2)k%E,&#FP`fLGMPKpEC/6(]BqfSYWdEIjF8ORA-L\32hd_b#b\?R$a,A
%364d;_H.,@iY65Y["__OP89(;Og6`nTm1-pA+ARn`h*!H^EE,[hV@!XB]dRa]X`B6F"qdYbaY)IF#.`Pk0;/`\V]n>VD,J/`_d'V
%kg.5`C?Egdgprh72fn.ombH$WlZVI:CUN/E_hk](B"m&Fpi?3Fq/U7e)SEU_1GU]A>eE(bDLZQHNamn@m..Xoph>)k7h"j'G-8c:
%4XrWM18-Vi"Fs(,$F>@KB*VuFIc9sH%`fJ]b&k;jnP5%=MM][3$`^6_38<G0aW$RXVf989&>34_.?n"#2IaXHS#mdo38o$`DT'^H
%NsJMA.[k,6hkWV!ZW"06iX1K]pBRQJ&q.O$QDQG\4`9gBp.H5M7]=:UXlQu"Zl$hU87]'7._TU\Nc39I@oV+"a;\p')coeN4XiA\
%Cn4,el#D5CK#[PS=AKs(0hMlYecojG0M\/R`cuJ08J[Zi,,Jf7UiFif1ca$(//2#mL_o5eWR?g75N\:P'g>*G1SNSZI#Ajc%[A'>
%q33Cl*nlO]/b\C(%YPPVSs3"aC!FU.C>R-&mpInm<uK\sNj0#*d;JtgY>sC?+W+/rR7D^m=2.Lh8Nns'Au8mEZAkTH9f025rd-QN
%M,ZtYD%o^B:;,[\il>:-9jPtiQ@1oNP/)Eqr=k*>(cq.E%WgIs&K2uNE9L@MJcct\H0BJ?<<NPLe1tfc&hBMBWHD-ZA%eLCU6J=K
%/Zq/aQEa^TrUOA@$V-[8a-gt\]4)Y%jVVWYN4X+h1CrNK*9/]5R9lBpT6R4P-Vu`s@K^uMZGFXAHDYaIrobaWOs>^Q`\E=)n._JT
%1R2lMS*#o;Vs@p`Z\++S?BXbBmH/qHP"?AK'aL1cEMCQCM"&$Tg9DG"/>:.7]fu7RiL&'63248?3-*?J>\i[:ilgj-'3"aDhfPjP
%fbk[f]nd/rq(^R1(e4>RT.R<+%>RSMB*`@+&"15;/l'RRFIdf,#M3DN<Thl.f%ijJbVJPa^-%5A*9"gAKY,@:Z'PbJc9'rs#5*cg
%d[MbrOY8Sh.=UrF'^I#^$FcPK3+SD4801RFfSq&-cf.F',,Id\:%I[diHQQca>>VSb"O4?BkOcC)4QVSc.MXrZckt(6cd6_kNkt`
%::5?^k=l:naRb4A#dR6oNHR80F6n=GWJc8]q(\FCki6ST$`1M4bN1r5#q"';\Z:CRP^*/&V-*_j&_un&8.4ZfVHdq=MuLn]#c8j1
%ih0=8Jl_*BO>R?j\C[Qlps),(4/gUk9ADTY\)Hd!^$c11PV1N>h*e-fDVcZ4SZ6bu2A1e),)gNoc%NTrFirgo[?.Gpk\7/"?AH;_
%_G-*GlcY-L*"X5)*R5`lXj?bRK75%MVT]aol+`t>Ds6*I+29DqV&QNM4F+LElg\Pop:X)UE)A7$#C^VWXF16&3<1t221&6$eB>"%
%84af\+"rNVs1NC`EX[FqVIl;;XRq`cg<A.3K*!b%?n4q"9j.!\)QS*S3,a9([hnPu$c'IY.2)N7pE,YgnK58dN6;6J.DfI@,90iE
%be#bG,D=WeqA_M,\(,L&,"IuD)>V_X@q_RhC/?`%."u?Iq2*UZhY?8`7g8\4"QT$!^"YsB6)0Raksehj\L1b"d\iQ^5:W#-1,eh*
%_BPZUg91`AkZk7:Y(6P6F'??o$Q&+M!-nga7MHgBI$LpT!Q#BZ9"]VdRnLD9`J-L>#jKAN%J871dDl2]1V]oUIVN<M@\?n3\6)q9
%2D;d)NTTA"SIUAD`_[c1+&+QfFlGu8=fUIsk_A:!6!5>pM;('6R`$=M\G5N'iqjs)"g:*"U?,S;efB'A(6-6_qE(,)f*O1YEa#u/
%2qK>a$H60dEFsFUPE/&(cu-:,Ps6Z4`WF>qM8"sfnZg$<GN/6Zb+]hL#H]c2Z63i?F6_Xb2^cKVVZ-:6VJ@V>YJ-(4H67oRdO^^l
%dj)k,<D-Iu@f=r%aod`cojV&B7dt0Gd3H,tJbqM;[@rGi1k=KM38>IL3#KV]k:@&do[_^Cj#.m`U%uj*pG'JhA5/q%)hcOKXTeFI
%SpT!KCm;)Xa$XPph3H""KHSqr6GW4[md[M)5dcTj3%Agh.=uR4)[9gPnmLU<156F"k<c!OAE^V)b;#f:m=`r%?.PN80gS;o-Wo@`
%kXtB26$em&K\'%pe?"q+Q4#!EEg]#?'Xl`4rSkE;^^$8@f8WZ_d4G6<46E<MH]RDQ(VDtoMUT6**1Tq[H)jAt/OO#S>H6Z(VRf^u
%gf"r!0pO<@9<$3*hlPF5!<LZ]M0-@09,p%<QJ2\Ld(./ure0?hL@5Q^V0PmZBWK_ofB9!Wr7Hk;;g00Gk"<6*A9Pt+E;4h<<l)2I
%[9M"%X^.!G;g=rdddU,OD7Y^FDW91E\!>SuQ<MRFWEa1`R[P+oV><o5&]:\KrT5q4JdD^mT3Cn4MdYJPl\R`#U#f=+,h-*M&IQ;J
%l3[d1ml#+^aX,(UNa:T4G)1s:$A\"L*JcG_MF=+aCjSqM]'Wb7M5+81-`GomVX1l_<"`h=A84GTO&>Y,DsQ9IST=,G.3H1pG.H:9
%r)ER#<fbb<r7a_Z"&ENDQ+jdjY\5\/'\iYr!pMG4/<))V36Y,eil[l)VqNUH@+@<_*X.g*6/]:oWTkh!X[_^/D0AjD?_"o8(!j;=
%MJe1`^r_aUJ8FeVm3%T=p=sS(3G-Shi6\&Pb`F:bP;1;AB&]UlY63Z>'BaUNJ)]segSd&'@FBB[KY)(4:T]$IZGIN3M0.sDl[_DT
%PY6.$FQic)$\IFXB"cl-8Du%@DZSG%@JT%T%o^Z4iPVd?I.9[YP,-N#=B3UB@"(Wts26KRG?W?1+RV.2F%s7%gW]32maVY>)-:^O
%FL]7<NWm&ge0ERC4;H-L]1qbVgZ>_r`Yn7t$kr(&mX(kj'MDo;Q=1ii@cF1`X!`(k7A+RLmO#5,U"1VYJStB!lNaguoR9aDDBGDp
%Z8co.3HN5hB9"?)"UulloR>[LQJ.Uc%/RKh+WRc!+VHN:<)Mc9)GT61%2=2g&6Aq$G#\=i/V>miEe?q#3[@%,d"ke+[oI2EX!UG=
%@X"5idUW'.Cp3B8YXlc#LRme8FNr4,'Ek=b+>EK6G(_>I5823u'3Vd&dY.7c_Q9O!^]B<*h;dh\*O![Y7#VW9=&25d#<p9+QeH!X
%oK-6+>tVW5S7`C`-$\f0%rS_!>H2$3+`<(D>/u#@:lDDNMaTG#>TV=5"*?i(l..8t+C9sI?D.@eZtb[_?dp]PX&l\s80W10r;02Z
%Dk]'mAMH$N&Mj9NEpa\7:eY-n8E:\^U;Q4;iTd)4;PAE&Wi#]];J3O<"c/c`:97NG=D8>;Sbb-IY^e%7fApGL6d"4Qb3>4SZ3GO0
%#_bhETP;*(0(2&3Touga;L'*<(Yr]f]'AoA#.m\U5:J3:b@$;=?rH'=U.>WQ%,jk>:a/C_-GUqp'(>KKP.Tm#*-rMWXeC!6DX/b.
%&%ces?AN#-M:_fS@O\R_jj@":r>?l46iWDt)Q_PK1$S*B*3`Q2`<t7tjj:$n0CGj&q<6t7E[+Qj%,[XF.Oi^!X0lhmT'3R%TI@*?
%@&<S62Ul',o"u-n9;U&IVrAt^p:+i.<s^Y(5pXm!H'C+,7Hqj>fNrf&oe$GpU`#`[5(a6*@mE[^[9<rHg!(a@b-RJ)K1(>?frc(p
%;"idmW[SqiHA.\='SdMt*Gl5D"r`>&7>'6&6Z2VYM+04"CS6eO<(I%B'l$aq+"`G/%&*h>oo1e)jopf)oKFKB$Z9qXJ296E:7!!T
%6f\eRf-t'g.".$$@uYrR55e*T6Or&$(;C=<9Ia&@2S6'3NdeU1^7J',9'&&)!"@"Fh+(K4NBt7GC>LpX!Hks*O]'ergCEWig@;X<
%mD4)Qd>D^K0G@:':!@Al\?;fuO:XdU$'b\ig+'K3D4]a5:[2=jORHkfKf)lfTb\RGo'XI'=4L?O=<8ZoWM)rn1^kna#\=m"Tt.mN
%<1LsF'<J.:.FB4JPi7s(UH*"rK7RL<6`dt7iTM,5Pn)Ph0bB;&Uc3bd8sI+lO5FUqCA7@jg1L5f3NPoZ>]3lt!j>Ad]faH25ZLUl
%W0t4JTt<"'PuZXU#GZCYefks?eKKX^qF7#86mL^<)6RghTSfiZ"WM2-#g7Dt`C?V0GdUbqf#n4]OKA1jn%,R5?M"]6J-\E[;*T\T
%!4Gr]%H:#/;6(LJ6Z<0*<55CiIL^.l3G:=M7'RcQkAcrWV,kPQ1iOur$MBje@;@sa;T;goOn(Y:7\oj'e'6DM'XmDr[&:U+&[u$V
%7K#Xt`=ED=eY:hXkeoBT@_GrlkiuY)1Y/9PO02[6^-n(@cCKf,0m^J'eq>ECp7,_F/]/[B3A532.=!(poLX4Mf@"_X!Vc$PDDIX8
%DVIZ71)J'A>?bi[rU@A2R<KDb:GO;!qt#1"k!:cU3*29$g@O?;)i)aCFt(3+iMUhn[XF?HgtAb.r:r.:>lL6d-<D86-'LtTk+GjM
%hqL?m)>l`Y8cGg]C6ubl#7^TWRPmB:Qf5j!/,1o5m:;g!4(:U92cr=pG4tIl144?AOM5U^0'p<fYFG/AUKX-_n`uksI/:"MJR8fW
%2/U$)lgS=s%NBnf[Z8(,_5HBBq"5?4fm/rW5CtO==DI8KBArPLKhma>YkiOOe3%$WY;B3AQTAGg_M:!<GOntHnJ/gQ`ij14T=;Ne
%i<KVefQr;0>W1fH^rD,6)1!SWOO%6]I.Ga2B@Lk.02IkDr8V$DSPo3RY,Ic][A3BYfB,DK40ueThFes"0->#CcWr\]^6!]p<^.2H
%Ln6(Q:G]5DSkn54goe67Et@,G.%ei<n^!hco`pIhL@M![D4IcBIE/g\CROjbb1<RO-Vtg:1sn::YHR"$Y2$`)^sLmB%A;#E*7B0+
%Jq-rDi%G)\LG(jmr3kZ$T%h%03kTu)]>qa<9k'R8X-9HIqV`R9Fu"!n*N+sV:DYhAlgl$SBIS*&p![Ynlh8Ho@dVF_:?I3!3HMf0
%I.ZdkgJTB:;*hODaD]^OL]k]9gTTj6mCJj<SDQIdN0f7)D!B(5NRdFp4ne7.dt5-A]pCr;e-GBXc_'O404#u,[os5>;Q9M%,CT.H
%=Z'Ep0&hL%B'$p2.d&^^RbR;6nsO,0#@DB#?XBjLB&u1&h(bN"c/%OR_sL+Y;*4aImJI^CkEj`CRf2N"DR[.Q&=Ue,T9[r#=^SZq
%c1U4aRVig_g$5^<&JrUFWu'.W?7gTR:>W'a[e\HKRPiYsT4K*NVQI8U>jc@oK::!Mmr*>DXIR\1`6:H0o?1r%3=e;tEj#389/;ns
%f78,cfjs[<M\_=p:/9I4b/_'Ro"gg!ad!<^KpZ/i/ejGKGNg?$S'Nb</ENdL^/eQgem,qtnCAL5H#bW"\+jqf3WCLOOF4iF09Zbj
%XQ%2HLH;SiLE"B2Ep7<6I<'W1Um>82\X?'m^7*4j+.[g@9<N]qrfTr\Xt;$QY=hZS9',8:Ou5rmWQqso,h;U(,H3=[IZZH.c$r?S
%m%TWLT'`RM40LeCDS/_n8o>F.3NM5)`H*iG[IrN5q=O$qFn/\#XX5hC/%K3arVT*)Ha3)`R6UQE/GX[erZSh!=J&C'>\g7$Hd9Js
%o&/ctEq3nkfM0)k9UCni]DGe&[IWI&nuVe$0);C<BKQ%XilMXQoARr01\p98q*X`EWW";kH$4Ru/AA)J87!%?p6%?lVj4o#<1YHf
%)fNJ<CPSm[jO_9Ef4=1ZIm04SFkUp.p!!Ej@V1(/DX$<.labR4;e9jK\aXl>flo@;<46.bDW^RE)_^?TK83*@RiBlgF'B0Ga)fQF
%DnjS/DiRWUnt06'F1WN<bB&"PSfc5u(AG5Ij7989h!<PEl.fJH)Z#OJccoac,VS:4/(!t>jt<8V]nQ_@oC\/cocn5g]4jEUD9U=s
%1`jjoC/8d1QV3\.o4o_no6I4I[H@-NF`lQ@36h9>T/Wt9T,iE,2kN0VEB+!r7*3dDS_lW!5PjkARm6lBA8V>5r:7c$O*5qhhDoTp
%oBu9CAc<'eq$"?tY9%=pk*q:nlN_Kd:Tkg%I$D<nYki(sk(0i6o#h+uq7?.4rc%E#_:HeUnj,1S*^4hOVUlmUYFb%jNZU-N4?-,R
%lob'IIWkA!fpI9hi+i;Rc%Fcsc1Zd9CF?NOgh]3+DAF#F*:,8Y[NBs#?jBGL_.]ZH(EOYLDCoC`X-87.Ro_NVq_+Qm0:\E/B+&Y@
%>&P0?Q#FDi'YflkKeF77Nu%"^L!!l1k\,kbDi:e7;i?q;U1V\f/oDZ6pP[?ikp>P*EQ:%c\[_\%[^p^ppuoiZ]2q(\MiL]`(9_$B
%rF.X.Sm#s6/Y>74Cn@gn>]\NS4OhY?VB0WhgALFoo<P5Vgc[bK5!8\Gp%73gBrV+$;u:2,iK`qVojMEMpYoWIp=WB/L(Cbb,aVD1
%p7!AG2E$kmI'HjJg\K)Q9D]hVQVOS/Mb>-U3/+3gMu):.3MREaXj"u!jbF__Ye6Q54^'c<p9p9ZIVPaGGJ<4.b=APdiprQTg%4=O
%[H,NmdafjjZi%4Ikpm.PYH'1Q`V8sS`lHldQ)Ds9gQgse"*`kW@a/&$>B<$2>aCok/%;@9moN]#Mta9qbL[h;\Q-7Dh0_D1\XNDs
%>cf&0b*?&SpYRf.S[mn"lBcoL[G%'22PHU19,I2f7m+P5nEBCGmJWgIB"mp$YgAnio_.=-qP`mdh0r>6]KKVkX.J1NXY"@kY*g5E
%l*^0"fCQD:jf@+hRJoKXqu#E#J*f.:I'_D<I]&uB1[k':`o:Pip$AQ9h5"AK/Y/fbp)ZFh3A4`(:R,9dbNj4&eAplja2aP4<cMGQ
%caKHq>!LeUWU'"Z^\G/Gm&7+;4o09"/1m\?/*cHr>NMjPjHUO`UNttf3d7`3^/B*M$6?I,h5*9uL9ZBmFnXm,q1e8tb!(/X1HE'X
%fc$nT5<@g4?V>+YT0-B?>IEiRJ!p9-QG6QomI6is@e-^Lo+0C5gdtL'[,oVK<r`)$4YefHe;s<UBBkhsCJ1-Y5?+9pD7u3?eXel]
%(UY&t=6HqL.h>gPqt<<SCT7o6qWdH?9=N6l3IN9E?-lr^+"ll5[;/52qImi)<`UtO%?#X`DWEV>-cYE@ab=_;?7Hn$mC/#9ap60F
%mH%du2;HKTQZ(*S/UhIN)mpEe=[Zi-Is>ioIf?ut^!((FleU.SJQ7$lm#+#Vpl*t_I<f@9(=2:>X6lCsp1O+#XF0@(UQ(PegK,=5
%q7.c,YGXH$Dr$oZ7d9P:%_C>@n?Q<Re?V13c!9[FF7V6_EGr1.ro2mKb>HP,.nfL1j(I$uV8l(bL#'e0ojR[df;j+fT<(2(RshTM
%;I"Zki7o$<>b!s%q5"!V=197<]PMCIa^'AN3dA3@]63X]+'E!P?E,YB?!GM/52A85I!g6Bh`H/Lj<*KT2X6>$D#J<crE7iR+$Mbh
%>"Ch-<c76fjJS'JC"7K98oGO'?Dl,Qc`bc(*]c6JLQ?AgAF*Cb9'0\jBk0D=G31UR7U[%CaefPKe81TBD.QLHXV]ZkbFPupK/`1,
%c9+4&k$B%);RqkO2sFTGoDZl*qVkOi4(GBDDnl:59Q-7u.W=nhcbD=.S*N"VrkQ3qS\I:'20Y3&b>3<R2=&`:md^C%Zh&11YeTdP
%Fh.$IZ!V+8kDgIicemMoD`t;*Pco9QS\En59eS/LfmWh5OPTkEmke?%\,!ju/U)[:`Q@Ah`tp[ImafRX_tVEB:YpL\HO1aM%DoI$
%g0:j$Dtfi.E.$qnn)Ro'AaedJrKmIoQ9<pZ.V5p_Vlra@s%?r[H*D$ih]/GOmIpkKqY\/qjme,]@;8$AH'nK)nAG!Am72q=[r3?0
%nJc-?B_UbHp<c=p;sRHSj&PuAQ*8HG3jb4hTUT"aX2a`#de])Hr)EW(*hQU$:QI"2Y@!g$]8NjgG1M^-:HfdOf2%TO+')1>e#/7&
%O#E:6:Tmu(Q`jHtBCi;_mpBtFIWtALea(6>k3\T9km9H+^Y.=*]3="hEk\&(d@d!#o_$c#o68d&gj.ppC\s+]r8X,&LT=(;Dm"$Q
%$ZB*25;;!W5/+aYqschYhBe`@e[pg1]r1<o+)TNa<OS7ghQs9Fb57Ojor%Q':R>9-QCekS+0l9NG99"Rf!dgi5Gf3iRua$D)j_XR
%^H1'F=?A+(T/=TUs)aWUGP.qGY.VJ>]mdYCZ+IruMo(sQe^)FmDYnL`b&0FnHJ^23%sBTj3)?0;SNH;3*M#1Wh4n&<S&\#hQY4:D
%UW^["j`/*tBUqFJKp*j1?`:ZnFc+26lS$4Y"f5(tS@r9Q[24_g*^+e8EQd%[j"'fuf>?(sq4%*.mF=#c>35&;p#4$P`AKX;aW'nQ
%Fn=a/]lJ9p^25]!g5"e7d]:t=mn;2`4Z#jI(e9;90..iB.pqSn]2*>3`H(MB/=/85RpYGUq=4//X8KENgreEAb#[WWj-**s'@4Fl
%5$YB8<js0V&(SP.ntc!#9XSUgSu_%^S'.qSFfl_0f8iZZ51aSNaVW=K=6oIDrq1ZjR;4(uPhUGKqKUT$=>>#gb6qDFs(qo?!$99l
%&XuUR*2WH<\!Lep.Trs\Tk))\@YR'#2o\VukY.X2WB-SiA'BAcE7!oG[9*(UM=]!JDjO\)HJ)#:A164\e"]mU/N6n56EOO1Fi6ss
%X1&C_!5)s)"!V`6"2m2K32%p]@7+.C^KW>".?7\L,jr!Eh(&ne_`c0(0>)te:`l'I$4UX=]#[#d\V#Nr?;pa/C9;I(W)_VXm<_hq
%G1Rb[l.l?[#"8/5k.ju$P)g04UKY4ha";Z+%G`1-E"FVj>gHgA02'j344ZcR*MZ!U$I/i;4YdJqgS!VUE"2(:UYWmGM"G9'O(J'E
%'mc.al-jpF.p*A?CQ7(IInr=f28c+RLZfG-dF*_<mF#_93Bpbuqd_CXd:qi31sY/mCXjVGW9tF0P"JfPJLO<">rb%bk!h``I!@U@
%B#7Eu5$O$:o;D'.pKk(jV"G/mLM(f2SU9fBoO5eMlb9R\(sZ,dE##Lah.cu/=6CRrWAm#"HC0fX]4?m_/GA$>`_9sX)`o$p2X1KB
%Blr/?$I!_"ELc1rmZ?;a%4FbL(HJb<V(D.-c>A.sULD)LO'_/mR]CmaiEjdX7]E]^1iCXW=]AWJar0u_]TCMt8.9-Fs0*2_0P&Nu
%*f6+?*7\c,a/NOhbo".8ff9L)hDD_Xp%,cZddU#L=W<!K(7NR%_-'"?*j->:.37_:bQ77Q8nX#Thqh,^Qaf_)e^cH!(5i[n&>^Hl
%+q3Ti7&bg`#"gpE`G)l\2snb!eL?agAik7F]Z4\pF<I1;.91<Hn1\ONh&mqNp^eW!G>QK>JfV48+'GS28DZjDcA%$LYIedJ,EL)7
%6@6T>oEGG'!`i0mFlOfZ$=s9@">04Wiqn^>9f/DZa;[l3J]@RBeaqQ!o"ghChA"#55sP?ICT.H<3c#Z42FY;M_`qo'6lh6K"NYF]
%3!1uGdHIu:W[:><;(iOP)]g;uA&!REbX%t'_hJM9U.!<S3/OpclM\M2k(#W<NeMpqimDZui8&..;M9\B7*i/'R.<.o\onesW74MJ
%X1*=9>H5I;n,u7T;5t/98i/"LpVgWUR$3h7/V7%ARlU3Ik8="='iaD-H[/Y4^W.`3nt:VrLQ!Ed$4LUXo*I#<Foa.9E7T4mqmsE:
%2<<3o:g#__cgZ#lC:`$<Tj?bth&e$(nP'fA=A$KREZ.faY+rg<_tb@!^1C\3+C-UHcSYGgG.Zb-6hEE7Dd1$Kh_5?+:Zr3Ino;U1
%Hq^-iLOW#[_75cg\di(hK^N.Fo=lS$NUPHRX&<%"`n'H\%6X2u,9]Zd5\UgV:bJF9CHq=h#C:r6p<hiMDnb6Sde2Nh_A(Hm;ml+I
%_H"bl,>21:U>qT)V5[-Gj`-!ZcQ8=kDU8D!'g*pA_&lSUp-JcU-;0+YHNgVL&n!+1HLutkg=Up)K]RJbFuM>)6TL#>ZWWo0=Vo>Z
%\"4l]\8*,HSqg%QV;:DqYV!]sJoqbl`[<4n#23H()epa5Fq+Qa%JsIHG,85^QE)l.9clH)9/hK(LQ=pS'4YJFWhnLO(;CMHr1;CY
%ek6o7*@X)k7<Y^X9WnX*&"h=^mki'4;R@LW':G'r;l;H9OK[QsWTF#^L)O_4/@ARUk+:?fGio@NG/\qn1X\Z]e"KC[6+rT?`^/\X
%L.I`2ghW,;Ws_e&)5bPVqOjmh/Oc5HCdUKcV^q7.SBM<a04e8@8?AfG9UQY-Z6GsAD;-3^Js]t^!i5.n.7'8ME"dW;JuHg#C<oH(
%QDGor@j(RRAEm!DH8TQg")2p&qp5:%ZW!<l814_JL4U#2VTN]]2)HP/+PRMl)i0K,5\HfW9BS8MK%^PJ,?,(UV1PQfqLE!'5S)8E
%@<`o4ia;mt`2Fsgp,o9cF:cHre8A*9W*,;QYJlp8GZ_)1=B\J43N%]A/#niU<EmEUAo6"K_8$:n=gk<)iWArqGil)B!1aOO!&Y4S
%BUVY5YS>;@&r'O<MZ^gMRp>&(e$aN-\eg*AK4@9%@*h5YBXib':g"cAd5<//cJfTjDjst9'UN\;?`F!gge<"<Ph29O0?%HNc40`e
%Y.ja'`nqpQD>9p%hGPrP'tOs5$;1^(joNXJL2E#EVQGTGTI3[<Y#&sUH8hQ@%T3]L#HGH;b&P(ePKFIc"-oN-H6UiFdo.t!H6O2b
%#:Y=]m/bB9<)^B-Rc2E9"[egqF:eS"A"a*TW&O-b'Ij\'FlJOWRtcW(')sj<@3#c@(ucXB19J:Y9iV%325S,#@u:6X-,ne(H2+kj
%Im%@VQ?bD8E):=LSFR\C^g/E=pSl*K)"lA2IFQ&<WVkrO^g0I)gp\K>3s1/cJV*0[09ILEi"#?u04pVUQ(XR,82r$0`[qXU#`]0O
%4_WQ<H5MM`S:NL"7j%qGM@G"?Zj.`;7"^4\+D>!,']BGq:rYcEE[Fru6'[\R1hb;*KIPj+0Q<k?dJ0A$GiV%&>#\oI+<n^"e^@C?
%!\+>DKL'W8fV/oL7p_3@4VWNDHp[Iuj0.\N*.lG#Gd/e-:pjE<J/0rC'R43fU',sI1YA@tmCiUZ8^n/m^hBS_mR45T3=9uo@/;^4
%C?Qd&1#A`W[XecO!Hk&FfH"Ch:"hp4FY7"]UK\M#HGKU!fKaMKlQDt=2AX+_QI9V,OaSWMEGhY@VM9U0XA<-PD$5E)`WWJ!Lo$K\
%/Q)s?'H8co,.rsJ<!=;>@#M<$`p=B[YSiD=#8P,9p7WnP%5Xid&538f_Ib,&oah>LTobT1T`21=;5hFZlb]Pc%gr<17aRe5MtQ,l
%%ZLIPDmR:"PHPQt=<saU03%SA21h)kFCV=u"i@3Vb\j9i3]+\oaE9_,E/+q#:EtD_LB2]4qO2$^Wn?&0UDUZGg^^Ru`M>(nDJHc8
%(Vr?A\.KJ^7M(./7qe\*5k(2Q`C!IdgcA5NNO'1\Bf:hmXKG\Tdfuch#3k'I:f&JIA180ckX;@,(kW9O';9;,:a%S^%uO7gKBhB(
%KV0geV\kAJ3XLH:_1[A[d%T#Qe9Xrg0PGOf\'0E&VA)\'j+%sf1cbj_1dkR?W`:a/66O02(UA)p$oQ!=1HYmHkS09+Tl*"iF:LEH
%F:LEHLpjUM0I.K.#jMj[e=).r&'FhG3NtBF:RKfi#9G]_#9G]i=rWh4r6R.=!iO6R_8J$l>Y-!.":Nl5[d<K/GbF7GGgPY"GgI"A
%]hZG;?o0%*2sa@^*caDW'5&*KDkD'CLi/[dqW]b?\jhkqL4T`R_'S5)9X`2_iRHUe[h<@FOgYN\(_kQ.'K6^A.EGDQNksSF\I_=*
%96GY2R"7<d^4r(40Rs/I(@'KR@GP=AI_c!n^U\60J'FFhE$LS##q<aYEk,.fFr?*.cSA!:pS?n->%-0;iVPo$mofWPHC/8O%0jLh
%fRbYbWVD0ngF7Q+LbJc:%Bt&ej-hsr03kf\;:.\&2_i[>R*Tbg!a5+J=TfQne/:kD5aJ+q,;LN05&qB>UrbnNg9g'c&/Dcj:_Ee"
%"]a/odA[JoCg.97pVKa=BGb1lOskkGQm_u.7V+]YJeStmeDr:t(#1WX.oloYbc[ET`&;4"ps:c_m?@[b*.eC4oK*A1][7F>iq&(T
%q'POV`:D9j+Tu_dDg\`EAuC6%WJj?k%d2%'DekD_:]EURRQtUsGBCiOB:g,$-4p-<`3a7Kbg?&</.3F1pn1fZmKm?,`?5!h'#\0,
%BGSW6,R$R^)@.aI6&8[R%2M3+jDpPa3@0Z1:tcuB3QaKR:[-(Y,9Z3m('67A16cU4-2abS<.u+(JdXVJ0\8@<S&&cc:a%rA+%ej>
%PCm^8"P'2[_mI=PKL'W8U_Z(k5Orh/.T$U8nHmTqNkZF+du>'=&B%EG.f)M)^RbD0%ad#ckWA4S%+,)FI9#gI$i^flk[K`+WWN[C
%De-=%6l3IfBiG3POYBTDBI:eNc-'7e4.*3F3WOQNP_I+h1n2Ym6O'>t1nBPW6a'>3Wh7:aVQW9g_Q#G@_]UZ1d@E`#1]gZo9bS!4
%:i<'G",fA,KCb>$Bpa;0O2V29,3/BiAV<B+\tt+R#)HfBMs@U/&BGe![2=YH^roTR`%]\t7u&-br&"pKSqM"UM_@R6\j1&r-E-iE
%.R;&AV"%">!q!&AI>9tB)W2)Bbr!5,a;&@gPGJu*YBLu:!7\i7Fd(rh'"XHjehRFI;4qW:P@Kh\_'#MLL7fY5D%ktSiut(tV)1Of
%$6:3]d)-EVbEgf?L]A=4aN@p61K'ZNWsPYj.B_k_Je]u[nS&dNmPa6C!28RdnECpq"[J$>CBd7TN)3g9_Mfm)gd(r2#(l52TJYeO
%'In))dX__-L2#1jI(uNh%%rJqp+tJcnp>XSd0=MuHJ1X75gcS0<oDlc"rmoF>B^J]NOLsY$VE4'JGH[Og7NG5l3#Md_5=X9i!AP9
%]6>r/qB5Deh#01T5VNO;K-^ud9t/**N?"dn0Z57O6-M/[@>3Ik1-7a3QtJin#urer=uJMV(kSb:dpSo]lpS[c/uBs^U[^SQ;:cSE
%*X2dBg)^a5k!N[_=cn.[JDL;#3e0C<Z@ajB*H[/<E$>PCN6h!G+/EsPDBPFm"MGd;=,OTEej.33#>A8mibbJ*$q\ht0Mm3"-OE4Q
%`F6JT;H=hQF4W7uAJEO$0[11@d=[[)(^de=3bH\Ac%1m03D5&&Q(UHSL_>Mr;,nG7Bm.6LJA<@+_gR2'TtuDThP`fdH+7uoB#sE1
%mo^F94!]cZd'Bla";)JiPHElJ\J5/I`:JI)ImkKOZPrqFQjjmI$8!#IU4Wq%+<)>iK^K/FDK.fB7?GL**CM%,3$LVm*("LfbFtCH
%".-q(;^lCPN75,N.^G*eT$7H=5c6n?i#Vr.#oP&tJ-aP&6e4+TB^$oNL-ZFu$=sG26+Af5387,[H^17?FFY!]K/'KmU<quseH&(;
%.A9K\+Fc3[W#0]V3JgrV?2i1R0Et17A&8<"fI>+AQbYl3C*M\-6KrIuL114V)mCc,,m#i@EG+CN+Ta-VCl)Uu-oYs*&aBKaMJ@c#
%#tEs+$=\soJf[1QTN=fF('(;ZXJdL#PG?lj_B]bCirQ/c1l4Ns471e<r54U5m<-<3%+Y(FD%nK/`;Ob[iA9_!#`9`FTA1fUWIg$F
%"_j@D;\4'R-j-.[DU!j.!K2YXQ&og(J.fF@T\t8;iS$2eDAf,h_>o'.@A"HVW$r7ZDPG).qYSHabsJn#6m"%1$ciCUTRhPiQt_5H
%HO/0?^]Q!:FG8Hngh>s!Hk`BGilm*)PQUr?>=6,%oL-2n$-G_m.%tthC8ck)Y)_uI2,#(V,6IDU&qPp+LKa:Gl_[@'K*^tp8BrV!
%6U)NE"7ElL-NnqG0X<+96rTMD$Ph/&a+P!60!38aE[`?a/%B6o..00K0+G7%KqOfDYMk[@CNtR9LP6QLE>p3`iB7u"T_R$A_$r##
%%%s8ID'334$"gIlpr%2,)BVoaO5,LWMjgM6FlGbG%2;1.#QMCU#IYpDrd`/ma?qIkfLNX\m=$Wf!FjA_<kk:oFSA\,>d\gMCD],$
%S(%C]@hkC#UW89C:.V>C%N*G7'mCj'&@og0G&/J]irsYj@&bCc^I8CcK<2MYG3Ao:)V"j01aMR1=&RM,#`,6CWCM(2k1n[Jb+^qI
%CDM0:@!%/bd6Jjq;[qsk*u**'4uAu9I&JF;]cOiThDdh_^`.5`#C'p9)YT9]6+an0"2Gc'qJSsNFMLQTb]LWo#K5$k3lPkh\NB-_
%JC)3PH9LNuBY"CBdaJuG.BI%KKaqhd%H[X)ncJr,fFJ6T4Y,@W,V\<Xd=hIK@,t`\5fZ(=LsM`H94cO+H@@5M:uDccd',kKJpJgL
%SbRm%6-%lV%q;BAb^>#155<If"$C_Mm[oV'dg*W^+,##nO?NsG"<i3OS&KsJpPn>I..@O0d#_$7K)-70d"u\j#GVV$"JLs5I"IHY
%p7NR[mWB-DKfju!1uoX0Tb>=@-QXFWd.-ShK:.3Cdg%[W0[g8)+*?r+l\;C-#0D;4TFFSV\X5DeWe)*(h9thY"LsShEh2pV`5W95
%^n\9SIFL+_i>@Gk)%`f(3jR4e,)Fu%((m?Pg'E:t@V>h=M9"-UDLmJjAQ?_1C'$[D_Pepd)/\%0Z4r9jJ_DlpN6agrI(2_r;"Wb(
%T(mF*Sq*hc,QU3A![BWX$Pp5-&-=*'$)6IZc32Q0Z#s[:e#j&?-;oJ`l\?Ucdf-n2S%YI^Yc_PQ\pX9EV[ZHiV%#+Yi5(dU3=H2D
%<0(9&DW2g1Yronu[-AcKSB\QNSOu"?8K;pqSk=O]kKr]lH<f.sOFSfKH'S*q&R.[L-lFLPk)-ebd"!/De<FCp1=$([,nLXZ;cHb/
%Se,\1hk\YS*;D<LW.J^.1,Sed)>(qAS1_7?jV)7],`lTd@HWLk\gQ':TZS_H'cG#u-#;G$%WigTEY]]'O!)D"4T;[+0ZY2t4b`*O
%SKM#:.o81Cc_`,2X9\iRd.D8#UkU</3h>LC92%8nVoHOD&QIKl5nTo-ir!*j:F`gV8Auee&>U.tGe+!Nb`i>;CUt_T=pci\Au'5P
%S87EA:C[Tgd*AJ=-Z<]S-!?!\6'MVIAX[cJC>dbj?5JJ'jpaU-dlU3)2ool'W2>A<N%K%p5IP/[/dH5sS.eH9)[+8>%N;$,#Q9!+
%f^kbFgcf9LUoUR1'W#Q7\[42>\fD;4L,D[I(rphC@.$i:Fe%JM3I\1@DX,',A7QNm.3$5G:8F^rrWG]`%2I@@Ja'ut2/j^jKo)3<
%d/Gu*%@EW*-"rU%KYlc7.2eYTGZk:_=bV2P*<<3D=A#eVb_g,71-^jT(k]XRn4g0,4IZeWl:8#iQ3Wec9@0!EFB]4=\P+>U.'tM]
%nIKj6C(/Wj.(t@$c]hk20c1bh+XfBTgrMbAcX:1N1G"KQ3$=U%_\=eWIgm[.J!pd0UWUPk)K\*W);&%M:mB<o94UgS$gF]2G^L)L
%2o-ldU4Ndi,([O2iP<)eaq6(5n9e,>p_,&5<'4JQ2/oYt([LjpQ:;*t@mNe$!<OJ[?_8LQVT5f(56>%d5thF_WJ6&1kmRd_)3[:,
%5ZP9JQ],XQ6.DAg`'[kH&%Vln)YY<O1-)HZbXhmM$6]aq&4/4"dXbL-,qku':n2b[W2<Nc6E\4Jr9-T$JQr6)`ITW:n)4UB@4&Op
%+>J""5/U2W^&nLd?/&S$\sF_CL)aM-O,d&!YaPbH;c*]_TXH"dN5lI'AC=1S!?+OZ*M6U>nb#TrK4-:+4*6_\S>Of?M%D]pS3_qA
%NU)Q4#cJ*;'Mm%(pr!8t?c.)@TN-PR`C"X%L(#0E->q3"oN[na%FpY3l`J4;#L[r.YuWGD+#Ul]+Gg.p!Dt&5M#jJS7!r+GD!tXW
%GVm'BCEDbKK]2!*AdX2('C=N)mLZY!JGf1J%/A"Tal"Sc'm\lR+`a=dVP0D,GtDG;!"9Fuga8;^UOm$`6lCV,3f+H]%GYSM%Vq?:
%)6S6*+_[=,bmNIN&2A*U;0FYD6m5sSil9eLKCj]PI3CsCB/#;^>ltN=8d!S!N?H'(-?eoR-rqZo-<LY[+OIjL8-'n?oeI@+fHA1[
%(nH&)%'58POoZl=GUnAs$-Z3`eJF'?YQZmH&=RnGC2m0aKNbmEE&9gJb+cjRk7fZ;0!YtL8t[78dhqm)i@lj.8tL9`(((=j!;"G.
%(gk`+Pr,k&V[!gcj$">YLSNcNdi=!HB`+O:D44E6k[^HdJMW1?CP('a"ooiMN+>(P^dGSnXu[57+d*o!&)l'S1_UQc(PR]YJ%LJ!
%K\T8A!8PZ;h2NYB>=B(BU=VT&`&DL`,KCJ<j]eYtPj\_Y&[0UZTV.UIEnWV?dI%R6"FVc7M>[uS&3Ue,"J6U?%I]*%nRr%HWm3:#
%dW=\nOl<Y,\gbo^_*qrAT+k'%2M=[m-F=N:HX2DkaT_kDM`5I'R$$Rh5n/3sQPjPHgnUpbB0G+2,iEcp=%ES]UK\uPEO=[5P\'XD
%&rueF#2!7>30bOD':G);?q2-P0Ydqp3juP!/R(>PK,L[)b%,Ho<3j``b(=uW1]Y+<#GDMQ)Opq_9J]BgeYB?+KZRfbi@0`H!JWlS
%do2]m9(ofT^7IXa#?SDDe4W:t_<?XuKA1(e)B_Vf9!JJGJ+Or%?aTKUj`t+\6fNJKNY+V-.E'YB25qu.3Ts=?9HQdr$6c&WV#\KT
%2JhGoHo%826&qWX"UZ+BQ<qtY$pbq^Nt$"'JkcG+&,rVeM>spjJI#pU58tHoTV)o)DAukSKD\+=g%_F)6#LZH-)E/D;IkXr,OcQk
%J*<?]#79``n8D"FDjh[T%>mNa!=b<PB<hqnXe2^o@P.@%9Z.<UnPT`0$*07'B&N8$#3@#TJefE0c:qMnR.sFj0i"%R72,dY?8*E4
%b4&\aN$90t8o#6])BQrn6UX*t*O`-0'3!>lllP[Nrs!(BA\US"5F%%c=rqpHpsqk,(8;8h5=;W7_ekE0P[he"Obl=.D;kXthh8!3
%``!&%U;4RcJYn=l1DSMr9u\MNIX)R>Jd[M?RjsIL`<2S<>E`]PB\mar@'p=0;TBSHXl3"j==2I'Ju3\>&lA(X2(D/:$C/N<3?^dV
%`W6WCA^_Dp6"l/o`Dq]:%nm+fU,JPK$>-+@`Y*UHRVg6C5%3fpBt*=d'0:@PTDd3SQ=:]6';ADkS!/tJ#?.4#@=f!!GcD9'.NUF`
%F%gG'U6j4GL#9+AD?H/RoUM!dbb`0-kgo27ZbO:H?sO^,<tkr`hI;,s8jm?4LQphg`XjE@+/!g,Jr:nUGTG+^k2PT+7AgtDd[!FY
%nOG:)`/:@3a-[DHQBZM_2:0=*C7rbgM)IV-EEjg\Z"e"t\8KuW/[flnh)+#BXU:"Q0:sM>*lD8hkkt5)CV1\as6FhZGY\MIBJEQp
%VbYG@4rHcPX8#-e98$gF<*Vj)>/;H9d,%^kQ'd0sMPc5%_XO?JJ/UjndF4fp8[1G5K[/JtEk6WHJnu@YM5J]_.e&F9)"HML3R#06
%aO3/kgs.o8;2Ncd:`q.(Z7m#QgjC&?L2M<Umrj!i6(/u93U!Eq'XT;$"R_[$5U+EHB,@&/!bC<`*Op%s;j2M?e06=s6^:;1($6L]
%NC_<hG_t&eM*FWH2'9TqqggS8_Ua?#+s*RiTTml"d"4N"K]WBhGXQ$G/rh8q&NhmE2oJrdmu2E!<8&>QkTQW#61U(nkG@Y_=5lee
%U,t;FdNCogMksi!hU4*27=p(lNAMYpJVKk,1g>)T`#KGO<0H3t<[/VdbscRUr=As:<IF(<KsbN#r)0;4NiF(ORg%2p:/Mo>P#2>[
%6A)Nha?XA!hI+.b5]O[*JTDDtet`ER1?..=`>lH;qea4&lIS.[0'ZF>SQ&gUN5`<Z6F1\/"sE]nVW974W&Cbt,bB\j4RsnV_PT;X
%;OS(<d5>@^;EV]F65QM69=rbe#0qr,-6-/g$p0cp*(gNq":'/`W^_Sn$$d$]'0VF!*\LtCd^G\81l3gK>W3W_W),.!f7EW,^P%7<
%a0cN)qL)m8l9NQ)VM/WTm9/u=4dI.@,"PX'[UOso/R;Nr"rAENR9c7'nO*\Mn*[&DXNBOdUjN7I0f""c_JJ2`?kO8#dhn&_S+^F`
%S3AYb3gslT5WUhL8FB%md*Ta6E/0:e[0du3UeC6n\`d%(BHRT9,emPDqZacgh%n)s[OlGP/PCb.`F^8S:o53d!Y*!::d\e\?!4$N
%5roq(#Vp+@Ml<V4=%j1eD+ddQ5ZT1m@G;f5n!K_,41BE4lRK&1-KQ@[VAD(!,5YXI&YeK@Gi/a5.L:SR=b[\%B9Ji/dWJIf>^iCf
%GM5_WOJsqE$#`WGK0[#hK>H0>O>VeY'fV=5I*[<J1+8BF+PA?edk7&tdBCrmi<WEe$S]o4`WIkFBj^okg(K(`ah"@cAW$thC*mpi
%@KqI^RUQl;\h<+W,DoqK0t>:-)Ano4]+W;d.[Ph:QiO+-:b[Iu&Yl$LW1r6_Om#/C.n&UX0gEFD"itU,#8tXdMfT%5.e6/Y."P'W
%HQXXXRdJ@e-8@m^cdm5WE`$WT6t)t5'[.14&ZESRZfP./<7bY\Q/mmJc3:0OSH(\a1Q?b4L@#?iNQYe">`57tA=u=XkFL1fWd8OX
%_mT#>&)!U%AXb"4(Dqk#f\SAa4<F$Q,GbUT`#jp\.4TIG;H%/TePJ8ibg'3+7_k!2?'A)SbMD`V%XU&bJs\%,oak[01=kJ>/l#S)
%kdWWINe=&C#Z>XU:QSi3rOSTMp&_*lb-1&*EsFr-I]3Ej6`)0`,'*8h@*GF^Q3S^t@`fN*f.j005ThYk;DQ@^e?t+g?re2f>llHQ
%As:n?FZ&VbGqZK.lpu(nUa\ZV14')&>%F\.jc%qj#gs1,1SulW$pfX;d^^g4iX2D4[8'O=N?U,Y'h(#Nl@A0r-Bs4-EE3W:e%H#0
%SnbV[JWp6`aM7rs<)3$%-<>es^O=OL`/7C)W/Y>2Q6&S">@\5<70U,]/;X+aDZpd5$jh6*Kh[j6jsGt^NN#siQm1!WALTk9Kln-8
%6KP9maO\=@U<0*dW!eeI)[Z\bo]FcP(!UMko;:,T&6TFl07[k7eI#?p69^4<>WKE\[jb9=W^N:pc"&!7oUsa,4dLaH"XE?L6EOp:
%IaEb3[B1&l10PJ4ANV/mU"fN?(A)+f-7uT"#^K,KnO5bI@8J[W6C]aa1u*^[`7DB5cq$DEH4$&(KulJEp0*]ELBPWTJU$egI8TN2
%"nnYDL;X4`(M]fL\\Aa)qGWMFN]S7L$'WY7@^KpiBJfl`'MB$h7?$jH@A&a4@J1%`OS=EH]bYT$$`!P:2$b[%7^mIrE5.8!5<)UV
%#/e):'LVZ(<2"ELlW3LgIbGalaE5EY4W+Dm>q7[f:#&\!7:)OeLo89bkR&[FQ*$.R(7ONEh.S!q.j6W[.%"WIj0c[\Ypae41&-_G
%R7sGO;iml,(="NHU-(peb%JXOI1'TqSBXm%:b%*X8L-D$7?E`;#+eq5RKSe>,ORqQWm"W9%ZE_&e'U:oo<&d+DCd2H,lpOM@SXtn
%3bdq'<,OYYGg<oM$JKNu6IefXR\>i<64dlR=d9WT&BH_&3PgA@P.1e60IB,&:0%hT<#P93XA\=E]s^tZ>t9"32:BgX\hsKi6-]X;
%MCh2D#UOAa>ZoRq$t$/*E@?I">o+G6VUuhRdbu1eKMGf4*_9d/#XRICTb,nhk"!KsQH4oVP?C\7jaJB\DYtp>?4>:6Z/Oa3j4H8P
%#<YUY:6T:Ha0`'474_.8';.$HQ!kH%BmCgR5e:E,?<qj74@#b26"5(C:R7]S*\X0<L`jhr-9?2'YA;l\>o92cWA$:q8OtmncOei3
%*U!i>XLoSslZ0`h?DMnu3P&Q7oW8BHgK$k\Gu1f1/R9*s818rj0ldRS5TjER8(P$9*@R)D$i:osXkX;g;"BDJKs6\U9HNnECiP%H
%64I?QUZ\bZ*_9;-\M#/XBT^r5=4`T^(:L/uY`bMQgg)4I+1I(pYQRF.=Ye)?A"o85Tlc50l;OPn^9lofXs/BM6p`"*[>)&"\Om&T
%8olh*n-M><:SG%r'0qmr,%d:cfV^'WX:l=+'Kqh`Agq&ajN)#K97aWaR-Z9fRZsJ":fA`S'MiLCj\..g5(L_3LJ?.Oen+aqT5>jG
%R`Ik)KBd`%rcEAU`LlX0V2&Z=<.E5R<J8D2TIj[^c]arNTOSjQ@WC^n8I/gHQ\#&W&Ym`-s%Y`^@\WTM"37&r/.\`gBhlsd0"THL
%6Tl,)_6o/Ckp079(GIjf)!2M:%k:2+js,o,i\DheWa/"V'e`0Nd0_m%0CXZ7^s!LFZ+McJ-9ONO7hS#fa?ZPS9kDE`O(!t<3m!Mk
%AXo=E2YYqS9LFsJ+352RV$p[$@X"%9pNqme;9n:eBZ4!T'QfEVMFgs8\9D@8)82l6)hFeP#K+H\kc>T%&lC5d9_P'6#LRo2BiGd"
%HX:[6Mo9R><<AtB_&6H@L1879%R&k18!lDO'R2o[PKB`',Y1+R,$-tYeI=6&eW6>;(e##FLClSt$di,@dYjchS9Bj4'#5$9.eos'
%`7YN&U2&eepF(km)6ZFs&YnA13#dsk`sfnTjBkNbd7*+p(aE:'5Tl:qFpKS+_F`r&M"40cAl>GtUrrEp,?2Q>ZjM^]m&d%R,PtlU
%!YIc)PTC@oJol5EZm"MF,pL5t3m=6rF9sg(Zm.u=Tff\RKE*]>^arK;/88'lgqY1<KQZf2Z'7I`LhF]s0c8]pk.Yr2W!4&sJUW:;
%)0ciCfb71T`68fT$DM"*gg[p[=Ac(.SB-umY#m0GTRB(OS4N'$fQ,G:67MIOpCNa;b)HIK$C;ma&+U%CL*4Ve,TS6*T:((K%7)3/
%s8Uc!QQEi',WYb*E'41?-ghT4eEh3!5koloV*J`L!%A3%W.=a=hg*F.hFhIDQ"25BX(o4mPI,Y^/Zp/_k2pU`\$oA\S`5&D>W[DO
%^7FTsHf/Yo:9j,UHt@Jl6nsb.B2!sl5k.2CNKh>/,6j^30uA.`,DBH&.mfqB$S=#7=+gY#^=!.h"G<cD/$E<(Jp(n$BBNsSK&9Ib
%YW*6Sr9K\'8^)QYr]AJCp9<quGh-N:QF)%9.=.gHX2DSC?5?//.k:Nrr&kq?V4Y.d;"_$3\h&it2X'rOhkT<JeD(gRLR%'>-JlXu
%0D"tNfsrQPTh_?7/_F^/3OKe?W,cH7m$'ae7qo#(>^-CY*$nSI'h&2Hg9uPhHj.c#(/'&mf/=Gm:#YD31R8GikaG9S.u$eZXqdbO
%k8g7dIh"D9BZjB7,=Jn,gdFLq1j]qk9C/6`;0Q@d]*H^EDU*qM)5DruJ)2'J)$X;Ul,b*NRuJ$!?.pGlFLJ;\B[;3fSWNt:f?kA*
%L_f:G*==)hdKZBJgF.>!VK*.9GkpNEimX&sF<Y;,4<&A$hK>m*#Xf>Q&QSSp76k-@]t<-M1+ZbFY.eU,P/&q"_t`5[L%a8I]g2f^
%s89AHijT_):td?UMeq7[[cs0)Y--H+4mXMo,iBr3_eTcu2XTLAUn5auWup'%06UeiCMGG'bGY3Xj!bJX6:/^s."=jQ7Co?:+?Fld
%).NGB*(/$>RpFVAR\!JnQ0MCY=EpL+<l\;'h6i[AeOQ9$?-<bTO5g*(B&`]]]$c2=B-U'[4%8JW;Wk<[oI%o_Ujqgf'CGAUe?5Bg
%4.!fG^/:P@%l]@G[G!c@CCWo9c@jT*\b,[Q+:+hY.C8`5Mr!b[a=FRrb=sIO-JsZcXl-`a434<G634C`HQq.3Q9DiZlTpubWn/'o
%-WJu8jao.ir5K)%L9*]-c_*K!$VgV(b7iYg^lt)\50q5opaTE&.P9g7QVl4,E0EZY1:=\.n)`G0H#!kRmDrDm;$[fP(SfFnj,F,"
%(.]e:)+=A:TtM)1BU_'*YAVSh5t_7HeQd5hG<=mB,DA%p\/j$2h9M/PA!b^Klm_,E-:iIr:mo/R!d,@<6o>I),+:B1=MZ@AbP&oU
%AjflShj@:9s*YN,Z+)2$'OG-,L"h'AlJdUd8[]A6P7k>t14^6f"o'JM\TDl]d8VF_k6FDW^36":%(a>(e(]V,dR2nsJT"Q0_fAKJ
%^XG<e/lO],>bSOLW]SPMjU-IFZ[PmL#m8]QIqn'`SXJ!r+F#C/'(ZU?;-U,-aA3a$Fk5dWnV@A]>?gd^<AsL6m]AFJe5G)6[ijq8
%p!Cg+5N2m(=4-t!k^MpFpZVUjb9M0L4DV]-Dl\pjIC68E!e6pde]B[uSUQgE)opQf8\L18eF?-3.</qu;YADNj,;bF+Jf47ro[@F
%qMmJGW(>I=FHtJ.aS_&'r2EYkr^b^h#MYX$]skTYlnOW+Dg)^Cj>Ln"O4+Ss+>KoIG4,mi9M53Ch'c)OflR"E=-TOeqEgN]>dod;
%]A.6FQe/t+4s0hdlfk^)A.#]&gP=QLnMZN@'^1#;chHZ&`9TcC435l/I.Ihg*qWc=;=dSsK@I*-!e8cAjHX*EcQ2*Dg[&MW3Gn?d
%<<MR_%WWV'rjd[Z7^i<F1Bm+P)tpsjJba>I8hDJ9qc,9750lT>pMkLQq1L^!ali*`1k,JBo6;W1bk5ii,bDT\49csQi4ut8(Mg8c
%qq$T-[!`AQG*a:W^Ys4FB-7#Zp%u^.q-Q@9rqHHkJ"Njba,@_.YQ+Sds4`&$p]'h,[o4/o:<>0gr,t`C>C`mfICf@5X:(@:]t>hB
%oaUroJ,PG_pNu^[HSjUYE`2$e^%M'lq7#8\lFRMk2%q[Hr'O2n)n"&%-p8"@iK7V5Ai>G55l5B9:sWFUMmE#f-cAE\>#Jm+]C)CX
%N9bIeG#*nhSu/g%b7Tu3".9TDd)O5E,HKe)7g#LhOXdsS)jdFrGR\Rhc&Le>h22+nH0C#W@l(7nJ7a_C@<j:+L76lm_Fc:JqTiqI
%`KdJCicd/]D,>:kqM%A/Q;0neBZhuqBl\kPa'"\d^9iD!1*Q/_i$jbTS"RFE`5^]a.mhSNRJPkrjTIlq*)^b9lnel&Oh;WXWif0*
%<skeOGjD>.6<k/*`93Bul%$gMpi(@;FHXpUkkK'CrdA=An\99/G^N;S'rQ*/T32c@qdQqW>>Rl(+TD,o214&9r"+I-VWq"#.%+&O
%YaE>S+T)2/0S5fA_9dfIlX/cKeTMcfH/pW;dTL)4RbBEXl.KE/\WsRPe]ks>!(_f?,;^5i-Rc-__3mH\<`MP]%qg+^=!dRi$V^u8
%[/JD+V0IaZ0t0mMUe0I7c9h%j[m!0+kNj8+2n5T6/qi19[e`iGWWo79l%@a$3!lI;\jZ0q>!7gq:5YM`.?s)_<Zq*21G,%+>+iG!
%h1E]:lJUS`c!4bpBMJr`O!9qV#UY8^:g1icEG+a[HRD8ILq+q"TZOhJ3Z"b,Z)IF[UZ8Wt974)0Z$M4^)qW)UeuGq<\@9Noi0Krh
%G`K$HO6@-(/p"2(kIhm<:Pr%*2gPfC3$g3%=D!SY_fHe<7_g=[pX&Skr2gt[eOWY.7:pcc'RE-`<38TUe[ad:M"W8sNen#b5RJp]
%RNORG7c.*bhBX?R9^ZDV&;L%:1qFq#)j\B70Y,l\^^P;2rBoAi[lY&8]OL,LJt-L)Re]<<h;UanQ1;<1X]6f!VmIK."_tiV%f3Z;
%JN?o2PS&^LS2ZXLQ?qb8a=D,`Ot$7UZ`a-O&cGt_'CMLeng/]#R8LX<.pO^7DDAUk\_O+rqMuN[UBr)A*OIhX!><idFD.9=(6Lb_
%oid!\@aE?L44]?f2JU>MVF:qE?HghfK6n2JOWt#sf?&?E0aM%cjaHV0fe03OU'CsHZ7iSX((["9)[RQlO#?eX>/hg[[6^g^J>lMX
%5`84)C6.,hHIf+b^8f("X_$66-ocZ1RNtgY5s>6ohb.BQSf1q#Qi79!R^b*S`=gdfZ/Cel0b%7jV+8<[p_eEOSEAHgg&Yn3.H$LH
%c]0WLct"^DPW_qnWuSKYcl,\Oa'fM<k1sML2FA[J(ojh]Lh]"]V<1c""73W+ZI^@u+P\p)PP0D(/t5_`S!E!KpAJGWc.Qu2TYoXe
%LQ\l&Lrjrf46J.C.\Z%O9'FS\moK/AW/.X5/>L.kXdc1@Wf;5?FS9$"f*j!bLGENqk1)lJ1<T'TV%YsU<pCH*1Uo@*c_DCs>)c[,
%KB`W0h,E=E)V)LN.b-^sH"B/'6+u4YFuN$(\)+RBP6V!-fl+rQ8U+=4rabufF%a,51SJkD:PPee0jY[m@)"\,4BDfA+/KD7'Y3S1
%3W1Y2rA\E-_N/Y)MeUf*ro"cXmd;MiAA+50^ok'sSJG<QF&Z#4ieWp\3hhC=2P[\>/WTB!j*nRQgH/;sOArLY%hdn6!CL-C3/\^Z
%M?1tY[om`qe1GQ\U$mTe$rj6f'^j;ZjkZ(i3o#9I69+4e^/m'<#tsCd03+TF1?dM/*@9cfZ2e@0#Z.B)PI>9$Z=*Se22[a:'XLZV
%[;Zqh\SCIiEcg8,9#SA3edaV!^,/E=>8^6]pRV>p7cG.%!(J2OlljcBQg9E?<0OCs555hQJ[Tl=e:U5-On*m:k%FX491:nV@S3.l
%DkA4PMJQ%oGhOp<MmkoMSmLk35$2_u2A.9Y;LE)"2DjV0^[iZ,K);CQa<kXtP9b9bh't%?``oURY]_Dd&p^<LhY>iiTG(O*V',f]
%4.HDup]"ILOA8Gb<=SSR80d40:6`0Zr0emC?r`>6l4KQ@Pci9:\rOuEXK=_GMm_R/+UZfqOPgojSSmp@O[]-t5MR[[,0.'Zm0bT>
%q59g;P%]B3BS2CqaAnN9oGXgS7GX3Wk"83[MB>MHDK[#I;SDKDDc+IdCrIQAf5;A<p/">MEeEqjO?q.g+a&gio(.dCo^gf[bBnu4
%mAqbI%B_+rnCHEk)7mD]-n3n[n$cuciU`!%rOF#%c`><m[%0OX+g?hEjGt.AZdl@MG727`/%De^r5'I]o)YU##X<._,>7V&>ZWU@
%ppP5X?nUM]k@sjlSe`($ptC\5Q1%h2b\:WS6ss/5,#L579R(i,11RU4>:7EsZ[aQY;FF#PB[>Y*>H9]([4(W[lC`LL]C(P0)a(lq
%Bm3+'SEstHHD/hlU5XrqiU\4NjPt!Tm0>*b35ohO(m1!4SFn(1O5e)l!R,"San9rBNPr.:93\DN."i)B5kMC(0.A#b>-M=[K`0&W
%Kf49s<N2i>9%r=hQ,kVD.mhuCHW(@_Uul,;8l;3[V1%4W^OE5QT5'Yi\.(F,4=W3_)Vj=*GMm1OiF9i"Eto(Q0K@'bdPG-<i)h<l
%Lo/h!n:4+Q?tIOO7H&eaWjoLQYmZ_:lUbMYb^En\8*C0Z<h9`sM,H=3#.0A2*=9q=MB>+45[-.uW5)@LcAeVD=)Bs:R;1n3l.9`r
%<+2cp%[(U,N#EOE9bQqO&G-ohiOL/2.`7G2_T7h*Z"PAY!mJUP<;dBRL%Zb\J`6nnKLsMh-2$!rV'tVLrhr[9+\0eFG1]]UjWcs<
%_adYqe.HXrI@,(+b@2CM/;j9]AX?+8TrpcqPD,L(CXZs'LSdkO6qrOTTea*p_ho6XGT(;+r3ZUj$^%%AYJ4kTMUVh=99+3m@s(&r
%B8pGW?Sim/;lM(C&R]`f`sq<eLfrOV-m<bVcjbg21@+"J"/7i"[f.P;Ye!sJ<\^P\jbWp#fg<E7CT@hKW:ipEB>sdiZH3p_Y/f2.
%T:L%@/o^F;T`3Mt]@g'n/9j@.5(.S5^5l7LO3dKP0Uu)FR6p(df82X*$.03Wla/3-B\Q3N9Pt"@Lb^Ndg%V?+GH(k0l\sbT4_G%O
%N-qUSFuJ^@):E8%a5cZu]8?YgRPWY4OciGe&6it;*b*7uT):.McpCa^:d.^di,ajh8dHqE;65,JB`qHP[n@"j-omD5e`aY9^-9.Y
%P")(NqU9.tQ'pCO&)#Er<j!ad*3JpcQ>=bq@X@'i:%d4\LcARt!Hds>*O+O0"e+\3jfID/H(fT!5*iA3iCt'-rX_HV_59Zd8(?,4
%G]aW?oJE9n@d^;3e@H0?jOX9*]"+EIY#2<bWei$O(tJ>HO@aQRq)\KDLKUNn=@h=H1INRgU:$n!Rsg0`b!9:Q'"^:!Wt*,C:./t)
%OJH").Sf+'U^KO1p]OI>S9*j?c/Mun3NZ_bl5[tJK#uM_"L.__+K:+M1,CV<ZuF(J_]47i;#2th3dP`%.@\J:S9$3!+)@!%UmcAu
%GG"%j/ZC6gh#o'8"?<V-D?&m+*L7B[_OH#.,@3E!JLC_fn&E]Mp9:0)JrjT(1u.S^E#CRWmkD$N59:9U?C*1-fFLM)Oc>L5/%&9F
%(o)_Mm3Y"p:.(Hf_ULs[,Ob%LkMbCdS#*u,3bq^\'$cF-`2_48,LQklG^),3?K'`=XqAbAG!.7Rcf%%Xl19;-FTZe9+,iJGB!9c@
%!b`aDGZo5>&HcW$'AoQX!G6-1Yh4U\*6D#@gLOk3(DV$VhqZV']tn,c`'Ks5''8a@[$S*J-j-]dR3nh<Sc,KL0:T4MGnYBXq*M!/
%5%d@):N8*(>Hr5cn#Y79oeVF?ph,h@!(eUN7?W%lb+@kk&sL\gHCWk]ggJ>uG=XU9_IGOGYdUG1DSS8>Lrf:o^a66N4EdOqC^J=)
%*P*/tkEB&EMT5(]5E<<?C2MAjqb7g]h6dH,2=n0G@%N;k4QF(@C!de9BBk-'[(,Ilo_aRj'W)0?=K!038!Y#'*E#0Ns#Jq/MBVEU
%F5K`>GSU0JZ,5gOHT!G4Hf-7S<a:3UKj`2m5^OFh4f>A$'=L#KQ"n3uoO]I]lbh#9!0kK@E@mi8/oB:*PsI^,Y,AhJPP)gm@ld1e
%8^K$Y"GM7F_KD2VB1fqe8i]I@hRb[V@:o^Hg,&rkdDm2Pj;F^VMJ4FERiX;Y)nWAJ*fh.nS>J\dia+Dd/<Z078)'5S'Yb"/5;da^
%$=A@m\\[md!NaF;4"C^lBR6TnF(%9.b0sIKDA%^q2ll2Ok?dArpDttT&TGB7#N;arEZul7/^Jr9o`qJk/U__]2bK<&jcgibl>'"0
%p>Y)*rdme;Wa]!=^X#2*Ao\T"q;u<0?:m2mU^hT$9!EoQMqB^nP@@[q6]qhNp4:XUHVr7hLZ1Ks^0fq\)eR54g9f:`k9'P+DP\HL
%K+=VMEXT_hXKH(r'WR=X4@Y&Fd,uAAQD,d/-WgC6V90MWd_eEg`$Rbio8@@_lLW?lD0K@W13c!HWjTh?J+b'npRf0D!J0\FVVf)L
%O\L=uD2&Fa&IphQYB`O,e+48!\`R8sftHc:50&euSFXDB&-I3Y?XJ,rn(&%75)cB(1JNXU#%qh4C7GJ8KMfdM'!^)(%aMmgUaV4.
%:W#;n`%c+D2Os*`nGHD`)b(2O+,t;YEB:4[V;R%-XpH%+29/*F3)GB8edj&_?fB*o_H'U$JdXjbP"%Bc%#3$#+;=Xh\Z2a0X.@OM
%9aFMf&^f,SY&W/KOda%T6eD-o=LY5JqDnk(L2+AF8$LVh50HN`6r5shS9'fUGFdp!pe=@5^H#$C2c]#<j,>+.S8P$<@6PdVE!iSp
%:894Gj<ra\-\A.e9?g11i^uTT3GD2Ks0rLsrqb%F^.C-UW3Qor_XQ`gH#[_.[:oe.%\FWQ(c7"cK+fODSRml"l?H57@OmOKEm;N3
%Tu64?_'f14=WW[Oj#Nl"Z<8T#Su*8#B/`%V1#Rf-nY8A8:]gLIDS!3:K'-eWQd3rRU'/f!R8g5Vnaq[j=>=b59=c\?8.%,QmC(^A
%3KCT;15[EME?2BH_^.8(7DAJmELsPrHW.4P%U=8I+C^YTkKt2FDQo83E'FWnQK(m#JU40>efM34jft]G`5:p<-rA\2JJ4kq&8g#A
%]b<'WUn-O)/bf_^"iS3P<nafTHec?8DBNLP`es'lq\Otjr8#s$:mc0U#0X)Q)ql''5XIUbT4u8?<ZX9Pe74P#.<4:d0Q$Q]D4\,m
%]@5o(PF?qcX[.;?QG1%a4W#hAOT.A(lI;%Cq>;#Qg2l&o`4ltRZ826+]])s^1ldgh*d$2DW#3.0.R6+2Un"P.T['qbC6LXoWqIQ'
%18qd%Q$r9fD<kkOHBK@QVMMd@YEp2r^jZDjh'5Su?@NU#I#kM"/o?.M$uY3k[^g=mp[05;rRbu)J_b+t\d(Ca#A)Af+R;9qQR9XF
%GDjP/i<A]XlA0S,X1Xl:_!;Yf4P[]?YXeQt9=h_L/]?D5?iPP"K.H$7]Y0.dj_66Xqe?:o]#>"1MUQLbBbu'j!b)>:(5Pr4A/DGS
%GAE3$*dY]WKmOGF=,n!dHb(4<>cGNQXK(kfO<NFD+m-r;@bLLrp>SaIn%Aq"p&ZCe,ci^*LT1=,o%L/";YL0kg8L=FJQHH:VQmiI
%g+cB&F_H8Ihju!4nY.Jni*"S/\ndf`D><O_+^7Z>:D!-C0ank;\UaJ,NtKH1(fAd&n2;uEGdiH86k3Bpi`V>^P':]jZ"J;$"WZ^!
%:j48fc:G/fGVbVj'?G/)D591dHW@!-7$]<Al%.?TI'C^>p9EH_J]('21Yu0(go4f!r^M-?gn#^tn^V?oQ3TEJ].*@f6Q$TINUrqT
%hn>@qIiLcBJo(ET=?:Pc5%9#+!gUFQ8%'a(0r7iZT4'iDc;_ZT?1ul@okI]'npsFSldCI.$-GV5C11[r1*?.pZL'N$J#HrO+RsH?
%nRXLn@uW,_W_9hpO*'`rPaZKB1i7o`P[CPj&NcL^8o1b:2$-h*%n':VHVKP(ZGu&>.U;StAHAOmSi,ZBpD*kX2A:DIh8e4^?#]m&
%!kh5`cPDTrR[R$)*e=Zl#X!('9eh3gOk_t.,b)JuA/i>+l$^8bR]`/$bD[g?;c1#E@Z,,a>,Er8g-0[T;D,IU_RQ=<P'B7&P,$'9
%`aLZBWig7qfU$5RQ%K^F;HeA^8'64#7kerWPT%;?A-%>,h)<;9j9/<8.)1,;92s3!\skCC!g^&gDjpK)DnPsBGAchoY@kpLHkE6]
%5?DePn[.[pmlZY]`%8e>O_r(GYdSf4KuaYCZ(c<9O0/lNMr\+3G*6=ZY*R^PB?IRJDOfGDEpSP2`Q15W"&m5Ca93O77Wm`i//TYh
%]t&Q>TsFsYp_`;ED3"&2=tt-[M@10FoS)DZ]iIX$9VecG7no#5FkK;boZJgB7phU26U*Aln@"JJ]AhZD\i;;[LWEtLp6m9g1(dNL
%U5urD9@Dtn3:Lt15D/b[pXEXC)`PgCcY%o#&`+KB]4(e&r7t2c8dVt7n(t.EQa(r;<%4f"/%Q<,a87E_F&jQr>KkLRLGF.0D'Wa7
%E8c)SEcF6VZ(4]ZZ3,)1pIu8%Z?+.8]C>ZJ"E*1"CTm-=flKea8LgtV26r"/\)K>P<q+s@bNPLSU466g'1=PY]uiq=`S<H)G6s3\
%96++o5K*2(,04Z.8$VE;<gj@rS7%m\5<IVE):<K))-#Trb"n%SAuQB,TZE9_or5,(9EB2UnWR5Y%WLg)l(Eh'IG';llpA7QQ25Q$
%-RF$OXhu5[S[pckbIAIaJ.IIZF<"1\M!O,He(laIq,&_`,8EW,emY=QB5ROW#QOi7hu0dZj)3nT*V"1Z@EjD_Z6N`;TO&meSfm3;
%N!C+V+#/pI,(B(HZ2=Gq?#A`dB;?YSTn0iK=KT_kYa7G\>jP*%I:u8[LM&3'@a>K$EZC;9,"J4HT"j_Q@m<0j7Uo<DQqE/4EaM3m
%3aD,%+[CPN?^#s($"T1(Zn,1:>q$-39iB!hLDKP)<BTdCYV:$tb>Cu\k92s;lmjLSht:CcWpE7uSn)B%'@'`HaMb?^I5QRb;/'db
%/!bhO+"@^lk9(;qgjWa8*%pE#E,n0uoCF?EU=7uW*f%P8<g:!jq"+F3.f+L4%'m.OP;X*]@(N%d*3&?Y9isb_G[U76,-IcR@Mu'+
%iJK(ON@n,R]T:JqeZhj974ek9<oW;WaL0c.M'B"_gVUAa*#O@0>LB+8fifs;L8'A"ffoBr,.++M_^YQBjLEKgVXJABG5LpD[63MB
%fMT+UA(*k7,>sCEC[A16)%eOa(GdS1<#uO$o(]ohp(\rW2c\gAU?#UB.E]ZJN;EHM:]+fEiB67uImB1q?&+:eo#6oCG$UC63F/"k
%"bQK&6UDKR:)A=f5Zc%MaTMtl3LnK=pq4af7bLGUeWnKd3h8%hBZ<8k@m[A]VMbRL03P9oBt@^!b]->+Dhu.)TQ"#qOh4<uaE2)\
%_VTf`5;/:kP8IrK=<&RB9Vk2F8dMsN19n-A`WY=,\1:"U/4R:"l2Fi6fjnX6\X37UT4.mNI_rXA<rL0EA,3?"2Y#,H"4:8u%/T,a
%f,QQtB$f-Xadl\3:1qQ+8]O!Yhk+:$pSB6&XJf0;#>FM#*1*,@+<l<#D0Jg*Y?FVk=gqNPp8/R+8eodIO,cjN/IMLICO>AF3[-go
%B=W9QMFZ4Uo$]tf2WIm%eeZhA2pt#?Ju(,[Ls.C6*5q93F?%TI[TiZ?@9].YAQGA9BSIbGm)3/Z'Kf(km,<D-MJ/M-D><N'%hj3+
%>GuG3kBSHlCiE^<VLTZ3n8LP1Pc[]!$Z9**726u5R"s-`KW#(a(X<f2Bdnck]>9HF]r/99H.4cKN,jsO3@r@LHGapW?*@IB]+!:G
%_Dm\O4?jc$:<I#5n>M52Lnujr9Vr^EB%2E29W"c#OMp34G'`4sh`=OOn`R,?,qfk<OAoT^U*d,Q,h60a849@)A<*>2DIp_s8\a7E
%.S1WC>YoCIH?5jmBtC<emQab>QCDVA5Wk&dYq&WII(uB>Z\q'A?qlf`ZD(*i.d]fpWC8+,-Jg^%ro'L:Eg=>L!js&T;p>#>a7L:m
%PDVH&,Z7n26:In'H75k,s1b@2W"GkRlk]!:qB]W)>GIb_4Nt0.Ar0brpfU+7Z`A!jo\Z%S+iTTVIU+Du@'?TWL`.9%B==3o_If8^
%Jo1s7%XHErXGEeq/1Q5cN`&EoKbLug#[\$qGFeVcLD2=#H$%2Q!A0)O7Ahco\]\Hu9N@V7rQmuQA7rc$o_XpM2jI,LL4OP4&HZkC
%@l&[LTOc)s4<B:8Y:q_Q";uRWBgJ[2WR%d6ciSa9J9$!6Ds;s&r:D>T9mE#f\`Pc,aU'Ja3`*"W9MT9sQ`hhm^Q2iEHF75Q+tMt4
%V3q2G07's6E]5ZF0;+^1l8IDC3Y-!.(\H=6nPdEf=$PWhV3oIE0)'\)M.u^,alHD4Rb92ukq9Ea8mGW4*'OWSl9BX%BLe*eIo.P]
%<I>i4pbFk;Bh5(XLp3.b<::4XE`ts-T2i*UmW`i[WS#Wjb9WurL>RjgRm\4^(C/(m)t;^losh:Q'6t8aeYL/sL\COQ/D<TWRNIIl
%.7AK_+:B[Q-XSoq'nO3mCfg??6_IRm[I^_TA.8bgAWc$KX:a?u0o.^D^*\.*Ht,DQlW"l+cB\B!fbcd5rP-k%nEM\'kJhJqAm[%p
%nC<L!mS3NNOT2fYn!*jr)oLF\?ndsh:D&[OGN7s>EQ*&E#chnS-N39e65\mB-4Ah;)Gi586hY]80WL!^n.q-P8OX%Ro$'Y"HgE80
%RLon0GSkS02<uRkjQWSNbm$.n_bZpUGeg?XX.qqGb?B+Zg/X_mm'g$nGO2DT;-q#fH,:Yh060sV9bY8J5;tgN8r%Aq]IlkO-qum=
%!]oi:KXZ+5pH74@D;;NZNikd]0E_TbOQiG3Gq@.I(i"`7)S?%VDk.o]=\/=uA/Q@;JrH6AqB\n&(0-Wupj"?:iT"5X+8Ht]Qej\j
%0$,7+o8CH!*3Th$#O*",2N!M#WogHN^i1&PW!8RZP,M3X+799&bR$MUG?Fu>ObB3'D"8554Cj`-/IF*On??15Y/''o9u'R%oH,E@
%6oWZ;5t"uONTk&#1T&/3I6[DW<7F46TAH?-87Iu]%u!MQ[tc*+bf[FXb%CXIc:;NF-0IGVgK9-NmbAjX[oVAQ1`aS5)]pS"O+M/V
%c$nP5?[&e<dB%]le:Q5mnGan^_sT'S1>l0>S21W&h-T7M?rYP*'PA&f;8n:CiLg09VN==M@f,@p&H/.p\97;"7[_oj;TQ^,a[hg9
%FV6g-6ZH#p!kVE%.r%<3Bo-M6/]@$VO5;NUcn%gbW)=N)lpeXNG]Xk?YGpa8o<8'$h99uT9cCcr*/Xr:M?ZnmRgbE4Hm5$biB*hd
%EGL$sG>D(7W3>UKKX+(3)G.Ja6Vm1FL])0o)T/1GQb@f8Na_d`CTDg,M(Qk^=0@IHnjjLratLI39:t&1GPq"RT8tBA:45a4Sja'<
%]Y*`]Cs&8=+0IhD3*N@L[8KY^>'qQNFrhia\Q+eD5GEUZ0$Oh,/)AUM)mH'pcM]cr.bRu$>Fprl8L%h'WW<CAK.KSDOEaLDJ_-hm
%rU=SnpC0^(WXOn_k5"Z*SpfjA#)D*>W5a$M,NMtq[&_,MVL/lR4sVjoGY.(IK-YB$"pGF5=kt=cH+_(V:+MHp]Th#*<$42JTbF>c
%`@7;:WY%t1C%bKRhT+?6\OcU#WX*E/9Q/#Rbip<+^\DGOMXec2$IMGrOGZFOZ:SURY%;mLO6@:cW6^7pd_#:6#DC';@6qN8.R_Jk
%k=VJk4`?NKD"">o37a]=?EVbI&PeZ$5Wc(jS3EQ.^(4fI2#+!q)&2Vn?'^[I+?mR'n+cRSh4C1Zg#k2D['&!0e(D(/f?KJ!-mpD4
%j)ZA4Mcri,G,4?\bJ>$TB<q0KOjnVpBLV#fUtgL.SM::Eb3?l4KT)#T8Is"ILj49@*=#Y0p\B)jQFq^g^c=o"Z\]1:Lq"t]=gEqE
%3K59QM3`h4MmXUa4P36.3Y/uC>1&^Hd7L^i&I)UT:K+?:SCRl^?lI&ml4+:kVtKbb)1M0NoU]'2hOp[8@EE,P+s@/bTM,m=4]lT!
%T[PACL,]BUBH!m-jFaX!pHL;V88:@Q_9P!hr=s]I"pj(@hh-1>7NVJJRFBX@cWhng2e$,LOtVlSlV;f(hRqM$;maGbdK??dU=\j]
%ef`k/;neHi3N<nYT[h4sVji,i.S[Vb#a2(u#?Y>1.he^'.>XP?@*Y'W]Zq=jicR=E/Q*B/6S:p/=`J-pSs7?b,Dm(kHAa/'<.@mT
%UDj2j_p6bs.1-[h;DnnNTt?B.'H?^tlS:32(;#qkIT4i(@7rlMT"+&&)nIe>Zuo><dm$_nBK>.R-SG-.M^L:t_9o$;h&9#/Gn=)/
%/6AAR.eZOsJqU!R=<ftCm3fU<E7HhD&]>IE>>"8Ddc.J0Q@m%".%D[roA`#LAuV?doSF3tYZeW<Zq\<ui<&X$Jgg.9;AEteq]ToF
%/"DN5h6#%&G+6d)[ZQ"rh0PHmr4>QZKcHgjb.c(.1u8ooO)$@g37o>FljFoLWIh:Pn/emuKbd3#R:m8g92guTr-Uu1AB+2W0!-*P
%pgg9S8X<eiKsI`%0k^Z.ZEChrM5:;$]&G5S3i.L8"om<7L,aMm(<kqXhrsgiVr)G#J2-%?.==J-I8feijbT*-`Y,*l*>0]_PU5[B
%D10rTd2nL1#Z7^%hqNZe9[=gO]/7h1l!UGl$?Hmg?&_Qta;A#7f+sC<8,lEX`/el/@&[!EC+)5T;PKqtiLoa7pfl`?kFJs-p/pB`
%l_?H;GQ3Vm,4,6h-U@@D-oi7H887J3hS%h,Db-,bo*EnG5S>C#F+@="E5GQ^'UQ$;./b?+0'Yb1&RuA08%dr$]&jAr"5YOk^W.]_
%<.^:,5(`[=HfB>.4Lf=2'*P)8R3;A(ec'A*nV0%ZGL7fsJ+P2S(8O;-5Y:Oj/6ffFhF(Du%%Eiq.;X$lmF]H/]T1hTh9t8(AZ,,O
%?+6[=!iok0UlP`arU_mX!Xk*e6;Kd3.OVY2CbY!NYd<Y5i^E)YXBp-8ZU]!N=2/4fVl&.PF<W/i,_'oUYjRjnfO;1`X;FeRN@D,6
%d4[Pt$c1Il2Pifa/N8p5`FKZ?Lrs@/5&\HuOrO6f&"t)5_Z&nt%Zt]-Ma?GRDbL0.3C%&9,["3o"mZ-H2#?:V8<<n:JL!M.!-QL@
%;@pJF;-ZiIPrN_TJHK!'bg%R4Lg14g0"n/FHX2*$\KBHLZn'u[L6sdnMi\$0Sufm(A0?J3H1'*oAF[cG"\W/n(&X$J$UKA;pF]r^
%hGegu?(-LR5GR3FYAWr;g%Eacl*/1(?D>_Y/UpK5q+1tOpVV@,TY2N24jc_Mes$pp`HHm&[KVFM#cSB@32?igKpC8>YTXUBK4LAk
%HS3WU7HpL6,Xh/AlAG.!g8q,Vd4NT4aW%athjC65RrE&8kZ9aD5U6O/;0?+'r5_E-@Qjp":,9*H47PXpA/pLmUpJ)Xi"=R5iUIj7
%VS.B,'&`8_PiHl;3qnX/1V--b`#hG44kf<NlP9)(d3BNLWgG49U+)pa^nQ/#J0[7VC7^*\)6iMtKfS9_Ret"]-cJ4-fdaYW#tP^4
%JK:"S/_*Mb+s5hghGkU:DMApH=?n_aI\_kDC.N&IOF34Mdi@)G;YA^ILh`=`;pd*%+kLkc'[I`]<R(Q0j8Q@ojGUjR/=TCp?h'^I
%'Lc#-gh#BU-"!r9Xhl%YaZA<V@3o+m'A6t(OeU;r:3BS]o^`!W._<C5ii:/T&i$"O993Sb*+eA,\_8NbjOJI,hp05kNk2_bX55N'
%o*bdm]DO9'jGZGNn>#9\*$G"n=TCI]='#AuM*)M=Ct&^/8Ag<MBhi(p4K6*L!]bRCV?rY9=`.-3D2J^S_[]n%RED+*a,$/+_FPOV
%;Bt2J;A[LYQ"jh;,VM;S,hIBCKl>N6d:mlRLt][DNLupXNGT:[4tu\@;*OC)hq7#9K>URc!SM3jN_TXcI9iB\JF[#b:e6QPJ$+(Q
%8<15dp/Fs.?*><4B$M#POm*"RIJHW<MVFp-9UCI_c,==lKJ*/lj*ikoN8?.!T\b^;TAK':rRaA.Ypg`f-j3)Z>c0-,cFH%4DaL8,
%Tq0#b9`Yb-Lj1`;i&h2l.Yee<)D<9&p0H_6[Gea$hD<YG5.^*gXf2Zp1pE\\?82o])A<m:!'+%Z^t!6$^nP:14bS/'",q)@+ZoeP
%jCr'-TM5Z#)*F"cD)7KZ)'J5B+L6F*4cpI(hQ3X438S-*l6UWu`Z8tP.,>,aG-]skJe[b2cPkgApIR8"]PsAHMJIYJPjHs*6*-`_
%@`[4I?$0k0PVBX:To>fUS$OSM?b6%aTp9?Z6.[`pfpYE/OC9#$C=O#-nl4d;8jpbc3KP<JBF8bqKe!jX,Nm2i<'A3R8;0r%:[)n.
%WUZ\fGu+7!N_4?<Z/<CpD6pu8B%rJ4Ohg%35p^,c/%iV>?+N$9W_Of)nr6:3"bi2<:Z9IS^MDs.c?TAG7;OdjJ."<P(PAQl.gBAb
%`=j+[a9g8T3tZ1TII_NHbU5-[&-"2C,OJnP"#rrK;o?P!GCVlY$7t%eV3\,.lTGJ.4ALJA,YV&_8tKErlV<UP,@Bab1EJO='o=lO
%Srt\<=GWP>]o*f[md:k<*Bl4.Z7hFl\lrQXG4Rofd;!U-WN&e]p59;_ba1tl[^=aejL-_u^UK8#)F5$m35ube[50j&-m[2U6_<9L
%3s]F,89Rb8^c^UoYS=GKGY*Y5:NqjZcuK'MX^"n\,2UlVm[JsF64Y@)Wk4ZT8sT^Mq(cS&7T0fcWdD&I`7J`7Mo\(N;#o50_Bs1l
%<>Acq]h9Y<<Jh*:$(3$"HC<TLVVh_L=@J&:(8qnpi`<&d+;`97QGAeA;:ETk7#Q/ri,7ZRc?T*Oc5^G$F,aRk?/KcoW>d>%2<T1V
%gFuU5T"'3R\q$"\<4`11QK5RTZWmF#;1S-4GRiNA.7G0$<PViCd6>-TG-]<dV@lQFfM--B0+^a8ip7lIbrg0-gu%^Iq>+l_oiVn<
%\e,\kO@&08q3j]7WZ1<anWBh&J/ie[_ojpQU,+sbM'P*igg#[=,`BklIR#V2n6D[n>U'OiIKkt,,mHCT2uqoV.4p:29eNT)G7n'r
%.KS[GRC6-X+HjJ$k@pBXZS:B*Kqgo-7%EJ!7sIfG<Nf)01po_?G6Fjb$:q^62cU?3:um_b@,]l^Mk>6#(%\*P$QF\-@&e;p+\p=Z
%clH**"I4N&WuQbV@[T#IFd]<QV=sYZT@jkZ:Pgt/"L8i$EQKQiS[@&=4;A&dFi#$`1__**I>LKhZ5O37%MC.!I/Pihj$AhtXNXR'
%:hGdo9^g8W!pl)G@XPC>A1)c\N2u+dm5>U$A$V_rH8$qgOA_`"/WUnY[!kF0U;pr1]A]NdmFCqbS4C6_+O[C>.i'*HJN&XV3Jc's
%@#hH0;[n;+l&[KHL%Fk$-oN>=&RA%ea1t4.J,'#<Bc&`IrJ]qsp%%iapcAY2:G[T;0rF?Fi_h&4aN1@C(EKGfn[mM>H:KKL_oCrS
%<>X8^6qhW_iB[BL;./dTj`5fO4hP"A&6F'eX:tMbmdp7N(](IkJ`U=iLK@-PLW:i!$u(_hVT?(ZOrjh?G)g?)2+FfM/SMW^\0Jha
%/0lg4Y$(\>e,L]<#2@mK+S"oiD$VS!.Tk!5<5`IEZ':NQ[Aq:i<fh0^/gDLA\cS^X\9Wo>=#m]s(Go,W!j0WkbnhH#buQ?nm[hVe
%++R?<A\Q(@n+6GqmS3D4HH!1SV"'b'1qA6c,a-AJT+)$CR6/2:>BLodhYAQAk6cudX,ba!$3hEk?,Sm@hKMcqS7:B?UK"^;h%q+P
%U#Nqd/SX0(QBQV!^_mPGZlRu"[*(n@#m]+8;dg!pXnF6IJBG)@5?';6!QPV)OVV1.MEDDJ6Da<-7&hccs#Vhk[OOKAQ6Ms:&XC^b
%LUaS3UEZno\9Q(ah\WTPfr?\k6>Zaf*O!/JGL"5hDVh@[WTT7\gS7RArRDf.cV6K#a`Y+9_:lWsMKP<AZdI*Zc/_7IWJtXe(LID7
%.,Fll9'kjVfel<dc89J$!hpLWU$m;O,hCGKHe32@O\`G>]KseNF?J5E0%X"G=.AdBrYOYd)P9.h"5Rnnq&]3Q>omt`o]Ih#7^W`K
%CA"d,P27Kr+"DYXmL$-ib%@fZY9ePqhFZB8Ra,7i.JqY&o]Dt9j0+Q*rT`P!cU+du,NIBFnC)dO=$PWhQ]M*+noEM^3,^a4(6t9U
%2[RF6o%co`6:o47Xepm;Hrl,8[uX6-$WKdk)#K=_[?SkJ^RoN%.e^L0D&)rUn$WS9h<bCtarN)4HN,L9H&k`Z*s:?fr:qDi+*W"K
%c"?LI"lHsq9M/+Z`A\00%Y(V*ijE.ccctI]Rd7OfTKtC"CK6p3rIFpLS&N#'6!u4diSuIX]T-?X%P-b*W$q)M\n'JjC]P0u;Ot`I
%DQ):,Cr[e<O_$B67(`M0BAS_WG9XPB<I*OONgaZ"-a54I_9jg!bbZhQfl22eBm0U".m9Jo+R9$XE)o^21=c@/1,#J3E"GePs$N</
%85ub:2iN>^qOO?M^7jTmPOoHNDoeV>,tdZ^nsr5?;"DWbWeNX:4iR(BjS"TsPdDPL8k<Lij0h<lA(YQpc@]u=4&0oZH8tMX]*Lf/
%GIhAkhk5X6L@/-FP*2VkTD&4uZpE[F06I&/e5(<ja3&V[2p"D]m]ICue!4aPW*6JT0-eSiQN`3Mil3r/-nWpm0*ad/SNh>k"-!rH
%0eQCi"%#-:_="CmSJjt+C,d.NTot38;i-Y]NK-/')RB$$3D26l^r:@G&,>iWeH9;t,?O6(q6?1C9hj!nC+;KtHHWs.Sk"0t3/ioL
%UA/YKIn3a,04115=e!-PjDdm1>4f=r6+=e8Rn@MQB\l2(%&Mt8P;nGmF#gdU"!SD<3ME]A6c#2t\r[Zt"1B.G+bL$/Ec^2+8g%'P
%ld;Z0C*!Vu1kDOi0^qHNQ9a&1,pD=42s\S;jqN9hjf2i^j:FO..^(C7;A-IM.sgcH+f^\N6BlZ>c07DX`&dem<'p2j[@T5@CO5D#
%?Lr`TH@<(\W8buA[jIsq&@0aOmQaVgPt/UD*JQtUk0<<Z<l3P@l"59mF]_o%k[o1W#;;CrAU!'1`Q<!V#Q4.l*k.U@:f`>LmH0L!
%+4^3!RtDuEo6"N0qUlT(RQ#SGmjCueS%XB^cJ"NVepo,b9qSrheh@dRHb))]c7@H"XT@^f20!QDL.gs[AS\eADRKbEj^r:I/9.kJ
%HYXI%*n'H<n@[)^\N0R4:VW5_<k"P#O^.EYY:CYjfk[8,WQ8=^UmZ1>nRea.n"oa*BFQ>'XN?X?FsXu<Er/r:IXRPNFP_R0D$1c_
%8%m_2J7dR$&_28*$230@5*#nJU#9OP)Rh5_2`(E4D%g=GHD#`%bP'"58fLR[l+T=<T3fU?caR,o-@V;nPthIVFLrNE['[$46QSAQ
%<m6_/@ip\j]%:RH```*OH[XJ.m9d7KCV(G0Bl=bYg#'\Vi7FO:R8bKgCafnoN4&)^TBJ22U0k@.d4CZ2h95G[\Xr/5X;,O,D2r,,
%5i"<JP:$6?YPhSDPpFp6Jk1\u9GdOV)0W7&r$h3Rq4M9?V][oF.BBKAW)0lIX(k-n7%PF*^snHJ>GK80':$5[j?b8p,r:BOSQe$5
%)(I:,3e4&08qi`i[X^Jppj)+coqP3f(2&?a0E1b^K=^\ucB8]IM*^H=amA6*+2S_E6Cbc$2dDiJo!kOA9gh]BfVFp4?;NXZc1,V-
%,N#-=&$Y+YbL>F)W]eL)FQkH,i&d3cGI\_9<JYn!0III?(-1*pT)=I!A]&H8p;-PEb2LGnQn#^9TM%WBK\A&9nf2qL%*!S"3:3$B
%e'kWldNRX*&/cSQBhQh3,%MT#WX0g\J*HWrI7FkaV:[33PFP_D_K11W(DR5Nj6?'!,(_:EMuS"ho;,C<Y3SNUFg9_;fGn@2ker<(
%Uk((:M'=:jlL)/pchZ]>I@^16g>N=t8*7k.8X26#?kc+$r]7&:]a?T2Z(,nN[_t=4WHr:7itq.\of)fn-0@pU$YVjA@fKP@m!,ib
%a<esRP)9Tp,3l^2[r\cjk>"gF+TB`12:^%+#Rc3"=Z`HHF?5_S*%KQKc!A]B7[HHY/6'Lo7R^L<LU=]0I'^QM>uTUT%VtQm5/6md
%5MhLJ],sKQVjC<.CN7`uQA$TDLC;7_A?qtr31C"e[Qoo31>\d%Du1(2HjU%W86QW(X'C;s>W1b-SC:QJW&i/[o:6ir[='"g?$u0?
%cU4te6l$Kl6aHcdo$6ccMI>5A>q91N]OP\=1_ou1+*^o>RIp&;#0msK=R'o?5(E+3o_T0#AI7P!AGpCL%TO(*@$Q<Ic2EpH)1an]
%19rm3rACqc%B[lcLSH37/lcsfZ2_W-qrG^D.3FeU\c\4h(FHu%*g)6Ap[!eG#2fkBrQ>_YgA>IYCG626ZDm$K(,Z:JRS-8_X\s?m
%8GsQ4J&nr@6'Rf$2+i/70(X=Z#u(U?>1R/8`1JH[=3*/\g\osqEuK=Mp9J_`UG":F-;SgmBKWpI1Z!38n4Ginqelg!OSQk1n;k_t
%IsmB,QdPZBD8$k3F+iL@aY"aYom8C;)>!,ll-a%3[;c&:6JZk!,M9>i]-bJF<<Wp*$bc<(ID,AVkbgA`4RH5I@$(+S"6fk&Ab;cn
%l^UB]d5rp=W+o0s6Bb)cQ?Ig+c6$6<F=qVq.t'g.#9Br1NO>9;l/'cYK0H$lSgT[XL,G)uOdP0feHiIeMYQ-S:M'<<cCM;oS6'96
%oe4^r`7cY+A:5Nc]sEj*0Y3Xp=nPXQ(i1\sX.p4`[]spHM`_Gt=@S\"7=GPKY1u,-6^4tq17i9DMUh<QrMF)fO#tpAA1>Sf[+sV2
%(!bo<F]o+"7LS%XV+,2D/IFNU""_kn@_a!9=6GZ"cm0:FJ=O\rkS]948;1mnq>sR#+ja?:[*T.Wg_$dB-L1pTi$5Dl)GtcnLG:QS
%.L-fK(H3Up="=[HD%L:@l:4!,M(5(b/!X'_FCq^UV>Ci4^8#UiU_;RR,<oJtn6$KWR$luig:98paHs[![DQ[gW9Gk;[^`#/7Kg7?
%UACTQ45G,,_f'2sT*ONKm]%sZfP9n5]:`FV:`9NuH(1h\]htZrlE3PlWXFD0Gi#c<%R,.G+3Vp.68m$9J)t@e8[b(j4TZMO8V=)l
%o'q"1jLk5#2!5IaIK&2ZVcm51d()mR2<Fc">55LtHu2q?R,n0)!Z>_R8`ik$M?FDGVVP]<6:i\r-C'D%'R],2O![8k2OqAVg02gk
%p$9o*GOA;LAOXd#C2AA+e;Lf_[e,GUTfC:+gk^ISk7,DRKpL9^_sU^7-^7[*[G>DrfcJMhqW)F=1_"IRIRNNq:m[O'CA%@Y.P+!&
%\%!6eo'#`&`^WN3d<W10r>NSV\=qnRHJ'^A-raoR>4tMMe-"8M2i[Ap48h\\rQC6SlfXBTq9;e#fZX+Zph&?T/6>QB-6rd%pKUOc
%Z"$jmL;Ztk]d"Z_fmW*FcKj??RkLm91BpHBU@1b,^@q%695.\Lj*-LFKsQ!REWFfVLU4>,E1(dnfYc_K1#Gq.@,KXr7<[[Q"A6'*
%Ztb[OjBg%bF,m?$I6oOI4V;Hp3Q92&@eQ9f"[[mr>C0H^hMjrWd.YB61$l*Kf6_4>7#r>KDZLU7I,B%dZ[TMX-_p]6)tC.ab"D;@
%mi--)'DOKBX:_=.Y:chkm#LMSjfMR#d5>(='h>W9U4JVr0*G``D7?9aj\Yg^0D"t`jKEJR6iZ6Qf-4ODgV.4#KsTqjHi6C&7NWNA
%SSD'723pR95R2F,A$fqj[Ui$]i>?F2BkKbU([$i#]E632?`8s[s!T9Ns$=7p,D=3.:m:u$cR?`6"<H2*;4h^WU#3^.?8=P8bLEB-
%P+;p"JXkRAhmC8lG58g0#Ah.cRqn2OlJ4Xf^u%&-&.25s1kT#RapZAH%dV(@0VH,@B^16fggd"[45O*.AW.g+T]I-Gr.\@9V5T^_
%)HXgLlrSaRg-3]f7f+:k$i<JVH?:-p1@[-C-"D18ZJjeSc>>Vhfos0^3\hAnn3Y=rDAtKgUHJ-B,V;e)k8@PZJ1>+gOJ7/RdX`o;
%o-oSIf"f0,dMo`HbsV>`Ytm?%H:T,9AV$:Cj=onsijV7r(tN.Fq(A=8Kgd,PomXd7r'>c1373>PLosa#-6P>3oE6+gNFZ+g?tm'Y
%*cI65Ct-M)#bmJJ2%3*7FBX-i)SbgUCW*GL7E,Xk_(-G2*8TAg(c.V\&>>(VL])\/ne('NmN^1T_r#[aml"6MVfl!=S.]1f-DcT*
%:n;:R"j4_1^U7SR2(8c8:,EQW,]#PiO;c1-b!X`$kK($iYt*M27,rU-&Q'I<0n%@2[&bNE(6Z8&'&HWj)`(g(*BLqm,&T9pR&I(@
%+#WLG*r0hW4jP;AI[QXBK'MIrL7aoN>4?Dm\FlMq`rK9G]f#+E8H\N'ibR_k[W3pTY<<>b&a3I`k@R0.Q!QRG^,;d4PC1Sk9Jn8[
%WKg]]%pR_.W).2-BAZ>eeXL>Ih%R3)lH[YTUaQ->A75?1OMmL94&npZ@%?`UXeWV@M?\WC4S:EaCE.4K3JpK&i#cuRFR>EZT>ldq
%8;QaGiLe9%KM:<ap/H\LpgKLA]mT?[('h@l\J7mTWe&=./ok9&,UHd.X>p+V-!7tB9r)T]\;7Vo/%S'_Eg2!$(m;n[:8\A9<OSeI
%29n=32Q`]Fn\`14JVU@"236Kl?:EITc`u.>V5&&[g#[UMU,uOm3<\Y?q+oJYn5s39I3^?loD0?!J-/+?MJH(6-T/rUSi-O,du1K!
%cL4@ie*$3f_[&[IPo/PbF4%BM;UI)F-Zc.PH:C+u28b#KO$DeD7r>Q/:r,!NS6urel@)[b+o]hCTnln1fhJ\<l*($8.@*kr&Beqn
%1s'nn8CQ]8j'l"=C(uocPX/VH-"VT-=eh'U3Z.R(^((r]6?^I[Z%Y#Ca!c:SZ+DbF3n'#u>LRRt]_`o'd2$L&CX5K6@g8B&7*)"0
%iGU(,pR1TAW]Ij@q"O(-4H<KE8#FU"N4nA(A]Lj*!nhTJ`&7[mV,krd5=<plc118!;fAe0-4Yl2XBEnJSN7`",u.ZEK`>MgU@;&!
%&](RD*`Q3q@op(GO75V<(Q0e`GT<)3As8a/<kMd/VBJ^I?.s4F?gD]_^[c@!Pu2caOJ*9$lU5*-.5j66kRmB&#ZrPtGtnPHaIiT&
%_sq#<J5XODbRuF-ATp6hXji,TG_iVGfB2gUo;7N03sLDVq)Pm>Pe=naeltt,6n\\*.L1&R<814Z,6[Rk<ai#d6-(D0SK5qnm?/c\
%fWCA7;.`i:%O._U-2V96$a/aTpsFg>lKno*WE*V3gHs4I\MU(0'jk-T@ES:/7pM*,iaKnJacRR!NT0]Mfj=TeLM@YU892cW3JWKf
%L]fHf5ImVJW6R_BEP#0d=Caq=3"r*kKerhp+>,h3G.//::d&=U+'ooc^4X.HBY8t("loY^*7+@8`Gnf\>[MQIW\*4,dg6KGK-2mP
%J[Q19BMm*mdOEhX70VPe:IE2)G6-&OjKY)G;6F[h1hFS!kK(Sp6^>UeO=hbJ&W-4;;9+`XfTW7NEl`8*`=<&dqb"u[ksqbf"=,jj
%IAp`f5s$q`eLWnk;7^'l%K+FYr`>pI<o9.(/CH+`kJ)rD0QT(o6p4Je'%)76iUkiGP>psS)&e(I)Rg1UUkaDWjnUPo[Us(#\nNmE
%,o.I<@:c7%71tSdG]QLT/iSVK_J[hWc!b2Ld6^DdL;?8D%j3rXYe_T\"uIWC%&?p]CY."9bd&V?ilT>o!'5>pA4^?hOpNT]%mhG?
%+gT^V8hNPHD21"m7GrKf[AiiZ37)i3OO!hd8`8#/iYNI<X@skZ^9VTm&_24kU/h&G4J^KL\7s;+gA&\dWKrg)81*U1S]5g)rk>+=
%1o7c,oMeW-MQqb6PXo!;Wl?'cKO:$smd\29BMV!t"]V59'F!<Q\C0q!+D+>ZfZ;64NntG53U]V=AsD(E9t_pW?&p&br(3e+bVnnj
%1TE_m<4gt5AC__tDQV+O]5<'G/bSTX^=aTOb]4?i.Yj3$7r%f"LWZi+:dK6EndA)4aO.K+[9:[S/_Y7C:3DaBND>a_O;j9^;fC.u
%Ss[>ccbGq-n_9e>6:VL*:7^?M33%D-ic3Y*GhOkk6<\7'!Hl8D&!?YVUJLQcb%8n.2iT9N]Va<KqEB?c[nA^BMc90P9WiJ#U9l:B
%oqY<s\^K;kkTHg\gD,".Oi?3Q9q)f63pPJc%+UBWIk(::Lj-a2D4ZpPeXAZ\AOq]Wm04#S`Hf>c2lQFr<VU+@Y3P3i-le5_,VlC%
%Kc'1>H^*?tKYp[u@50#.iqbDLq/lMj)[o/hC&^hVb!'n%E'N7rMDpB>]+lZ9]_1H71d:C)N,'Y#Do9%U.Sr)@@GFpT.]CGInb(,r
%4%TU$"cf3*WGoLR;ISR1q+F:/9NZ2IMkkq[Pl"fR=5h])i2WhSQ?g-HdoCYc"9)Q:$NIUUp!X3E)\juslki^rd96*Za.PO2kFJ(_
%K5q+\Z=Bst,cN90VC%a_V,b+[KmA:lE?)_UijrL`=1R'=ih^S%$d&L.B6:iZJ0?,siH"r;-sf<NgZX+LchCgpg>rW"S&Nk-Hh1R+
%k#WqJ?Y?Q%:LJ[W^#G;aoZt51[`uN9^%R`)JfMo.<E&2Y?Lc05q+nY)4AX3gJQWR`(-jH*?gc>.;jI;dMT[#$WrkXF0'NS'Mb'lG
%pHPGRM`-FXmB08J=4_=hQ9*(`lg5sb6!a<PF"bnZ&NB0.\3K$9G0dnsD+jY^$hM,^rqu6bqu8iaQB)i3o3_OrJ,ZqWq!\7G5Ak*i
%_JnVu>MecTGAH^@ThebJS#,*7UR)dOYJ/u1ric?AqgL3uD@ahC?_4V!E,U0<IK&WC^\VioHHdFg/,rF%nE0*;]o9OKUs7)<S/B:o
%<V*hsJttjh.#E8.eoD'8<@<4j+aB'JR:lr_k"Mm*kUB[OlmY45d[./u0U\i-.uZilQZ=6I*bK3(-&tBZ/dW5;Gjm>D#aApTS4:7+
%r*#Z]N,uhFE9_br[3uYJ9^<\[#cPW<eZ\75=_KaFp9qD2`fCm(D`qg9-a!5dok>O"*0(1EpiGRD8M<)D#1]C;iRU\oc?9*)`cGJ`
%i[gBr6(P\-;*%8GDC501O6#;=Ga,N`&4^ma#!jG0@F;4jAi?gTX@Ob=_,])bC2@Mj.ioD8UrT"q6`BhA[jmjhc*9]bj-TZ?TiH0p
%]DF&3j-#n#<)&b8eDsT:b7E!R)(pH<JD/*'kTN5\a\AciV>q1e!jm#K5XLmA1PejQ:-5]td?>VFPp[UClT7aq]T<417))ae:8t4T
%K3<4JRmH,Xj9-p0gs*Aq0Bg^?$\iR]aFZ*]7Vj;25P8LJFCc,u$"q`"O`BMgYZCZc6BW^<[GsD@.&]^bOB=u;6r]K3N:\o>o]/,3
%Nc89j=1!p*pD/pD&EMkT'i[)*^W+Ih(7@3P[I5`$7%FTj8fIRe.LIlpeRXSI=>$nPn`6-)8NA7qO68qXJqEqtPm:6EW-G%FTt%j*
%I*L3J0-.,jb$Gb]N+gs+@a&jj>Y<".FtDSCMm)akq2atP!\gel,XuK!14KS08<A=RMGW@K8>VK/)+Z&#]kV88a8RcjieXld\sllb
%<J2o#4gasc3P[uOYj"u!<2/s6iaPLk-k_4nWg.58nF,,+/2\iFfjUGHrp>l%PcTs"Yd\M]X@!0>F[W:M>hPVV.C'ntN*<ToW!SKk
%@i<fOX.+jCk$d'gpFZ6u3^d^2pB>WQ[,#Ap.X"8@Ke9<K6/?H.<oNDIq%gR(gg*d1MRoQ>qf\3S+6CE-Es$`uHc5u/=4/3M=0(3m
%.D%_&#.f)J44J1sF1_BfcW]HgD?!YI*!N*l+rtG,$X(T4<;Cj=d0j,4dMsBU*eKn94cUbOE&-M;S)o$Uj8A1Z,J7DOHu?-\h&2O.
%J_=8oEuCYj%A%Xa+<_r7DYnI/fD/KkFcrd.#G6'rEM4:G$!'[cN_Sd0j_1N85@>_f%kk<0f4>NMM>L.(>^EUt,hDJ(BGu0QTKn8G
%8:_n\KB*`2#r3&54Nq!M&.pa8CCf4Y>YsI6Xu//Q#Lmd35oY"qToKo4%(J5kK*':;J)T6DIu%lCeciH!,GFj6&.@Id+IKBm4<!Q]
%8E@0i!n_:Wj4csO,jJo3+s?TCTW/djBrG=im=B<&:R^Q?S%`V@HV6;he&/b[GMNOA_YiW@])dn3q196IoI>d]:YgpFkP?*6[nod5
%FR9!uEG:cnM&U]A*B9&b1OV"#-%R=._Wl(H7)<8<]4^;_N0uh*lI_VReR-J2^IL5$^?RfPN:,&teR:T4NjSPSdotD[4o8e4;O*[f
%c/Q-hS1pNkers/5koFL&Nc'bdOA<EA8#2,l6%Q<tM-%0rSY.gVg1_d0)N,<nieQMQl%_cggLZ9$kR#duXmR3YB-HFNDkkc2PY_&K
%@KM#jJ_56!$RXFn$`9r4O`[lU=smFT_aGmIm+n#:WW"94^fSRa'(Hd<3d\H/C?)>43c]F0`@'OXK/(Xso5Fgq6X6npgXhaHlMYZ7
%G'?9T-pdg[:9BkBAh>LE9']ch5O"eY%Z,[\VdVk$5k+iQQ3I1qeA]-TW1[W((G-m[P3YaYg.D75eXDu-fPL3MD*p*T?[K4W1DC!)
%oaGK^StIPuYt(C@6`hN]J"i2Yfk]:L-O.W*(9WI[j@O(B+uu@1Jkg4tK''eUf5O9Pkbops=X.]]SU8`;*H$dk1koKD8+.E+Btn]t
%Dp%6s6sDDAjL4TM[.8'?.NaoKX%R"[8CjNR?9keHjrUTq9L?,9@dIa7+1*`d69U5M;,&fP[79X<(J_4_1lJi+#r0GhXO+E'il3$T
%7Y=Dj4nZCg>i%$!R@n,8<4jkA3h@Mh?i"VKePd+2>=LZa-fUL/,t&1qJCN3%CL9n=EGB_onZOlT,b17]LP_;]((t-%%^nGu]>a1)
%</M\+q=V9!4l!e^TT;R?9SVlp=FhBKf8&-IQaaLkpM8[ADL^I5[e]1bd81ELaek2W)i&a)pm+E`UQ7l5Z+Zks=`VAELNFST+Q^]L
%p&>dJ"*3&=mAB2,h``ulL\l9(o[.>./+IX?LAkrLp*"Y,j_\n^rRs3>gE61&D193ia"`>SAd6:E`[9kgM[C(I>EHce+R.-mJ]`\.
%Qc4si/1h]a3>o))U!-jok@H.^5PS+mq'B[NiaE1ZZK&0X,,O!aIo$c.=pZdpe?)PGUr"d`?)8@-2?Gj>$N5XfZ>So\k0,]'G%-0V
%1!m'o?FjL3MKS<0;.jO<XfeQRFk_"&^B\CN$n-/AYIrBpbl#,HJr5rEK&eE6@d/Vf=R)*][4BT^Hu4)N.EVYd!m(16KGgf=:mAdI
%;EDsmk5i-^:k?r=TVFoR^pYOc\"\]ld6^o6B)W8T>jeOa90s!=haX<Ym(4]Ji$7*k"+rdh-ojJe]@q</;6k"7IGQ\1Fc[)19C?!L
%^0,r+n:BSrYYF5I>U>n2:5@NM:iaG[#WRkHVtaGq#=4o-qdP@<oF$Rh<;EDX<%PW5d?+nKNI4$W?S-"R.k4bT.Xr@Gh+;snHZb]Y
%/O/8Q0`.o#(_.V+I^2Mt8`sNV)/+0(\d6$e'n3l]P+OjI8]r'o-#ph5g,M=`Zc=*RrFEcNl]iHbL'+Fb$#lV*)S',_8IE-th$I9J
%TlfZISn=-F.#$>g_GhM=(sYU7A8l&?#e/K`VFD]h(+!TV)@]L,lG5kLNTBlGlHk5)OEO23b+"\-06I)l>Vt?W.*JR/[GB-e;?jgV
%LepO4`YDs<"1#D,(WA]5&Et,c#%`S`qe4>("jj]B51!SZejCcSZ'_&Apf3n7pq]*'I<*MP!mkn-4t(D+]Il7!7[*DDiTMPOY;*rD
%/@P>K;<tK#(_q06Pd$(4RU_n<[9_%BfLW7"dO>!f`Cf&3I?c1^oqYaJh622iU=:D-^<2V!Si[m!gn6pCk7++7+Xjg=jGMami(;C1
%MIr9t[QPOGANT3*9R9_7nRB_o&]+.DG%7qtk<>T?#?k:^.H;$Ni(O3X,3[.0>fr@64@_p9.k6_OBXC:bL:B#9/<EI7CDn[UV-hc?
%YAMh2cD0%Yp0J9b1k&!<:Km'UZ[O])DZ-s?JF#F%YrTI[=W&:f/H_O^2u"7E&[oFT'/#3>d!o2AJDEQjEmD?aP6qQ:MgUH2*p7<G
%T0Wbc%W'`ufuU)'\)&NLIO.3N]O[e%Q;9rpKDgU1.,O'LCX<<thu!".)BX4qOPL<u[,Dr16fc,.fB!5[3)!0624RHRJprscp\U7]
%`*`8hWfhj(cDSD?T-Y:\9DA@Ek.8o&O2SWdeuS#+hsl4](#AI]K`?'6I&c4mPF\&W'*l6-"Y`_fV6U];.u\b8A'S]53G;sn6/^tb
%90G4d_>`OMa$r:GOrUU^_F=e(kYT2)CQoh3>DS^VQCYaaBp*hRQLB&aa0Zo)oc`LDKpXXBI[^`;l1W@Tk\!_&K'Mab*DT7)rODff
%)ed!Gm^UZfRt&.BitJU,\MV54mJ++!Tg=Mu^,G?H2MBNd,^AshipKT#"DiXm<\XK#P5o\Eq+E#m`<#:s8H@YQ.t#Ac\EjP3J&LkW
%Hg,u\pl5UWWHNuf6:(UU>sqZt="Km)\WombG8uq$gn\%RES8Y/kBU<pD6K_JY\+c%r]Q/3V)Nl]-2F@KO9Xm^j<+tr4K>j#5n4Vh
%2c\(=KD:W`gQXZU2[I75E/@jcH%0,Yjp'mp39ji<O(Oh1$X@"J,G/j\G_>A!'F@fKaUJa&/ub<$^AeWTYJK$Ii-sY2G@5gMp&=jC
%T=<Po[n=R]gXjl0m^GfN=j'lJkkf`f8V-osXn&l4Va>LsX%)TNF0!6'oZs;]CH'@:p]#]nQif(+n^[QK-_'1t+7SII,_&FoqB+EE
%W,.WFN2b*8@$_Rc)/p(tim1U=Yr-7#-7YNt=64aWq)A&iG;9YGg%;oM=d]X<0af\+g\alH1jujJ'LK:.09%fPVRTOA7GjY-</?(e
%%h4Tbm%G\1f8tfdXh,XCkS96!7cE(.<Fs)Lrq47nI'ZO&ktgJH^/'L^Ru5*`A3q;oBAZE9c;:32<;H8sOJNHsM*Io?e7$C?911fT
%-*2p`Ql?1>P)J9B;HK363#+V:a&>E"*TXju5D"OMb]cnFFa\?TLc*N@VFZA\Dc@aWdoECSotag2b:LcH;#WMah@bE5<U;UI`),O2
%g%l(@,bf&84P]Mji3$$nm^fhTg:=.C;+LW?d4IkuW.I/scr@PH\>s5Sh$SY^^8Q^`AjF?,ge=`*<@O_/]qF&9T]-NP,U.)+JYm*\
%jH7d6!LhK3R\\Q*rV/\qIEPGIBA>J=rj-Wcs!S!3_9M_M;'5h6N=)4WCcqL<_a8?n8fG?m+Os%4YcJFT'\!g'/l\#g[p!G[5lpsA
%r'K5a49PrS6mhS+o+6G0".YX@iMK^halX2_WY9)\WCu;`Q9h1_P!tjK+im9L3Y#[F(9`6IOXtXX)bu=J9k)%@5?(&$&>:_LTqNSZ
%fT\O2HSr9k2f)r^!NN/SQ(Q?;5e:NGdHuGn+R%I@P:\UaFfD>,TOQF:&YWtH(\26k9'mRl:<c/u>d&R"dVuO_TS5.>H>Zguo+nk'
%n^dn?h]-`RP)PZ(pCo>`LW-i(m,3Lh0p6M!U)7'HURB9D>">t%I7Be5_STrDT"!rEZpRni,"Aq=c]rNfFP<21r0PDaH"s,Nf\KB6
%4`[K-F_Xg,_O;@fU8QSOPKdEYqqn\B.,"5>C#PQFF[)neUt7_D;%(^o(84^`,5'!hXcTjs%dh(k8UVLV/d!BP`gY]Xf;+0eJT=W]
%02NZ1\S8EI,qIfAEhU;LVJ\odLIY&'4>#0aRH?$+o<)U"Pp!u9@m9RQVqF!rA;4g6V0QDuRTWnMaq6j3&>:pVdh0(</e0^2r$X@,
%oYP:%>!nN[q+*57B1T(o`mld(\c>"?M:8+PpaC.<4XJ-LfdRKr4I%RZfrUhh2##gt1M1\K\Nag$-f+BO3@UCqU#Zl'L;)4mh[,S^
%1R7iNVA@KNbsFC:(A,N*WRGIYgeO;lfQ'oamj:a9kKYb03r>kU#M_uSCfM2U:rO+_,Z?q:@'[7H&e"<%pAFT[BE'%8q[_?I(]cWe
%BliBRdR_G$*D3:QA6TPsK,3`RP$,!;VYf=%j%;.4,hZ]$Q^je7eUZ$;l\gi"NV5=;n%[23nj?ml<QUOcO,@,AZqH2D\TS-PdWF6S
%=Jr+H^fqm%-PC!W!%(,1dj"SVHpjo=34(K]csFt'^n3jf%m"m6\;-3qenG9@W/t:k,L$eNDNjY"qB!&#))DR2\.o`M-fMOUKgc&N
%`#q(l.O-7$e\.n"FkNh[HqEalL4?^0GE,8I8A-H,266.9\XsK&]Om.iBjhY9ER*^J8Ni//pTb-mO@M\nj:c:Oq8V8W2,bhX@.Lk\
%cH>W=\*k31_aY,C=g>i6IGRS?lFqcL\WAa9Q/)c?'1(=CSJifRZQB4aE%3mJKuX.P__;8?CB+7ok+Y!_EU>kP<Y#k"5e1f4rP,f1
%p#0/D^O)Ib(Bg4_q,Tc6`F5Y'S&:?S6_L`dMC`kg%5VUh3jJ&/-'"C>WfsoB\dSJ`YNLWONF#F2Ie4)I'DVmOhi1(0n`?ip,MM)\
%*9l`iSlt;7-T%kA7%h_A1T"_XRaQ1WH3.YNT'4ldr.6DJ'OT;;OEo,N4.Hn[ema+1RdhO7*>]m(:ES_<J%EB<Vp%.YP3:J#U$B0)
%3qL$6M7h\-SE5.n*:_"HNI;OkLQef2n#DSp;buG-.UFo3JjhO5+GnSRRRojU'6hF'4Tte-D$nYMnRs0H>q!dq&S3tJ]FW,5&\YGj
%C^2icNoIc$OWYk_eTRUMFp35,_!>'"m*@^CS,XhB\$/aK!Abe&WkMq$b6oopc-H*6Dt*9SQkNX7Tth[$f)^1WFd`d.E#$H;WE=``
%aeD6)a,cNs4uAOuO'NC@Y)>q]24SG0[=k9S*5+JI#+XmVBb+05%^OV,I<Cs`.4U(M;^bu)GopC@rQ!eF-%/P!qN!*PrOfJND[KKb
%i%t`i][jt^1T1gCjSP)-XKHU#2f?%+m7((LAuJi1\`)R?b%&Ah1pCUB]:d/!1+8BL<^5[YrDXs25"%VL!CqUZ`H5I3_*;(PI'95C
%bqd8Q6<t_9BU>a0Y)RdG:M%<gl5lgtKS-q=-mh:@2l];'7_F-U:8;?W.1&&GS_)g]aDU4S>9A,C:"ngSe'(<_"+-d4\*o,o*Qo5$
%]@+)YWBF$mH5T\.%aAPVHluAX_dVLIWZU7.Cs],^J3ZHlN;]-rm1;p`O@Yc30#]#F.Pon]hZZ6?L)(9/A?UZ,DH3BkRP*+'H_F_p
%ZU"FQGSL,'A1$\4L1_Z^ghAjUs.&Si;)QB$ZF4dnKsXQm:<Do4`mZtZgJ@uh:>;-sl`2,gdfdfg>pdr_7,C%oUVBc7#c&c+0]hM2
%hlXNiA!(6Qg6W:j^U`=QJrt6I]2I=oD`<j)O#mf"?[Ed_14tAjhr]k!^4HoeY'#+9X12#SY0t=tNDn)X";@q\lBReF:USfWA%1X[
%_L-*Fje3&e?,%?7YC+ge:HI^qD'GgWe`bc/itclQ\IB+gq%H)fN<;b=7*lo#5AK'J'X''?:/FVe6k4riB1FpX*S0LcV&5uGn2YGQ
%4rRG,LKCf%Ma/+65ZjTeZ"&")?qGA$[S&=n6:7t1[=25sONs\0FKMhLJKtTmi"%h"^Nd`NpWLpO1'2+oA3,619D<:Ghk]_uBio`6
%.=-6uW`A1mTFL`GD6X@9BN/M\ZAJ:2<'(2]15,r-`)[W6')&EIO^'9@n!VP$9;71iobXRd6O.AR6,[9(^n]L^-Dp7q`-(`DnmJ5_
%@WEjHI)Obj\CgZ.)KgO$YIfG1r]Df0O12c>>3:OYqCPqFQIGLXf$fYe=,\<Umr3(PTB9]>O(mJY%W;TF!RG*M!&BR_'Ni;dJ5e0s
%:cdV6TC>gU0PoJL(H`Fp>tgQJX?p_$Dc(NJE"KX\bYo$&3CQq?,2^RE'pfPQrbOD[;-XTNm*5j55`=f7_?o`5XskO9H`glqlTPj(
%I7(Nlqg:,l*Wo,Jd]('e!+0EW[rJl*C01#YpfR990-gn0<4n+#FZ.blK&]Pomp#tp6GtI(dI5$/,#e'5AG&/!I7nGNIIsWJ)5A;8
%[7)fVh'mh+qNaUddGEs-r[hm6p[-oEg-D?lf1Ph4&ir</gc,[E2m)pUF"DC9W<mmj0R(\mTOm2gl:o;iNt%6keeO2VD*4GM[NX7a
%<rJ_ZeBAl:><3K]]<PdT(G]JNW"tQXRrZHWd#biKA[()2WT4i>;dLfjXCQf4$`t>Bf,KTH,3?SHmteDDg$O;L)*:hip/31@FSbL>
%$/]5+Gng?>M_$ts=YSm.S&eC]6sfUVs4g$![##o-O^;6Dj40^kcV<K&qY`',]&^dAmj+(E)_ioaG1.A5\3qH#7Qf@%89iDonWGl*
%<c^)g+j9j'ITl9k17TqdJ;qFm:1#R#MR-*`.^Z;;Q@))'%c&G_HUcKWBYGYeK$WS7'eK_h-GMCb1r;b';P*>7HnjAH6,up-Q_ApX
%dP6RQl+/;4']'_VQ#]=tO5OdgUFc;rKU_a<1RO=912.?&F]2;2gSeD:[eqduI'%E@B;rT@<'#Ac:P/rBlOL8E?RjJS%p#sX'J7iZ
%,2;2$G0;8S%er,L8NlWgNf+#4gu4u_&*aA6d-9H[:PufVo@k7L5O)cY,&Vc@<3n4^b>bZs(:h2Y]it.X/c&JIJ2KH4P5]fa)nOF?
%D$`L/hk_d,Ee&HLbGGth])kF"Zr@:W55Enih7D,[2?rk`4_+-nB5/Oor2H>seO&)rO740m[,XPs9?<D?d5a1,Q4D`1n@Vo\5MEZn
%M:0943_#%kp^/l;Tm5tdPj@'WlL<[t6774]O^WWn)d51`3B/!^C"k]rFJSDN*oXV_YIX!Q[OdC\17Z5g>"W&R>H6HJ?K5p&(_Ga3
%WZX[j-p%)1IpY""m4hG<Hh&U1S@OFR,J+[sBUF!^qqAL\Z^A:h-tNtW272^IhfaNOiE?c+.>8`Wg,3r]RbK1[Z2?pA@K]^.JjbZR
%&&Yc;n;X)aR4m5Sga[e4rO^F[L-`.T^)SW#Ta-hL*G=g,<F6*5qI*&-kTfk%GsVsN/sC>K/lk8<_>*@g,d3i5V??p/0?K5@lDYk8
%#6i)*&1Wr%5pZRk#9fTC9>s_i(0Xt3]]t-D_CR+Jfp?<#ej&Uf"Hlp8q?GL*p_$F6+*TUmkgJDsV)UfiGI)4+G"n\&VA>HgO)RIS
%!L]3=bTNW1aYe,49T)=g.:Z,Z@-#t(<(Rtkglg^ZNmLJN@UOC(mjBS+:A\:*80nV'[rTk=QMPho3H3.g'aR];P2pD"49UtXYH6K;
%kV\)*kh&?14B'McH,L(48.dAZP#?],FU16bRrQ>=)qWcchLJgO363p"2-irRg6qMLj.^L7E`Hh')25"0L2p*@]2,lO@D37cR1;Tl
%qP:HiN/F5sX?cJ0CL-B_K^G\?lSQF_)l-D`nj>iQcdk]mn:F?,5dtR[W;fhZ0-VVdN>ZlI$hmT>:XoakBi'Doni8C_p">m<o>Ch1
%ls5)=QG#W;[uC6^"KR#[<$(it1UjqF;=0*Vb-1n?;lNU'DU_G#olm.l]BPhkH#DHK3"h4pS[_gG50_OLf;85mG/O&$rFM@WK^PJG
%a^;X4V32prV-KN]O5$WbXecT#1`05:A;=nrBRPHD/`2eiEA4>3<W:pe1(Vin(WpiSL<]<R=fV&,(.PN4^-K`7)k.KE3niV_;d=)^
%=LU:0rA^=C#WXc!r(Q7tg^GqZo"sR=1BS!L7U:07aZ'W`p.2AalW"H[.0>'!S[q[@Q>OC^IYKic<;0@TFSDV59a540_%tsP.T$=:
%,r[tFam]>!<gT["@UJQFGn#g(UM(Yr*<G6=7h<:Y+g&a_98]PY<,&sj%+01QXj6^%SuV6+%:DQ6qd"5u\>odr.AMFDNH!?![>GrD
%#MllR]3@Lu\rJrO-+t?K&j\M5W+MW\Zehf2Wm)a1a`Pul5/h^-mD"FrZ`\G1PS6*JE*B@'BF#:6_'.Pi^!\eP803b^bM<L>&PO<i
%[\2SEV3s""^Xo`=etbi_p$GfIe@gImfn4cGICPI#<M]<ci6R4rJ80]&K+"mM;UW#`'D3",T_h3,<PQdFI\n"Cb!+"UZVl]W;kQ_+
%=2UYnD[213bRR6WfoR5:qM*K,a1<o)>)7Eu5^eWt,rVIm!f^\s)_9qT[OC<?F[uQ'8]I3gfncsY;*ZE]nR,^h3S'#JC'4e%cQ!0)
%03%QEnmTf56eR'3kr>f-?U_]-31WFI_k?!1eE&=U6cAHoZA^R`^$nbUD,`d;D`uj/Is>55NdMR*`_;Q-[^pD+hkMEi*^lubAtJl9
%U]&OP,W#c5.Q8U9+ALD5Y-+HZ0Ftlu27$8j!Bldi%Ebrb%QdohHH8t@6.@E]!ab/kb9N^ODf(fN:klgnV5RO;hMsu/6Rh<'m##_m
%epM+:&Z47A7U9)l"k,S.T6II*n3YV%*Z[SDbG(cc)QlS&LZIM@mhH"`K@q.qB54@MUfHBif+)kF83sV8jpjKBZgn6#WQ?cVVDkL=
%#'o_(mID\b^N0men$S99p(Pp/QPLD!i9b,mP]peN>m6*3r;*\E>35_/juG1/CRgj.(i6'Fe]V+lHstJr3Uu@tMfaIi:Go.7IIae.
%peWW8NO2V<3:iDC&OmrI#Q1ifol6uGRcNeUgK>kPlnVPa3s-BIDtcqhZ?)==TsjHYlGS)lNhmID:Q4\dm=brJ9Kd]p.Lfm[A.YRi
%*nXnE4[0i:mn7;Wr?-mMY\uCdTCV7"a!<NS+a%F"eL_XKW_-G%(sJD>[/5:O]Oh;Z9h1tOU"pobHZa+bJI[MFS:@%JGf:_*iX`'e
%V[_"L9ouG+d8WtO$UZbU+9e@MKjI&H6sJ2;%Wj4gF!D#LS9%kSPa0Z8hD2).5cn%,\O66uSAW:Q')h9JZ.YI"s#V`^p/1*Fi)?X2
%>?"jX/3tnNjot<U7lQltZgTF7*AJ((1iT&X%i#O68Q>+El/Ch;5j5Pe5ir66aP3!>U.:-b465g5aDTNtWZ8$V8;YoL1eg3FOh7,>
%.ZF[[)p#Em&4M*`qa1>\L>KhY17toK-g<el&Om-krk(N=s-sP@_8\oU#koY2`sT3p[o&g,,W>ecJ(k=jK<XHN(O5p&CG:/ZGVn\B
%EXuG$/)'^;!?HFRoIK;29Fg00I>U*9;]euXVgqad8<Cus!A1.Hl;ufQqRg=f]2`jiOo.+QgQ-Z@MoHmeYd?FV%T#Xf_epcjiIZ,9
%VX(5fb];8VW9EkCM0]00]Pf0$^S(ONU>*[<`etN$EWT_3FEl"0<N9'6F!1um&h!^o-Wei<%of0`KOt`JC?T8:4$on/VDk,hqeK7/
%+0VsGQ0dgh7ZU6dL,t=,FnTd<<1BDR?]eE6W([g2`=4qrH]e>1jk7!rMaT:Uq&k_A<g,io.c&LrH5.s^Me"%"ZQ*\F#?;uJM-OB*
%GDbsM@jOm-@jtr`MSqp"VZl[K(.W4_GXj+$5PsY_\cL\[G2p$dhclp9`)H*Xg<LHo<q@aS2(r[`Cf#qC/.`NfG&6;m+AN<6GNNb$
%^6%YgH]';RU-T8G9>-RMO*jtCccAtr7AY%cf^R8-I7$1c;aHHZAWV&IrT#,08MV(s-6PValoa92AgYSKY%85YRNQR1W"1])o[p-+
%`@'<C',;iVRaB06$U[T92(,S`9]la#[#$O<-s5G(8GsJ)!R6c:8f&9O.U0;CC%Wjeo5LfH."CP6;-J6bMYn*c.s5\C8AQQ="Q]f`
%]!%Zob?g^bXnF1VJ1HaL%j\t:HV:(F<?Q\`h)_:-:2r'f>!2Fm_QSX@XD@>_H`%oI@b0N,/hT`t1b<R0,-dZM\U8:WlR9?I`M#TX
%W#bjkV`Wdarf_MOpl7t!5:/j>2Oi$IWi/dcb:rHf.>Of;V&hJAi>paDGWhpjW?L^1K/k6tPF+=Xb0)5p^bUHEL-_e927d"#?'L`<
%lF'ZU4.JM(r.TSqM2J41*^+k!9:H&q\M"!'f,,3b'\!f5;+dS%f,qtWXVFnV=$mtWDUQAH[?YGFKi0FK+#sg$Pb$RL`4>RPB=U*"
%Nbgqc+=C2!.BQjR:i$)kF[@rF8#WJa<.)L*:,N,7En_*6N<EQ)o17cc/J"!1NoOW9it[e,cgelcKHj2>V+cGlYY3ed*o"k]`h1VN
%IVW2WNd^/$?L&JP>26R_?0?UaFSM2@F>N`k\^oSs_3AYFB;9;X.#R*fa]XT+AKB1V>#V2kjT1>VhnRo:,+>FA3JoBJ^9;s!LfP#\
%'iKW$;3\F@\S2sOa%X>B<eYb*)S>67,H1EC!.^qfX&(#PnH`XS#tX*d5*bViM$*sse@[43n8Q\#X(p'":!rPof\VZp.@:.fU&VK3
%oqgDtHe-'C)aolP7jL@AbHCQ2eu?9Ugj/T<38frmE/O,j8/4d_Bf<D7LDgaK:hRK9+AJ/^!uc;MBMb;CpnA=o(l)n$Wu3Pl$'L#,
%`tl?,Q>sV1J;_uFAhSo]S&S4kniBS88MNpN>Q6'0K!ekaPCF@#mJ?e-)X@3CLo1?i?>@0;&dXb>42Q$=2lLBtWkSh8lCMrJU?4?o
%"J]e%8P2-d#*^NM!nIr4"$NfGeVC6S<%\RoBBcg#X3_Mlg'J%.lsnW@Gc8R+JfHXB(K)<a(`I%&qHEI>d8L.)4C#`*e)f(FD/4^2
%.2M()$#3!8%PM4.X)?PO-.gZnP)1fUaSf($Ds^mM^:N.S>FKFLf-Uk-eSPp1(ifB4CV)gsTN@YE?<lDFcKnHb>$SQQU?HZkJfHsY
%U#d]DhF!qOWR%U0)kL;o;I25Z5)@oe;16HdCg2lRU82NSafp$+%KpPDLU*.pW^TL@OK1YajGrpCcfnS1Y/5>1k>39-iV5p5C;X+f
%!DL/ZGb`b<.6QgSii+'DG!2af,)c6'hStH(95^XCeN)aKjoiJ\ed/Im>RL@+f:BqA/T$p,in/b4l;,"SLO,@&eE4?oh;9--WPMgC
%Q#$np^T>K),6\urBPF+;HI+Z*Ximhp38LFm@jf."Ko=BD0+?$$'Fs,#^_!-SU16%@A#JIL&kARAfs1;e`cYP@>`Bbgl'IH-!nC5W
%H1I^J%illm;K_*0->&7Q<TN?g5,>MO,5C)RiVaZ%9\5ugA+oHk+j:Z1qEc-N]rV.Iqso(u6u&\@"Yd&C-7X&rb/H)Y*[A65mtq"-
%Ls0Q[f8T0Jk-(N+N5DB>iP+2+[,4[Yr4?1+2"JM^;pgI%7LP=/+G-%37%F"u=.p`Zi]\rUWK%8,)DAGoXp(ESpNLG)mtt1H1Acnl
%IH:>]"_duI:h"EPftaQ+?WT$rM6=6Gg"/IPhK,Q9[8W>pg>tbc@)P,(eU#na'&Xe1O,CepE@L47'4&l0ho=.m\+&E%W'fJCWgQJ%
%3;t:r(&C30L\P\*OY1sR:o34PYO5YAlq!-e]GI7@^l=Wo.c6LaS!F'W%9S.nnBMlX#tY+G#rBF8r:dA_SB-'CG5(LV4g,n'Yc;SA
%Al`MS`/,/2G8bo][mDj1$%t!(#P^J8Wr_q2<>$*/g4.?BGl#>GpuoMurGF3`(E0b\#k^PL+7KoIp_"j%$!&oD[rNKKpWud*>liqC
%F#r/RK:,SY7[0N!Ct;aaimVDk:4/mT-rOO%MduK#e#HF`"+`9$l^`Ye"((66XK*\dUCRk&,]T:e7DB.!^O+sAJ',=9,@[CggJh^?
%aBMOrr%P,V[Vle'mog5_?9^FS<W6AXJjYqbBdBT]BG'UrHVhf#6sT5qW:VkLfh.'WekK"8<koaLmkL``<9Z7Ud)h;;3H`8R#Eq%X
%gU=]h@G)_<.Q^7s*j@-M;pi.tin-4g#ae%8C`"B?/Aj,#quqBtedO%>di@>q:9oe5.lXEK>+Rgq6<_S(K/`eJ*'[bMjqgofI^Vp-
%Djj+O9C2L2iaYPD+]/)OO@ZB7A"&bF'mRta<X^7:\PR<hd$/NZ:<dO>04qUQDa:+g-hQ5Y^])^MD$Bo#PPJ>Aq-LbFNBF6gs094V
%0_!:u)k5;FN-)X38"kpC(VoMa3*m80dW>.&50g\KjAMG4YPC&pq^/\#$@d<3-6_UhXU;)V@Un7P/2&2(:g$5G9tO$%%ul=>WR[Gt
%LAqnrr+MHojV_gY0/F3T51!4?k3TAV#jh6H4`a\8Pdf&fN\L->&]IDcl!=sB$t:1l#ub3)>9qYXI,I?9.d]Z8HXU5.L"`"J%cWBR
%LF:<pfu)shKs&CJ"=f)EC8/;QQ6mA\/8I]'M)f:SPM@IEPY%)(ni@kaI*&"&=aqLO!]Al*>b#E54j5tR$d9//V;qmVR`k,[iOEHW
%:gCiOi7Ua+"1nb)2e/>T8NnVWK8eifC/&V1&2<\d,@2JBJVG1Nan)lQ0]gt")PV^3]_nL0!p>*7YZ5[rPJ=ZH[M+tiXof3cA8YGc
%H/^,7AZ@"hhESnEUr]oHMOH'0T(hAsAC#O%%S.u_Y7/=OiA`/L%*''%;kqaio6anN"%bc?R(>P*oB*]D+K*'&VkP?O/gN;BlaJr8
%EQj.snu-]'>_VaRX$4:3d8usp+;RM,ISXkXHV]fVr:K<Gh5[s'8iR<s2YE:HKUp^F^;.jg[+U7d:F04`8lt7Z4!7:lefn>2[:&>@
%#@rspOoECdE#513jL+ur?lC^`kYjC(*X+hN2>ch%rLAp+2a,@NGhIb400E=`"iUDIVcMR3ngrf#jn$Jl?)<%V)_&9XKs9rBH_FVX
%70aY)X)XgiL`9@9ZQAOE)LKR!Cg_FM6Pu</-cY""bQiXQY[?';I+\Q#=G.:WI'%oe:k+9HC2tOn9k%q(Sfhq8?#&dkh3+s#A%&^H
%5e#,!O]5QM"Mpgrl\Ou:jt+2m=@#;Mb2TW^klo,/0:,W"XrNXrr70inWH&O/aW7lIMndHd6f8U1pGmL9U#"f$[8bFr<)F,]-gn6H
%(e&JJ;>(V5Q'qk:j7TZY'_]'J^8a_&Fc[]7HobXR9gVcTC.Jq^gkVNK/,e-Kbh%6Fd]:u$_$cL?[]!J'=pl$Y;3",-UsC[H>:jQ4
%#7]>+lm4hB=JLY(lo6hb/[#BkgH0ps4"*D%KV*q?.>k75@Lb0'#/?IVEpcT5buKn*NG6N9-q)%X;=EOmM3e1bD=A8?8L1<oktAW=
%,[IQE;XkcHO\@dF4R@<(Ag#\Rg`S%lHj@$AD3n!Ij`8hT/aioBq5ei3\T_rsiMG5\,2a&PTEoB%YpeoDPHLR?[`)fS7(eXkKFDka
%p@X]=%h/fh>"G,(pqr3`N>u@-H49qL>YOu.pR-Z<=%mcA*%4hQ]1,Up81jhhSJf\3WPt3aoeQJSn&U[uiO$V/DYPo=kg..]^2Opc
%/#n?%bP&#0"b&n;2S?t5DYrOmpKi;n@)0\V(qVd:n!CpFN@Ush9mLA]\G\`.]VAeOYhon)BuK5W/>(U;F:`F.oo%hI$V>2pd#cjj
%W'!s^6fc$B+O3Uk'7RG-bl]3HcgS3Z1dM_lfH0'dN<i]`MR.b-Spuja,WrJN`miCOh^oC$pY$F/m1D:u\J)_)ikl\CaUUo,>%=I&
%TpN2pcmn8iGu&rM/SdG5`D1r>bf"kcC<hIYI!d5V`;B10'T+4V<U!<gFk,Vrq4M^hD(hlY-7:PuOm(i#5Zuk$ef>-CG#ocq[kHXd
%j[fWlh3TRK!lU!HCiZN:E6T0KW:5u8OJ*U:\"X*YRY[Q-%+JlSnZ'*;b!C-"UZh5aeSMR,4Pc]hPeb+>.^<?im\*!@GDIlK'2amq
%+Ap;f<bPdD/th1`8sKU5#GH2iorUZG2!XPZI&k0()QL13lX$db6A`QonFprEji>j/1FY%c\.,XU;IQdJgTWl7Gm,p#]MW*%%2OK*
%Ou#D()0pa1$3ugRM\)i.,16*nTHt[PH6bNjCqcuZKBr'Ur)T6)),1Z")2&9r$uY27cGa:I*5-W75<pO\$,d+2]19mA+iPlCeoqu$
%Q/)8Vm^5W?=FB-?b@sZ!U4d@>6apoL[67Q25g;5/Y67ptH<Ijp$\FI8BJ]Lc@8$%Vk[T=uAX;)]G5];j3jENY;@5=\2qqHPB6F]S
%Xqd%WSlF]o\D\IX0/rXo@BbdB**5qh`=<4g>QGcY.FKapnl0E\e?R!'k@$17^4=AsKbJXWL'TmPqk@g!Y$K&7!6O:%pjCo9<rpBP
%hq.2ZN/fpD=[rAN%(:`9Nl;C%/Yo`j[MmWs^ceR*=XtW5AqVQ\5qm1\"t/Y43=Z&LEg[?'%->sY8m?#JIJ7;6<i`#%,XS=.'X\@`
%)>g@%7TntCmc1[OVUS8oe8Ti9et9Oj#MC/>No%p`*&I/66l3;G:1Lc(HnuBgDOd@n,6eoOJN2#CQ(&e]!%!()=-'ibau:=C=4UE>
%G$+g]jV-'H]U^..A&:bO+R[B%-j.O?TWM:1-k$1c$Hoej0ehbJMQc&r(tjENCb`<A..NrW+]VEO"').=3KQ)Mg)@gfm'JM'kt-Xt
%h8cZ^,"*CE3PV*9flfU:g%dt3OX/mgh7-KJMI`fV9VJ\jap#1C'=+0^:">RrHFo]W2B0?_/6SNII<'lZ8_%GbjHtnmQ_ABDO(b;X
%4&r0!Gt;knrP^.MOr17E^Wl@"1*$Ir/)O6b!-t2&;Oeh/NT*\!jBb+X[T"'5jaB6;nFEu@`KjIt;\\4i8TfdoRDZ1^_mJ&Lh<"5U
%.XRZ05ANT:+P(.W:`k/bI2)\/TSYf6YF>^UcChRn#?:J/"3'+g&8J$\.6[rI(9i%PbAE4+"mg,Xd3CI7ENaV:oO98@9i\9,pM7tm
%Q#Am0[B'1rs1Sugb7FU+@6(A)k6oHVX16(L[I#GW,_(AkL5`q13Dm4E>9Ze?q@F&nitF%KED6Hi5/QEj<VQQ5PHBZh2u2=4WOlED
%R#/QbPFV?*i\V56&2Ii4O",&$-><jj_*!&X0A8<Krci`_JJPZ4!5/rK$Y!(rC.b.\^3j6h`UU;pC%lBdC;<$g-'`d@^=S.tL.IP4
%+gQ]G[e7&=Cm)HDG'==Gn1AZ%VjBXG;I-F%I%P0agR%:>d4i.AZKTK%db^HeXS^l2Pth?^Qn5d_J]K6W*T'DK;s&l.NAP".dKiKQ
%("&]sf9L>K=Cl_58C"B/p/cSs*tiou\h5Ujf.(-!mP"f.=JenFReqD3dT#WSM/e]?A^1NM$K.$9]8,-rbQcA?9(La'j:Do9g[$+I
%Cj=:+MEoJI*rA@djorjf?Q-05EGC665F1%QX843:=D#)=%sqYR2@^cL%(sfIp]0(T6Lr*4g<"kE!,E#K6_al5FW&lD!Kg\"OaZ5Y
%J[T]0$KA/4O/,R!E;XNQ`T*UPP/^V'#q9L\67E#c24ce]8AU0[Q#M2`._(Q1/O,sW+q^j0WJ@;t9!;)e!(8!qH6SSW22DCR))fp)
%B,[A(dK)Nk1m5F'Uo9[Y1),"4$oXlFAVj]_kqX^;+KZlLa5s),MhJU>/GW0p]k=[bGkL/JRFrmp]M>;6MH3J<;]P(+hGg?'$J!fa
%:sBhRC4YOPjJ=F5O(OkIerrAelcD96:N=;?=8sa>7IDhc0_./[B5T&th(AeQe*<QY=)`=R*1q)Ib$Wn]=<>LQ7Fal<YG&C^haPQ'
%R:m.[hS]1`/WA^lV+"OuU,qtVKcFHO&Y44Od8fLo]=1$oO-XW1`L)=kcdlt*\r[Naf5`j#L!!2d?#qP)LHR_-$D9X293XdoBrSPJ
%9_9LC7q2?jZ"*P;T#=@=abIC84K.$cEIm3uaSNWX^#JS"j^>6Vau!'>lkE)NV^4i\XS+W3UunCf6Bo`cjEAk`Ff<<nH7E:ilr"K5
%.!I2'WpAJ_qh+FLnP?B]e`?I%DZBSKq\eFI!d4<AeVt,oFODn7#0X&R:.WYh!>N//_j4P+FH3XB$uJ-3YEXDpPpqs<-uW>[Gs?ZB
%U-QE;_TE4`?WHYSN$%:(lb[M2^9r3P@!!(g^]I=D?LQ6>>&bDF=f7?ln[RnK^V9]BIX5$Mcs_BV9FUepWBmhCbq`(^!,:O4iY2IT
%4orgrd?(W2PVP/4]SG*#/(#D/Zf:792q4-th<AAMOi17i^uQ*9h5qR#Nugit6kN77!FF-[CC=8P45-6p@RVfC+K1$=Vb*C8p@`"'
%H/0+\#aW>YYT'e3KPd%!YqK<0b+T-t='*L)<kgU``Dq)E-ZUC%p"m7bROO2s+"=N[kkPGcoX,QtXSU4LiC3L[W@(cLXA0?7Zmce"
%BZO?)W:j6Bi'_1;:mGM=paE.#9jR8XkT%aoj?XNfNJeMhMhZGFh5#'OfsbB]E_,Kulg]MH>_j-ckS!'J-.9MIGoG*\-S`Buq.[kO
%:gY^u:K34=7TT,ekGWF"Q]TOPSs&fAqkU>0*tt;P3i`$;Sb-grmQi4mQT=+:<F.%US^8Us!IBt\W;/AhJ`:#B%1^!;1eSElig]1T
%m843lYg/sJ,^k!1(*,K2VP\YE;u_ih_NK9_'Ze->K%fi.f_lq+X-[^_GQgI]E5qNf2>kp-4FGiF/QHVBMZ$;1D\7Sc>8/9s!d+q&
%;,^"[7ehb$Ef!'6?NO?HG.0F6.Wh/PA-W39X4f4u=m9)jAom!-:J.F%]*ZU2U^6>8:h`VL9.YOHF<XMLdihM4M)!M?ci(.33G8[s
%DO5_[3QE[Q+J`+l3+m"SX;<T,X_UU>SqbP)&:*,Uo%1/`8ZtEVBpo^?Fa0+qbgA+8Sj$WXB`+]nD[5<tX3sLR/*`WJ3IHhtEZDeP
%*BXasL#.Aq4m)?fhb9=BmY-T?UBPG,mu1"[d0i+g&nDW0Tq+t!B^XS%2I*EDG^/#@O-6b'eD:W@qR$:,?2UV8]`%!I<EJ>%$0]FP
%[7P9?[32P`8[#(E2U$TS4tilN:.eA@k=6Og&GT,CP>s%dWFM@p^!n@b)*QQslH\]TPRG]27lOMQ1MB4^OUEF$mP2LK`p1fF5&/P"
%]ApZQVl9)*;_g__gfK8tW`:uCHBuWphG57"bHK4I'E.,6,^2'B:E\P<)m@PJMCq'lA30POYH83)S^El!1TEm*($k]@BB\':>?$SG
%5L(qU\5PTV/:+kcqo[nkB9s#e`%JtYFB`PhTg5c,i'9NP8r=91XVc9-/7U7iau^(T:\\8'At**l/Nc0j&d:Nm$+jP/S)]&,"6/8/
%L'1_s>XXJ9eeD.q9-Z#l6QC2GEKCK.cK=^R(UiHcfqutr\Z5?2B1)b%YbT2'c4P7A(4*:8EV)M.`4R3u$r\"36`+%'_\*G*-UBp8
%Mj#p=H<I.e$a%koedLs.dd7RbkN*qK2%"$MAQ@3B!jp+i"Vj6KgMWV62-%*&k])lp^@1Gi>=T_+*k&S_CuH3%Bn47S)SWg'):84c
%YHJS\D5P8(Q<$%fKS(gX/tU.U0;2$[dY*XJ!^3FEi&?VibcRe&I%_#F'W^$Si1n<hPL>K/J6u<<>0pA)4!G[dPV#LG(-W5Yj/S]k
%iC$Q#`N]_L3lOeBa[r[:6a,dPh]E9R&'oe3.GGq%<XKI`8Mjo34[JU.cu"g`9nBC8Pg0h-BRr$4JiAU>4?-'+&/B`bE*g=<<'p!.
%%>IrA:\sX,=DVF[?<XUqqf@*#aQA)s8B3Jh@*qcT)6`4q&@[7H?*Ml7G;ipBeb/Iuboc]6a-QKr([Zn#LVN13MKWkc]>+pSS>)Q*
%-7kk*KY!]c7EQ,uj]>To;fC07Wk+`-mes?'DW_h[JkOqFN3d'l_.e:$\+9uVi7D#=o7^0'5'D&(dUF:2VM`%c%JhQo(:*LJo.!<5
%QhEnC4+r+@4a$WtTmM"?h\7Ii>p6A.iLi+T^3^h5("=F0qF\%g9>S>[@P&,kY#*+0dKQ<NH#FM?9B4]WqKDs5Y=dGIn/*%K'9Gr-
%e#%6g3H6#pq=GrF^5&h3qS>GbDjhH7H5TlgB'o_cJ1d;eHN"5]2WFqOZ)8tgq`O;)qp-rRT@N2IY]8O5l1>/9FSZ'Bh)V:,Fma>[
%X7WXF3U2Zp:>ZYn]'8iPDEC"sgJ/:Ke=6"+'67s0'o^.=T=!J<EF4)_Va($$qii4j1/g3lW(234[U-[Wmu4*:P>-QJ8[dJ#WDt_R
%B*^lV6@!3#Ut!^d,?*g1aA5#=aSfuI!i7JiP*FHlkb+SN48m#2\2NE*XnJ>-'JK-X5G$Q/F1C)W9t)bE[U0hslE:LQqtO4<&EQ(0
%K76g3P&3GXl]gCL4n\,-DYnRM\,Enb9:)bf\,r"?>bT^%drX)%4mnHYlIb.X]'lXC6DD(m#u7C>.;qn<VpO\tNI$^\`b%gQMZ_u-
%3q=qc`PL83=,^%H[Df8)ki<Im]Sd7!/&oaPST/odJrKo%Y<TLXqfBXjGdIKDZfloU:it]b:QI^`QUY5be^WoKf'>HdM''"+nPkP@
%TW\I1l0H,[I80ZW>]WtW=>9->ZRPZ+=MQRc6Jf;GqDs.rXq'fqVZT#'@6FC>>[).KUS4S5`QLC3LED$/gSnoaE9@VuG398&[.=l-
%/8"qq`;X0-PH%_JmsG52SoW]`(36bQ/b!B8>Ms3gMs&t?Wu3;3NBKERhWJlcI'h?ERBL/\O;#gH0fML$c7sogToN=dFsu%dOMJ&<
%LNS7;=d$+%15s&H%([%,$_8MO;oO]e:1eBScmXX]X4"@dU)uT!'2f^t6uO`Vg%32=d4#\mmE!r&F>^0I799j!==tKYhN2'B.-c1u
%mH_,N:nX3`N7`!6<u-4$K"E*kTT_K=6?5/'U%BV2Ebj$`%2j'UG1!?WD/DP)jnV8ij"jo"oRhjO].,%$"K\S`fMjmnl#\\DFXAB)
%X/)M#ZRVaQ1or?WI5_l[Ac+$BRV&Mkcr)0nF&T/f;lOYoo5#!_h%E?>N4_]!aE9Q&"KY11(c/!\;>O_YI['KFU.sGB,u6nSW%gRF
%K(P,G,ogUNKku!k^a/.T]@JF10j?PjJtXDgM0hY:Tad5(qSVmsDU=V786%Mq=fW$*6d.oZ3M@H<TXBPi2BUdT%;0IT_W$<-Y+I8_
%RTX=7f;cUgYtl!()G=%e@;h5I\7eS+@jl42bo"O;peE.[$HMY/mB3=N!Vr*YFNULJ41QIPraVPQeNK3XU^476ot&K/)\[JH2]"f#
%#IMO:49MkrXgd-7ekBpl=kjmr^3=c)09D?nK=I,@fo2kIbJ$%EoKI/WL*@_S7T[p>r_0+a%H>'gCQce<dToq_3H85'S@_TsT@jUT
%99f,_eHR;040?f"]`o'Y-o&gNoPJ#/_9h3o\T.&/RpQ#O(sA+QiI%]JnTeA(R][AT5TrQiN2j+G!*)l#(oCDK!E;?Ho_W6C@7#i*
%.CfHjMNS@B9XA==+,[5KUn?<TDslXT`@)k\mX,;lkGP8Cf#Vgu?<t&"nk?F8MWqH4kjq>A=gf45r^<54(XO7gUj3IoFc_$),(?u)
%^><nRQG5(bOds&GV?akN*$ednHerK!^,Hm>'LDS"`Bn`:JVFca5p;Js]"RW+BT;Le,Z'h5<Ee*1B;InsDb_Q6;NV<"@hj>ZTpHIV
%qm]L^b$Ecbe7DcSS7mF=oETBD>EBG^3_+6'!C3KtWu9_b:'+SW60'IQFU"u1ECjCULpL75H*!N-;.kbm?(!W1h/h>+T,hotQ:XuQ
%dOC^fP5AMa>.%esn@gL]MZ7\E5Z:DqK9W$ab`(U,2/TZL(83O*qui?$&pdoK[mD+/%o<,?-bP[J3B$SDQ(3;0LJVtg]8gt<WdCQ*
%!@lbJFr+/hMX/Q@1^"gCkr,JoKgb.bZRSDSN0J-EF1`s:VA*!E<OATl5V0jg\NA"7HXB6JWRiEi&G"uR;L3bnFA6P%QK&I?!&<,N
%QtlY@@oQorLRFB`+RICqSb/E<!+<]RT_;;"PmJB_3D<(cT$^-Kd4.XjPu7W9YOZNNT:c`qm=9-rli;U$<`&CUc]:0]',@@(NTF:(
%IMi@DZ2;NA:<%SL\\1O7PKq!,Z]C(hhbhC@/I(%6WKMK!3gf4ar0e@iJtqh_>W)o8])=*>E-t&B/-`%Pd)Iq;:ke#C<2frB4;7t3
%*MHKTW-A7%f]&CqS]B)(X9FPKWaW])ckQ_"\b1lT$'.\&4Z=]Z*h!a6Ai=($PSP<a`(+Z"131i`Nr(P*1<T)hdXqtY+dX@>F7fW6
%NCa^*Q!Bj^O]`eV_Q`WB?\SDs&a$SOq4bbn8j]%j$'LjO=mU8KqTeD8pkn^`0T0"(Xb*+AQ*Q9REEP%0-*7_n[\SdG(Pj"O,pCF;
%/h#bu!jkOb'Ef%/c,_[D&hMl`l[]7E>QM(L93G9Xe2]HNpbc(Pe$USg=K/+Ip]/Od5?f7db?<CM?9k;Y6DA5[d01uU6o>gen(X)%
%0$Okd&Q<49U[(dIbePDO93dr\Wud'4F<K#^O3[gAPS@C,K;#[!m33RHp%Te:e?PsoWG]:@eer`k,Pt'<9U;R.)`QW\(!/$;;]l++
%%B6_j<n70nD:`jdgihXX%0VC?HJW-gCKl.s?Z:SMjdW9;nO;@a";*e_0-^4n#1uQ<AI[e3OLb03WE?l\GY'^*M())`,t@\ACheeN
%%sJ5A.'s5X$lH*@Y0=?7^e-q``Em^89\kI=Z*q`K+,_f$:m^!k2NU%jDq(ZZ`pKC>IJ=dZmK,f+f\](;H3KS7\ETX?DZ!*:ckf6Q
%Fr86r%&R<Qf(`Zk=[q0QP/f]RR3EX1r9%eg8r)hFq-]@DMc]N\3Dq65,_=I9k`adO,&\M\/$dKlNG/q&=0grC;(enpji!f5F*&'Q
%dc5FV8]BoW7eL.an!:*Ag(h4?&"*m6UU!O%YE/RjE#udX8%4Uj+[&l4nQ]S^X%AfQUQo0D8S3Y7h](t-H+eb9g:"^<!A2B-h1t,M
%/u&S9F2L3DZnc@JU^9Y5<A;mjZV94pD[A9,ZA']Bh)hCB7S[PKSHip$I2,nR`u!Nr7?A]H<ao3H99"RfDT)Y[b,/tG'?@NlP&_'O
%kHX@GeWakV/D<5?C<=%DZJ9\eaM^/ae:SfjBprTd3OFm4FHu2l"1:nV"Vh_34P>L3+=g&PV^,(**/T(25MrK(Th[JB:.R%]!MKYc
%d*q<IrL.hoj0U>N3iK)A.`hj'7otGP5.iI($%XX<QF=?(W:@]B.BQf'q:EUH/1Zd<*.2&RapsmD4iV51.QR?5q46#'?`VdOmY8F"
%qOk/9o]g(dP^VNKFVf?:8\?/Di5)0T_Fc9o$KPqbK!o"!(-5MQB9tQ<FfD1U>0eILoKl)V$)/kQ8!&TH!gV$()GmL)=^d<Y[4%"r
%Glm<=#@u@-8\".NXa=?g?=[m'$_YR7"2\1FUi\+SptbRnD(G@A3^m_qh\dH7p6]+5kkJlRU5ja.h^?c.,sPp("Iei(Y/21*XYMqf
%$L9oQUt;m3AFj]h(g165O.SL;]rr1?3Za=dmZbT.+S9c<*Z2<uouY.P3L033\N#oG^lDeLUH6Pt7j9\(qj8bZCK#\uXp]GTUPsB]
%$T]>5f5%EDfUF6-o1;6Q[C-%h=7,HeDo%FK9iic1EP24F\=s1V93.&+0k$?^VddKK]GaJ_(<L`H1Q*;G&4obk;N]+&n73aKZJ"\8
%'L;)8W9eOn9a_WXdn>PbNWHarTrkXbi-!r=j<>D]b#Tq'[?-=6j:pVShAhIu/G//>Sk%-jNi:dh[hH%9&+ABRocN'S,2I-4?Lu4P
%^AZMF^\RSqB<Gj$$ZJenVli7JIaa]oHi;J""P\$-IU4XQReQW1:&ModrqG25&IG%Hh_K8uQ]E/u#b'[9ge7ZqoBuL>=5FLP5DNni
%GJ44);?\%]I7aISQYeMmfMj&(F^"Kc@?L$s==;Z:V3[o6f!W+Zm3PNf/1*>UoEcWH?0))`1:KC8+ZrGW1.e5t=b):mXIT,eokJB\
%h-s%F`[Gs9^THV-Ms:VU:j/P(Rq+Ph("[Jf,9c&d-gWN$CUE\8c\JO!(V^7b$>PU$C@7;d\QMME1e]K-s7lDp=`3rg+1Ig7d[$Au
%Uh>N\M-'kUkK,e$OJF\%4&2@W.<B)'8mJ2gVHs+'m#Jukq?62Th,/5&c<r)j^51epKS-s!ZDPRoHTe;X-4P^YM]fE;#.q(9I7d#Z
%A#D5uI1)T=C5Z'7<N6g'p<[sS&U/B9oS[R8;R&K(Eq.b.h,W1[j6_n-)dnSL6[(ZZYogk/6]oQWA%$J6VcA=O8!F/eoVQJlDAFFo
%Gcl192A^0eiMb<IiTY2@p5hSJ;N9nI"t0Ia%n346YddY32@HREW!`,GL.4Y]@:,(W^ufRpS8Yc]W@fXJ]fM50$.H6n`_h&K)RW"`
%j_(<P6`:L\5n$,XJ8C#O6g<=BHBrY,WF>jjb=!YdRc@e![M=cL)E_tC>)rTDN[Y*uD.UE'#2ieWj6$EM!$I24_150k58o`LYsn.T
%%N]r'aUL),f,ags')dYKeJZDMfh^2GhMno'Q[kK&0&oqp"'%=",#=I,W0SpA7R_Rac/TT;aQD%#?(>o5Z^)Qk9s*S+Pg^2kX";Y?
%'lpE+cWjgg'HcQ+$Z`n&``uD*nb"pGgm,BmIG,E>5HB,aB[ZCa3^!pt'/UH,^Ub!E]XI6Kh=Vf>_]HSY1QAQ=SC62B"Jb9s_rDPA
%FJ6U=Spok#N37RR=J%h8k'HmO5Gud!Z_p'h8:"-%>e)4uG,\;a_'sk"JLm`OM"mf]c"Hs]\O<1]^$j48C(-HUYuEaVf&K*l2Cc<k
%?<pSk,sH;iW-W]])k+KU8Q@'G,27?Ke<6t$gGk+s<G$AlotB%q5u_!RkPg!pA`SF-Y+!-P\^gcTp1]4*UP',-,d]3q.B>_nAI)0q
%j'F*5K5-V>]diu`5Y3m[*cB!,d)NY\\@aLeRqXRfl@gJBLIn5,Q')E7W&*tLBrW"+Q/h@JZ?kV,mm*D%.QU_&h[<o&?:LtnV4n]j
%CUB)b@?&GQH@e-%!)uG#kQisFn2Ol8?frKP_-d>ufo?4bVPJQ_lM5OsV8dnO;CM]G9Hmt3\Ce.Ak%Fk\^A$/,ZPHi6<%!L);p7c1
%Uk$+4@C&S:IRL(9%G=4KaL3NP"0hLkZ_`\L3@8/:G/RZqOq%Gk[WThi8MdCjeQ8^q?sEACL`cN+fOGh(ZL$_+HLU%0[-^UUC<(eK
%kWX#"H6;@JHK>N7V^V$ZLnZsr%X\=,'n*c!D@7a":9V,'7hX%)(gI#*P2A?uX9qgV.J7'HSircL#!5&,3iRRm;#4;#*=;0QW+]ub
%-"InL=]s^Ia#0C\`K.'2``P(D2k_YW#T4NfS8fMPFmH2k*D]o^lV>S#$S3hDr+a9al^-6\mqV'`A4bB(WrWY0eXVs6OBY@3^d&fQ
%RT[MtX[^dNlUk^pLo3M7g'?^(/F$#Uan4E:oRN`(]KR'[5KHABO.p3+DT;OhUj2ET#7#Ei@1UmZXUqM2aoqr`6XQt\kjju>/Q59>
%k^22:+-b+bQhdQcZGD=E72,_bT^%@N[rrRQcgY<m$QcU0CUT-,Q[@4d!blAN>(jd_o[NE%Z_SWu5l5"C(2t&KHGVp'7t^-rGMcQ)
%mZ:GHIB7Ur;uqsuG:MksG;^IjGRH5lJ[0lfJd=(4\^Zi2jbt)eT#c^,eWbafWbUL-aja(Jf,g=>_pZ57OkQN><4/`VN]2ln87rM_
%8_98G=+DO`9j<,\[%c18k)]$hedj+H&'ql"Im)#HJ,,0!5DOr;pW\K&hnFPf!5JEk2h-;R?f->(f>G,pm;N"%h)F6+IJ(kBre@-=
%p)h>)^&%?0Dnl24hnOU:lFXh/rVo-ml#O]1IeSWtr:f+Jk5PGqkDa9~>
%AI9_PrivateDataEnd
